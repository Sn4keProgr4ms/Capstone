
/Users/admin/Desktop/Remys_Labs/Capstone/target/5.3.0/argon/Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009d88  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bdda8  000bdda8  0000dda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         000001ec  2003e340  000bddcc  0000e340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000002c4  2003e52c  2003e52c  0001e52c  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000bdfb8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000bdfbc  000bdfbc  0001dfbc  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000bdfc2  000bdfc2  0001dfc2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000bdfe6  000bdfe6  0001dfe6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   00162660  00000000  00000000  0001dfea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0001810c  00000000  00000000  0018064a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0004b425  00000000  00000000  00198756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000039a0  00000000  00000000  001e3b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000c2e8  00000000  00000000  001e751b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00040955  00000000  00000000  001f3803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0005385e  00000000  00000000  00234158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014288e  00000000  00000000  002879b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b258  00000000  00000000  003ca244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_d2f>:
   b490c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b4910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4914:	bf24      	itt	cs
   b4916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b491a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b491e:	d90d      	bls.n	b493c <__aeabi_d2f+0x30>
   b4920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b4924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b4928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b492c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b4930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b4934:	bf08      	it	eq
   b4936:	f020 0001 	biceq.w	r0, r0, #1
   b493a:	4770      	bx	lr
   b493c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b4940:	d121      	bne.n	b4986 <__aeabi_d2f+0x7a>
   b4942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b4946:	bfbc      	itt	lt
   b4948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b494c:	4770      	bxlt	lr
   b494e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4952:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b4956:	f1c2 0218 	rsb	r2, r2, #24
   b495a:	f1c2 0c20 	rsb	ip, r2, #32
   b495e:	fa10 f30c 	lsls.w	r3, r0, ip
   b4962:	fa20 f002 	lsr.w	r0, r0, r2
   b4966:	bf18      	it	ne
   b4968:	f040 0001 	orrne.w	r0, r0, #1
   b496c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b4974:	fa03 fc0c 	lsl.w	ip, r3, ip
   b4978:	ea40 000c 	orr.w	r0, r0, ip
   b497c:	fa23 f302 	lsr.w	r3, r3, r2
   b4980:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4984:	e7cc      	b.n	b4920 <__aeabi_d2f+0x14>
   b4986:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b498a:	d107      	bne.n	b499c <__aeabi_d2f+0x90>
   b498c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4990:	bf1e      	ittt	ne
   b4992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b499a:	4770      	bxne	lr
   b499c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b49a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b49a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b49a8:	4770      	bx	lr
   b49aa:	bf00      	nop

000b49ac <__aeabi_d2ulz>:
   b49ac:	b5d0      	push	{r4, r6, r7, lr}
   b49ae:	4b0c      	ldr	r3, [pc, #48]	; (b49e0 <__aeabi_d2ulz+0x34>)
   b49b0:	2200      	movs	r2, #0
   b49b2:	4606      	mov	r6, r0
   b49b4:	460f      	mov	r7, r1
   b49b6:	f7ff fcef 	bl	b4398 <__aeabi_dmul>
   b49ba:	f7ff ff87 	bl	b48cc <__aeabi_d2uiz>
   b49be:	4604      	mov	r4, r0
   b49c0:	f7ff fc70 	bl	b42a4 <__aeabi_ui2d>
   b49c4:	4b07      	ldr	r3, [pc, #28]	; (b49e4 <__aeabi_d2ulz+0x38>)
   b49c6:	2200      	movs	r2, #0
   b49c8:	f7ff fce6 	bl	b4398 <__aeabi_dmul>
   b49cc:	4602      	mov	r2, r0
   b49ce:	460b      	mov	r3, r1
   b49d0:	4630      	mov	r0, r6
   b49d2:	4639      	mov	r1, r7
   b49d4:	f7ff fb28 	bl	b4028 <__aeabi_dsub>
   b49d8:	f7ff ff78 	bl	b48cc <__aeabi_d2uiz>
   b49dc:	4621      	mov	r1, r4
   b49de:	bdd0      	pop	{r4, r6, r7, pc}
   b49e0:	3df00000 	.word	0x3df00000
   b49e4:	41f00000 	.word	0x41f00000

000b49e8 <strcmp>:
   b49e8:	f810 2b01 	ldrb.w	r2, [r0], #1
   b49ec:	f811 3b01 	ldrb.w	r3, [r1], #1
   b49f0:	2a01      	cmp	r2, #1
   b49f2:	bf28      	it	cs
   b49f4:	429a      	cmpcs	r2, r3
   b49f6:	d0f7      	beq.n	b49e8 <strcmp>
   b49f8:	1ad0      	subs	r0, r2, r3
   b49fa:	4770      	bx	lr

000b49fc <strlen>:
   b49fc:	4603      	mov	r3, r0
   b49fe:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a02:	2a00      	cmp	r2, #0
   b4a04:	d1fb      	bne.n	b49fe <strlen+0x2>
   b4a06:	1a18      	subs	r0, r3, r0
   b4a08:	3801      	subs	r0, #1
   b4a0a:	4770      	bx	lr

000b4a0c <__aeabi_d2lz>:
   b4a0c:	b538      	push	{r3, r4, r5, lr}
   b4a0e:	2200      	movs	r2, #0
   b4a10:	2300      	movs	r3, #0
   b4a12:	4604      	mov	r4, r0
   b4a14:	460d      	mov	r5, r1
   b4a16:	f7ff ff31 	bl	b487c <__aeabi_dcmplt>
   b4a1a:	b928      	cbnz	r0, b4a28 <__aeabi_d2lz+0x1c>
   b4a1c:	4620      	mov	r0, r4
   b4a1e:	4629      	mov	r1, r5
   b4a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4a24:	f7ff bfc2 	b.w	b49ac <__aeabi_d2ulz>
   b4a28:	4620      	mov	r0, r4
   b4a2a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   b4a2e:	f7ff ffbd 	bl	b49ac <__aeabi_d2ulz>
   b4a32:	4240      	negs	r0, r0
   b4a34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4a38:	bd38      	pop	{r3, r4, r5, pc}
   b4a3a:	bf00      	nop

000b4a3c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a3c:	4809      	ldr	r0, [pc, #36]	; (b4a64 <module_user_pre_init+0x28>)
   b4a3e:	490a      	ldr	r1, [pc, #40]	; (b4a68 <module_user_pre_init+0x2c>)
   b4a40:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a42:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a44:	d005      	beq.n	b4a52 <module_user_pre_init+0x16>
   b4a46:	4a09      	ldr	r2, [pc, #36]	; (b4a6c <module_user_pre_init+0x30>)
   b4a48:	4282      	cmp	r2, r0
   b4a4a:	d002      	beq.n	b4a52 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a4c:	1a12      	subs	r2, r2, r0
   b4a4e:	f005 fee5 	bl	ba81c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a52:	4807      	ldr	r0, [pc, #28]	; (b4a70 <module_user_pre_init+0x34>)
   b4a54:	4a07      	ldr	r2, [pc, #28]	; (b4a74 <module_user_pre_init+0x38>)
   b4a56:	2100      	movs	r1, #0
   b4a58:	1a12      	subs	r2, r2, r0
   b4a5a:	f005 ff07 	bl	ba86c <memset>
    return &link_global_data_start;
}
   b4a5e:	4801      	ldr	r0, [pc, #4]	; (b4a64 <module_user_pre_init+0x28>)
   b4a60:	bd08      	pop	{r3, pc}
   b4a62:	bf00      	nop
   b4a64:	2003e340 	.word	0x2003e340
   b4a68:	000bddcc 	.word	0x000bddcc
   b4a6c:	2003e52c 	.word	0x2003e52c
   b4a70:	2003e52c 	.word	0x2003e52c
   b4a74:	2003e7f0 	.word	0x2003e7f0

000b4a78 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a78:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a7a:	4e07      	ldr	r6, [pc, #28]	; (b4a98 <module_user_init+0x20>)
   b4a7c:	4c07      	ldr	r4, [pc, #28]	; (b4a9c <module_user_init+0x24>)
    module_user_init_hook();
   b4a7e:	f005 fc65 	bl	ba34c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a82:	1ba4      	subs	r4, r4, r6
   b4a84:	08a4      	lsrs	r4, r4, #2
   b4a86:	2500      	movs	r5, #0
   b4a88:	42ac      	cmp	r4, r5
   b4a8a:	d100      	bne.n	b4a8e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a8c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a8e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a92:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a94:	3501      	adds	r5, #1
   b4a96:	e7f7      	b.n	b4a88 <module_user_init+0x10>
   b4a98:	000bdd84 	.word	0x000bdd84
   b4a9c:	000bdda8 	.word	0x000bdda8

000b4aa0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4aa0:	f000 b8f8 	b.w	b4c94 <setup>

000b4aa4 <module_user_loop>:
}

void module_user_loop() {
   b4aa4:	b508      	push	{r3, lr}
    loop();
   b4aa6:	f000 f973 	bl	b4d90 <loop>
    _post_loop();
}
   b4aaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4aae:	f005 bc05 	b.w	ba2bc <_post_loop>

000b4ab2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ab2:	f002 bbe5 	b.w	b7280 <malloc>

000b4ab6 <_Znaj>:
   b4ab6:	f002 bbe3 	b.w	b7280 <malloc>

000b4aba <_ZdaPv>:
   b4aba:	f002 bbe9 	b.w	b7290 <free>

000b4abe <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4abe:	f002 bbe7 	b.w	b7290 <free>
	...

000b4ac4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4ac4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4ac6:	4a03      	ldr	r2, [pc, #12]	; (b4ad4 <__cxa_pure_virtual+0x10>)
   b4ac8:	4903      	ldr	r1, [pc, #12]	; (b4ad8 <__cxa_pure_virtual+0x14>)
   b4aca:	200c      	movs	r0, #12
   b4acc:	f002 fb14 	bl	b70f8 <panic_>
  while (1);
   b4ad0:	e7fe      	b.n	b4ad0 <__cxa_pure_virtual+0xc>
   b4ad2:	bf00      	nop
   b4ad4:	000b6d89 	.word	0x000b6d89
   b4ad8:	000bc8d0 	.word	0x000bc8d0

000b4adc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4adc:	7800      	ldrb	r0, [r0, #0]
   b4ade:	fab0 f080 	clz	r0, r0
   b4ae2:	0940      	lsrs	r0, r0, #5
   b4ae4:	4770      	bx	lr

000b4ae6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ae6:	2301      	movs	r3, #1
   b4ae8:	7003      	strb	r3, [r0, #0]
   b4aea:	4770      	bx	lr

000b4aec <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4aec:	4770      	bx	lr

000b4aee <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   b4aee:	4770      	bx	lr

000b4af0 <_Z8callbackPcPhj>:


}

void callback(char *topic, byte *payload, unsigned int length)
{
   b4af0:	b5b0      	push	{r4, r5, r7, lr}
   b4af2:	ed2d 8b02 	vpush	{d8}
  char p[length + 1];
   b4af6:	f102 0308 	add.w	r3, r2, #8
{
   b4afa:	b088      	sub	sp, #32
  char p[length + 1];
   b4afc:	f023 0307 	bic.w	r3, r3, #7
{
   b4b00:	af00      	add	r7, sp, #0
  char p[length + 1];
   b4b02:	ebad 0d03 	sub.w	sp, sp, r3
{
   b4b06:	4614      	mov	r4, r2
   b4b08:	4605      	mov	r5, r0
  memcpy(p, payload, length);
   b4b0a:	4668      	mov	r0, sp
   b4b0c:	f005 fe86 	bl	ba81c <memcpy>
  p[length] = NULL;
   b4b10:	2300      	movs	r3, #0
  String s = p;
   b4b12:	4669      	mov	r1, sp
   b4b14:	4638      	mov	r0, r7
  p[length] = NULL;
   b4b16:	f80d 3004 	strb.w	r3, [sp, r4]
  String s = p;
   b4b1a:	f004 fef0 	bl	b98fe <_ZN6StringC1EPK19__FlashStringHelper>
  double value = s.toFloat();
   b4b1e:	4638      	mov	r0, r7
   b4b20:	f004 ff6a 	bl	b99f8 <_ZNK6String7toFloatEv>

  String callbackTopic = topic;
   b4b24:	4629      	mov	r1, r5
   b4b26:	f107 0010 	add.w	r0, r7, #16
  double value = s.toFloat();
   b4b2a:	eeb0 8a40 	vmov.f32	s16, s0
  String callbackTopic = topic;
   b4b2e:	f004 fee6 	bl	b98fe <_ZN6StringC1EPK19__FlashStringHelper>

  if (callbackTopic.compareTo(argon2))
   b4b32:	490d      	ldr	r1, [pc, #52]	; (b4b68 <_Z8callbackPcPhj+0x78>)
   b4b34:	f107 0010 	add.w	r0, r7, #16
   b4b38:	f004 ff49 	bl	b99ce <_ZNK6String9compareToERKS_>
   b4b3c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
   b4b40:	ee17 3a90 	vmov	r3, s15
   b4b44:	b168      	cbz	r0, b4b62 <_Z8callbackPcPhj+0x72>
  {
    argon2_distance = value;
   b4b46:	4a09      	ldr	r2, [pc, #36]	; (b4b6c <_Z8callbackPcPhj+0x7c>)
  }
  else
  {
    argon3_distance = value;
   b4b48:	6013      	str	r3, [r2, #0]
  String callbackTopic = topic;
   b4b4a:	f107 0010 	add.w	r0, r7, #16
   b4b4e:	f004 fe8b 	bl	b9868 <_ZN6StringD1Ev>
  String s = p;
   b4b52:	4638      	mov	r0, r7
   b4b54:	f004 fe88 	bl	b9868 <_ZN6StringD1Ev>
  }
}
   b4b58:	3720      	adds	r7, #32
   b4b5a:	46bd      	mov	sp, r7
   b4b5c:	ecbd 8b02 	vpop	{d8}
   b4b60:	bdb0      	pop	{r4, r5, r7, pc}
    argon3_distance = value;
   b4b62:	4a03      	ldr	r2, [pc, #12]	; (b4b70 <_Z8callbackPcPhj+0x80>)
   b4b64:	e7f0      	b.n	b4b48 <_Z8callbackPcPhj+0x58>
   b4b66:	bf00      	nop
   b4b68:	2003e560 	.word	0x2003e560
   b4b6c:	2003e340 	.word	0x2003e340
   b4b70:	2003e344 	.word	0x2003e344

000b4b74 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4b74:	b510      	push	{r4, lr}
  }
   b4b76:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4b78:	4604      	mov	r4, r0
  }
   b4b7a:	f7ff ffa0 	bl	b4abe <_ZdlPvj>
   b4b7e:	4620      	mov	r0, r4
   b4b80:	bd10      	pop	{r4, pc}
	...

000b4b84 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   b4b84:	4b0a      	ldr	r3, [pc, #40]	; (b4bb0 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   b4b86:	b510      	push	{r4, lr}
   b4b88:	4604      	mov	r4, r0
   b4b8a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   b4b8c:	f003 fe26 	bl	b87dc <_ZN5spark10LogManager8instanceEv>
   b4b90:	4621      	mov	r1, r4
   b4b92:	f004 f85e 	bl	b8c52 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   b4b96:	f005 fb0b 	bl	ba1b0 <_Z16_fetch_usbserialv>
   b4b9a:	f005 fafd 	bl	ba198 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   b4b9e:	4620      	mov	r0, r4
   b4ba0:	4b04      	ldr	r3, [pc, #16]	; (b4bb4 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   b4ba2:	f840 3b04 	str.w	r3, [r0], #4
   b4ba6:	f003 feef 	bl	b8988 <_ZN5spark6detail9LogFilterD1Ev>
    }
   b4baa:	4620      	mov	r0, r4
   b4bac:	bd10      	pop	{r4, pc}
   b4bae:	bf00      	nop
   b4bb0:	000bc9d8 	.word	0x000bc9d8
   b4bb4:	000bc9c0 	.word	0x000bc9c0

000b4bb8 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   b4bb8:	b510      	push	{r4, lr}
   b4bba:	4604      	mov	r4, r0
    }
   b4bbc:	f7ff ffe2 	bl	b4b84 <_ZN5spark16SerialLogHandlerD1Ev>
   b4bc0:	4620      	mov	r0, r4
   b4bc2:	2124      	movs	r1, #36	; 0x24
   b4bc4:	f7ff ff7b 	bl	b4abe <_ZdlPvj>
   b4bc8:	4620      	mov	r0, r4
   b4bca:	bd10      	pop	{r4, pc}

000b4bcc <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4bcc:	b40e      	push	{r1, r2, r3}
   b4bce:	b503      	push	{r0, r1, lr}
   b4bd0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4bd2:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4bd4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4bd8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4bda:	f004 fd48 	bl	b966e <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4bde:	b002      	add	sp, #8
   b4be0:	f85d eb04 	ldr.w	lr, [sp], #4
   b4be4:	b003      	add	sp, #12
   b4be6:	4770      	bx	lr

000b4be8 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4be8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4bea:	4604      	mov	r4, r0
   b4bec:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4bee:	7922      	ldrb	r2, [r4, #4]
   b4bf0:	68a3      	ldr	r3, [r4, #8]
   b4bf2:	b132      	cbz	r2, b4c02 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4bf4:	b9a3      	cbnz	r3, b4c20 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4bf6:	490b      	ldr	r1, [pc, #44]	; (b4c24 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4bf8:	b002      	add	sp, #8
   b4bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4bfe:	f004 bcfb 	b.w	b95f8 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4c02:	4a09      	ldr	r2, [pc, #36]	; (b4c28 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4c04:	7b26      	ldrb	r6, [r4, #12]
   b4c06:	4d09      	ldr	r5, [pc, #36]	; (b4c2c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4c08:	4909      	ldr	r1, [pc, #36]	; (b4c30 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4c0a:	7b64      	ldrb	r4, [r4, #13]
   b4c0c:	2e01      	cmp	r6, #1
   b4c0e:	bf18      	it	ne
   b4c10:	4629      	movne	r1, r5
   b4c12:	e9cd 1400 	strd	r1, r4, [sp]
   b4c16:	4907      	ldr	r1, [pc, #28]	; (b4c34 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4c18:	f7ff ffd8 	bl	b4bcc <_ZN5Print6printfEPKcz>
  }
   b4c1c:	b002      	add	sp, #8
   b4c1e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4c20:	4a05      	ldr	r2, [pc, #20]	; (b4c38 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4c22:	e7ef      	b.n	b4c04 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4c24:	000bc8f6 	.word	0x000bc8f6
   b4c28:	000bd6d3 	.word	0x000bd6d3
   b4c2c:	000bc8f2 	.word	0x000bc8f2
   b4c30:	000bc8ee 	.word	0x000bc8ee
   b4c34:	000bc90c 	.word	0x000bc90c
   b4c38:	000bc8e5 	.word	0x000bc8e5

000b4c3c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   b4c3c:	b40e      	push	{r1, r2, r3}
   b4c3e:	b500      	push	{lr}
   b4c40:	b08c      	sub	sp, #48	; 0x30
   b4c42:	aa0d      	add	r2, sp, #52	; 0x34
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   b4c44:	f04f 0c20 	mov.w	ip, #32
inline void spark::Logger::info(const char *fmt, ...) const {
   b4c48:	f852 1b04 	ldr.w	r1, [r2], #4
    va_start(args, fmt);
   b4c4c:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4c4e:	e9cd 1200 	strd	r1, r2, [sp]
    attr.flags = 0;
   b4c52:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4c54:	6801      	ldr	r1, [r0, #0]
   b4c56:	aa04      	add	r2, sp, #16
   b4c58:	201e      	movs	r0, #30
    attr.flags = 0;
   b4c5a:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   b4c5e:	f002 fa5b 	bl	b7118 <log_message_v>
}
   b4c62:	b00c      	add	sp, #48	; 0x30
   b4c64:	f85d eb04 	ldr.w	lr, [sp], #4
   b4c68:	b003      	add	sp, #12
   b4c6a:	4770      	bx	lr

000b4c6c <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv>:

void connectedCallback(const BlePeerDevice &peer, void *context)
{
   b4c6c:	b508      	push	{r3, lr}
  Log.info("connected");
   b4c6e:	4902      	ldr	r1, [pc, #8]	; (b4c78 <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv+0xc>)
   b4c70:	4802      	ldr	r0, [pc, #8]	; (b4c7c <_Z17connectedCallbackRKN8particle13BlePeerDeviceEPv+0x10>)
   b4c72:	f7ff ffe3 	bl	b4c3c <_ZNK5spark6Logger4infoEPKcz>
}
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	000bd5c7 	.word	0x000bd5c7
   b4c7c:	2003e6a8 	.word	0x2003e6a8

000b4c80 <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv>:

void disconnectedCallback(const BlePeerDevice &peer, void *context)
{
   b4c80:	b508      	push	{r3, lr}
  Log.info("disconnected");
   b4c82:	4902      	ldr	r1, [pc, #8]	; (b4c8c <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv+0xc>)
   b4c84:	4802      	ldr	r0, [pc, #8]	; (b4c90 <_Z20disconnectedCallbackRKN8particle13BlePeerDeviceEPv+0x10>)
   b4c86:	f7ff ffd9 	bl	b4c3c <_ZNK5spark6Logger4infoEPKcz>
}
   b4c8a:	bd08      	pop	{r3, pc}
   b4c8c:	000bc929 	.word	0x000bc929
   b4c90:	2003e6a8 	.word	0x2003e6a8

000b4c94 <setup>:
{
   b4c94:	b570      	push	{r4, r5, r6, lr}
  display.setup();
   b4c96:	482d      	ldr	r0, [pc, #180]	; (b4d4c <setup+0xb8>)
   b4c98:	4c2d      	ldr	r4, [pc, #180]	; (b4d50 <setup+0xbc>)
{
   b4c9a:	b090      	sub	sp, #64	; 0x40
  display.setup();
   b4c9c:	f001 ffb6 	bl	b6c0c <_ZN16OledWingAdafruit5setupEv>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b4ca0:	4b2c      	ldr	r3, [pc, #176]	; (b4d54 <setup+0xc0>)
  client.subscribe(argon2);
   b4ca2:	482d      	ldr	r0, [pc, #180]	; (b4d58 <setup+0xc4>)
   b4ca4:	6819      	ldr	r1, [r3, #0]
   b4ca6:	f001 ff65 	bl	b6b74 <_ZN4MQTT9subscribeEPKc>
   b4caa:	4b2c      	ldr	r3, [pc, #176]	; (b4d5c <setup+0xc8>)
  client.subscribe(argon3);
   b4cac:	482a      	ldr	r0, [pc, #168]	; (b4d58 <setup+0xc4>)
   b4cae:	6819      	ldr	r1, [r3, #0]
   b4cb0:	f001 ff60 	bl	b6b74 <_ZN4MQTT9subscribeEPKc>
  BLE.on();
   b4cb4:	f002 fd2e 	bl	b7714 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4cb8:	f002 fd48 	bl	b774c <_ZNK8particle14BleLocalDevice2onEv>
  BLE.onConnected(connectedCallback, NULL);
   b4cbc:	f002 fd2a 	bl	b7714 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4cc0:	4927      	ldr	r1, [pc, #156]	; (b4d60 <setup+0xcc>)
   b4cc2:	2200      	movs	r2, #0
   b4cc4:	f003 f8d7 	bl	b7e76 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  BLE.onDisconnected(disconnectedCallback, NULL);
   b4cc8:	f002 fd24 	bl	b7714 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4ccc:	4925      	ldr	r1, [pc, #148]	; (b4d64 <setup+0xd0>)
   b4cce:	2200      	movs	r2, #0
   b4cd0:	f003 f8b2 	bl	b7e38 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  BleAdvertisingData advData;
   b4cd4:	a803      	add	r0, sp, #12
   b4cd6:	f002 fef9 	bl	b7acc <_ZN8particle18BleAdvertisingDataC1Ev>
  advData.appendServiceUUID(serviceUuid);
   b4cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b4cdc:	ad06      	add	r5, sp, #24
   b4cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   b4ce0:	ad06      	add	r5, sp, #24
   b4ce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b4ce4:	6826      	ldr	r6, [r4, #0]
   b4ce6:	ac0b      	add	r4, sp, #44	; 0x2c
   b4ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4cea:	a80b      	add	r0, sp, #44	; 0x2c
        BleUuid tempUUID(uuid);
   b4cec:	6026      	str	r6, [r4, #0]
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4cee:	f002 fbf1 	bl	b74d4 <_ZNK8particle7BleUuid4typeEv>
   b4cf2:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4cf4:	a80b      	add	r0, sp, #44	; 0x2c
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4cf6:	bb0c      	cbnz	r4, b4d3c <setup+0xa8>
            uint16_t uuid16 = tempUUID.shorted();
   b4cf8:	f002 fbee 	bl	b74d8 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4cfc:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b4cfe:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4d02:	2302      	movs	r3, #2
   b4d04:	f10d 020a 	add.w	r2, sp, #10
   b4d08:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b4d0a:	a803      	add	r0, sp, #12
   b4d0c:	f002 fed3 	bl	b7ab6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&advData);
   b4d10:	f002 fd00 	bl	b7714 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4d14:	2200      	movs	r2, #0
   b4d16:	a903      	add	r1, sp, #12
   b4d18:	f002 fd74 	bl	b7804 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  LIS3DHConfig config;
   b4d1c:	a80b      	add	r0, sp, #44	; 0x2c
   b4d1e:	f001 faae 	bl	b627e <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_100_HZ);
   b4d22:	2150      	movs	r1, #80	; 0x50
   b4d24:	a80b      	add	r0, sp, #44	; 0x2c
   b4d26:	f001 fab7 	bl	b6298 <_ZN12LIS3DHConfig12setAccelModeEh>
  accel.setup(config);
   b4d2a:	a90b      	add	r1, sp, #44	; 0x2c
   b4d2c:	480e      	ldr	r0, [pc, #56]	; (b4d68 <setup+0xd4>)
   b4d2e:	f001 fb15 	bl	b635c <_ZN6LIS3DH5setupER12LIS3DHConfig>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   b4d32:	9803      	ldr	r0, [sp, #12]
   b4d34:	f002 faac 	bl	b7290 <free>
}
   b4d38:	b010      	add	sp, #64	; 0x40
   b4d3a:	bd70      	pop	{r4, r5, r6, pc}
   b4d3c:	f002 fbce 	bl	b74dc <_ZNK8particle7BleUuid8rawBytesEv>
   b4d40:	2300      	movs	r3, #0
   b4d42:	9300      	str	r3, [sp, #0]
   b4d44:	4602      	mov	r2, r0
   b4d46:	2310      	movs	r3, #16
   b4d48:	2107      	movs	r1, #7
   b4d4a:	e7de      	b.n	b4d0a <setup+0x76>
   b4d4c:	2003e5e0 	.word	0x2003e5e0
   b4d50:	2003e674 	.word	0x2003e674
   b4d54:	2003e560 	.word	0x2003e560
   b4d58:	2003e580 	.word	0x2003e580
   b4d5c:	2003e570 	.word	0x2003e570
   b4d60:	000b4c6d 	.word	0x000b4c6d
   b4d64:	000b4c81 	.word	0x000b4c81
   b4d68:	2003e538 	.word	0x2003e538

000b4d6c <_Z11funcDisplayv>:

void funcDisplay()
{
   b4d6c:	b510      	push	{r4, lr}
  display.clearDisplay();
   b4d6e:	4c07      	ldr	r4, [pc, #28]	; (b4d8c <_Z11funcDisplayv+0x20>)
   b4d70:	4620      	mov	r0, r4
   b4d72:	f000 fecb 	bl	b5b0c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(1);
   b4d76:	2101      	movs	r1, #1
   b4d78:	4620      	mov	r0, r4
   b4d7a:	f000 fd4e 	bl	b581a <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4d7e:	2200      	movs	r2, #0
   b4d80:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4d84:	e9c4 2304 	strd	r2, r3, [r4, #16]
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
}
   b4d88:	bd10      	pop	{r4, pc}
   b4d8a:	bf00      	nop
   b4d8c:	2003e5e0 	.word	0x2003e5e0

000b4d90 <loop>:
{
   b4d90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.loop();
   b4d92:	481c      	ldr	r0, [pc, #112]	; (b4e04 <loop+0x74>)
   b4d94:	f001 ff63 	bl	b6c5e <_ZN16OledWingAdafruit4loopEv>
  if (client.isConnected())
   b4d98:	481b      	ldr	r0, [pc, #108]	; (b4e08 <loop+0x78>)
   b4d9a:	f001 fc5b 	bl	b6654 <_ZN4MQTT11isConnectedEv>
   b4d9e:	b1d8      	cbz	r0, b4dd8 <loop+0x48>
    client.loop();
   b4da0:	4819      	ldr	r0, [pc, #100]	; (b4e08 <loop+0x78>)
   b4da2:	f001 fd9f 	bl	b68e4 <_ZN4MQTT4loopEv>
  funcDisplay();
   b4da6:	f7ff ffe1 	bl	b4d6c <_Z11funcDisplayv>
  if (accel.getSample(sample))
   b4daa:	4818      	ldr	r0, [pc, #96]	; (b4e0c <loop+0x7c>)
   b4dac:	4669      	mov	r1, sp
   b4dae:	f001 faab 	bl	b6308 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   b4db2:	b170      	cbz	r0, b4dd2 <loop+0x42>
    display.println("A2 dist : A3 dist");
   b4db4:	4916      	ldr	r1, [pc, #88]	; (b4e10 <loop+0x80>)
   b4db6:	4813      	ldr	r0, [pc, #76]	; (b4e04 <loop+0x74>)
   b4db8:	f004 fc31 	bl	b961e <_ZN5Print7printlnEPKc>
    display.printf("%d,%d", argon2_distance, argon3_distance);
   b4dbc:	4b15      	ldr	r3, [pc, #84]	; (b4e14 <loop+0x84>)
   b4dbe:	4a16      	ldr	r2, [pc, #88]	; (b4e18 <loop+0x88>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	6812      	ldr	r2, [r2, #0]
   b4dc4:	4915      	ldr	r1, [pc, #84]	; (b4e1c <loop+0x8c>)
   b4dc6:	480f      	ldr	r0, [pc, #60]	; (b4e04 <loop+0x74>)
   b4dc8:	f7ff ff00 	bl	b4bcc <_ZN5Print6printfEPKcz>
    display.display();
   b4dcc:	480d      	ldr	r0, [pc, #52]	; (b4e04 <loop+0x74>)
   b4dce:	f001 f90b 	bl	b5fe8 <_ZN16Adafruit_SSD13067displayEv>
}
   b4dd2:	b005      	add	sp, #20
   b4dd4:	f85d fb04 	ldr.w	pc, [sp], #4
    inline static SleepResult sleep(const hal_pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   b4dd8:	4668      	mov	r0, sp
   b4dda:	f002 f9e1 	bl	b71a0 <spark_deviceID>
    client.connect(System.deviceID());
   b4dde:	9900      	ldr	r1, [sp, #0]
   b4de0:	4809      	ldr	r0, [pc, #36]	; (b4e08 <loop+0x78>)
   b4de2:	f001 fd27 	bl	b6834 <_ZN4MQTT7connectEPKc>
   b4de6:	4668      	mov	r0, sp
   b4de8:	f004 fd3e 	bl	b9868 <_ZN6StringD1Ev>
   b4dec:	4b0c      	ldr	r3, [pc, #48]	; (b4e20 <loop+0x90>)
    client.subscribe(argon2);
   b4dee:	4806      	ldr	r0, [pc, #24]	; (b4e08 <loop+0x78>)
   b4df0:	6819      	ldr	r1, [r3, #0]
   b4df2:	f001 febf 	bl	b6b74 <_ZN4MQTT9subscribeEPKc>
   b4df6:	4b0b      	ldr	r3, [pc, #44]	; (b4e24 <loop+0x94>)
    client.subscribe(argon3);
   b4df8:	4803      	ldr	r0, [pc, #12]	; (b4e08 <loop+0x78>)
   b4dfa:	6819      	ldr	r1, [r3, #0]
   b4dfc:	f001 feba 	bl	b6b74 <_ZN4MQTT9subscribeEPKc>
   b4e00:	e7d1      	b.n	b4da6 <loop+0x16>
   b4e02:	bf00      	nop
   b4e04:	2003e5e0 	.word	0x2003e5e0
   b4e08:	2003e580 	.word	0x2003e580
   b4e0c:	2003e538 	.word	0x2003e538
   b4e10:	000bc936 	.word	0x000bc936
   b4e14:	2003e344 	.word	0x2003e344
   b4e18:	2003e340 	.word	0x2003e340
   b4e1c:	000bc948 	.word	0x000bc948
   b4e20:	2003e560 	.word	0x2003e560
   b4e24:	2003e570 	.word	0x2003e570

000b4e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4e28:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b4e2a:	e9d0 5300 	ldrd	r5, r3, [r0]
   b4e2e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b4e30:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b4e32:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b4e36:	42ae      	cmp	r6, r5
   b4e38:	d004      	beq.n	b4e44 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   b4e3a:	4628      	mov	r0, r5
   b4e3c:	f004 fd14 	bl	b9868 <_ZN6StringD1Ev>
   b4e40:	3514      	adds	r5, #20
   b4e42:	e7f8      	b.n	b4e36 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b4e44:	6820      	ldr	r0, [r4, #0]
   b4e46:	f002 fa23 	bl	b7290 <free>
    AllocatorT::free(data_);
}
   b4e4a:	4620      	mov	r0, r4
   b4e4c:	bd70      	pop	{r4, r5, r6, pc}

000b4e4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b4e4e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b4e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e52:	4604      	mov	r4, r0
   b4e54:	460d      	mov	r5, r1
   b4e56:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b4e58:	d916      	bls.n	b4e88 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   b4e5a:	4290      	cmp	r0, r2
   b4e5c:	d215      	bcs.n	b4e8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   b4e5e:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b4e62:	1a75      	subs	r5, r6, r1
   b4e64:	f1a1 0714 	sub.w	r7, r1, #20
   b4e68:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b4e6a:	42b7      	cmp	r7, r6
   b4e6c:	d01c      	beq.n	b4ea8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   b4e6e:	b12c      	cbz	r4, b4e7c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   b4e70:	4631      	mov	r1, r6
   b4e72:	4620      	mov	r0, r4
   b4e74:	f004 fd74 	bl	b9960 <_ZN6StringC1EOS_>
   b4e78:	7c33      	ldrb	r3, [r6, #16]
   b4e7a:	7423      	strb	r3, [r4, #16]
   b4e7c:	4630      	mov	r0, r6
   b4e7e:	f004 fcf3 	bl	b9868 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b4e82:	3e14      	subs	r6, #20
   b4e84:	3c14      	subs	r4, #20
   b4e86:	e7f0      	b.n	b4e6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b4e88:	d00e      	beq.n	b4ea8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   b4e8a:	42b5      	cmp	r5, r6
   b4e8c:	d00c      	beq.n	b4ea8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   b4e8e:	b12c      	cbz	r4, b4e9c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   b4e90:	4629      	mov	r1, r5
   b4e92:	4620      	mov	r0, r4
   b4e94:	f004 fd64 	bl	b9960 <_ZN6StringC1EOS_>
   b4e98:	7c2b      	ldrb	r3, [r5, #16]
   b4e9a:	7423      	strb	r3, [r4, #16]
   b4e9c:	4628      	mov	r0, r5
   b4e9e:	f004 fce3 	bl	b9868 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b4ea2:	3514      	adds	r5, #20
   b4ea4:	3414      	adds	r4, #20
   b4ea6:	e7f0      	b.n	b4e8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   b4ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4eaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b4eae:	2300      	movs	r3, #0
   b4eb0:	e9c0 3300 	strd	r3, r3, [r0]
   b4eb4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4eb6:	684f      	ldr	r7, [r1, #4]
   b4eb8:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b4eba:	4604      	mov	r4, r0
   b4ebc:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b4ebe:	dd23      	ble.n	b4f08 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b4ec0:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   b4ec4:	fb08 f007 	mul.w	r0, r8, r7
   b4ec8:	f002 f9da 	bl	b7280 <malloc>
            if (!d) {
   b4ecc:	4605      	mov	r5, r0
   b4ece:	b1d8      	cbz	r0, b4f08 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   b4ed0:	e9d4 1200 	ldrd	r1, r2, [r4]
   b4ed4:	fb08 1202 	mla	r2, r8, r2, r1
   b4ed8:	f7ff ffb9 	bl	b4e4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b4edc:	6820      	ldr	r0, [r4, #0]
   b4ede:	f002 f9d7 	bl	b7290 <free>
        data_ = d;
   b4ee2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b4ee4:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b4ee6:	e9d6 7300 	ldrd	r7, r3, [r6]
   b4eea:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   b4eee:	45b8      	cmp	r8, r7
   b4ef0:	d008      	beq.n	b4f04 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   b4ef2:	4639      	mov	r1, r7
   b4ef4:	4628      	mov	r0, r5
   b4ef6:	f004 fd4d 	bl	b9994 <_ZN6StringC1ERKS_>
   b4efa:	7c3b      	ldrb	r3, [r7, #16]
   b4efc:	742b      	strb	r3, [r5, #16]
   b4efe:	3714      	adds	r7, #20
   b4f00:	3514      	adds	r5, #20
   b4f02:	e7f4      	b.n	b4eee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   b4f04:	6873      	ldr	r3, [r6, #4]
   b4f06:	6063      	str	r3, [r4, #4]
}
   b4f08:	4620      	mov	r0, r4
   b4f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b4f10 <_GLOBAL__sub_I_client>:
}
   b4f10:	b530      	push	{r4, r5, lr}
SYSTEM_THREAD(ENABLED);
   b4f12:	2100      	movs	r1, #0
}
   b4f14:	b091      	sub	sp, #68	; 0x44
SYSTEM_THREAD(ENABLED);
   b4f16:	2001      	movs	r0, #1
   b4f18:	f002 f926 	bl	b7168 <system_thread_set_state>
MQTT client("lab.thewcl.com", 1883, callback);
   b4f1c:	2300      	movs	r3, #0
   b4f1e:	f240 725b 	movw	r2, #1883	; 0x75b
   b4f22:	493b      	ldr	r1, [pc, #236]	; (b5010 <_GLOBAL__sub_I_client+0x100>)
   b4f24:	9300      	str	r3, [sp, #0]
   b4f26:	483b      	ldr	r0, [pc, #236]	; (b5014 <_GLOBAL__sub_I_client+0x104>)
   b4f28:	4b3b      	ldr	r3, [pc, #236]	; (b5018 <_GLOBAL__sub_I_client+0x108>)

#ifdef SYSTEM_VERSION_v151RC1
	// In 1.5.0-rc.1, SPI interfaces are handled differently. You can still pass in SPI, SPI1, etc.
	// but the code to handle it varies
	LIS3DHSPI(::particle::SpiProxy<HAL_SPI_INTERFACE1> &spiProxy, int ss = A2, int intPin = -1) : 
		LIS3DH(intPin), spi(spiProxy.instance()), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0){};
   b4f2a:	4c3c      	ldr	r4, [pc, #240]	; (b501c <_GLOBAL__sub_I_client+0x10c>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4f2c:	4d3c      	ldr	r5, [pc, #240]	; (b5020 <_GLOBAL__sub_I_client+0x110>)
   b4f2e:	f001 fab5 	bl	b649c <_ZN4MQTTC1EPKctPFvPcPhjEb>
String argon2 = "BAR/argon2/RSSI";
   b4f32:	493c      	ldr	r1, [pc, #240]	; (b5024 <_GLOBAL__sub_I_client+0x114>)
   b4f34:	483c      	ldr	r0, [pc, #240]	; (b5028 <_GLOBAL__sub_I_client+0x118>)
   b4f36:	f004 fce2 	bl	b98fe <_ZN6StringC1EPK19__FlashStringHelper>
String argon3 = "BAR/argon3/RSSI";
   b4f3a:	493c      	ldr	r1, [pc, #240]	; (b502c <_GLOBAL__sub_I_client+0x11c>)
   b4f3c:	483c      	ldr	r0, [pc, #240]	; (b5030 <_GLOBAL__sub_I_client+0x120>)
   b4f3e:	f004 fcde 	bl	b98fe <_ZN6StringC1EPK19__FlashStringHelper>
OledWingAdafruit display;
   b4f42:	2107      	movs	r1, #7
   b4f44:	483b      	ldr	r0, [pc, #236]	; (b5034 <_GLOBAL__sub_I_client+0x124>)
   b4f46:	f001 fe33 	bl	b6bb0 <_ZN16OledWingAdafruitC1Ei>
   b4f4a:	2108      	movs	r1, #8
   b4f4c:	4620      	mov	r0, r4
   b4f4e:	f001 f9ad 	bl	b62ac <_ZN6LIS3DHC1Ei>
   b4f52:	4b39      	ldr	r3, [pc, #228]	; (b5038 <_GLOBAL__sub_I_client+0x128>)
   b4f54:	6023      	str	r3, [r4, #0]
   b4f56:	7829      	ldrb	r1, [r5, #0]
   b4f58:	f3bf 8f5b 	dmb	ish
   b4f5c:	f011 0101 	ands.w	r1, r1, #1
   b4f60:	d10b      	bne.n	b4f7a <_GLOBAL__sub_I_client+0x6a>
   b4f62:	4628      	mov	r0, r5
   b4f64:	9103      	str	r1, [sp, #12]
   b4f66:	f7ff fdb9 	bl	b4adc <__cxa_guard_acquire>
   b4f6a:	9903      	ldr	r1, [sp, #12]
   b4f6c:	b128      	cbz	r0, b4f7a <_GLOBAL__sub_I_client+0x6a>
   b4f6e:	4833      	ldr	r0, [pc, #204]	; (b503c <_GLOBAL__sub_I_client+0x12c>)
   b4f70:	f004 fbba 	bl	b96e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4f74:	4628      	mov	r0, r5
   b4f76:	f7ff fdb6 	bl	b4ae6 <__cxa_guard_release>
   b4f7a:	4b30      	ldr	r3, [pc, #192]	; (b503c <_GLOBAL__sub_I_client+0x12c>)
      dataMode_{dataMode}
   b4f7c:	4a30      	ldr	r2, [pc, #192]	; (b5040 <_GLOBAL__sub_I_client+0x130>)
   b4f7e:	60e3      	str	r3, [r4, #12]
   b4f80:	61a2      	str	r2, [r4, #24]
   b4f82:	2303      	movs	r3, #3
   b4f84:	4a2f      	ldr	r2, [pc, #188]	; (b5044 <_GLOBAL__sub_I_client+0x134>)
   b4f86:	6123      	str	r3, [r4, #16]
   b4f88:	6222      	str	r2, [r4, #32]
   b4f8a:	2300      	movs	r3, #0
   b4f8c:	2201      	movs	r2, #1
   b4f8e:	84a2      	strh	r2, [r4, #36]	; 0x24
   b4f90:	7523      	strb	r3, [r4, #20]
   b4f92:	7723      	strb	r3, [r4, #28]
        capacity_(0) {
   b4f94:	e9cd 3304 	strd	r3, r3, [sp, #16]
   b4f98:	9306      	str	r3, [sp, #24]
            StreamLogHandler(Serial, level, filters) {
   b4f9a:	f005 f909 	bl	ba1b0 <_Z16_fetch_usbserialv>
   b4f9e:	a904      	add	r1, sp, #16
   b4fa0:	4605      	mov	r5, r0
   b4fa2:	a807      	add	r0, sp, #28
        filter_(level, filters) {
   b4fa4:	4c28      	ldr	r4, [pc, #160]	; (b5048 <_GLOBAL__sub_I_client+0x138>)
   b4fa6:	f7ff ff80 	bl	b4eaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   b4faa:	a907      	add	r1, sp, #28
   b4fac:	a80a      	add	r0, sp, #40	; 0x28
   b4fae:	f7ff ff7c 	bl	b4eaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b4fb2:	4b26      	ldr	r3, [pc, #152]	; (b504c <_GLOBAL__sub_I_client+0x13c>)
   b4fb4:	6023      	str	r3, [r4, #0]
   b4fb6:	a90a      	add	r1, sp, #40	; 0x28
   b4fb8:	a80d      	add	r0, sp, #52	; 0x34
   b4fba:	f7ff ff76 	bl	b4eaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b4fbe:	aa0d      	add	r2, sp, #52	; 0x34
   b4fc0:	211e      	movs	r1, #30
   b4fc2:	1d20      	adds	r0, r4, #4
   b4fc4:	f003 ff28 	bl	b8e18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b4fc8:	a80d      	add	r0, sp, #52	; 0x34
   b4fca:	f7ff ff2d 	bl	b4e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b4fce:	a80a      	add	r0, sp, #40	; 0x28
   b4fd0:	f7ff ff2a 	bl	b4e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4fd4:	4b1e      	ldr	r3, [pc, #120]	; (b5050 <_GLOBAL__sub_I_client+0x140>)
   b4fd6:	6023      	str	r3, [r4, #0]
   b4fd8:	6225      	str	r5, [r4, #32]
   b4fda:	a807      	add	r0, sp, #28
   b4fdc:	f7ff ff24 	bl	b4e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b4fe0:	4b1c      	ldr	r3, [pc, #112]	; (b5054 <_GLOBAL__sub_I_client+0x144>)
   b4fe2:	6023      	str	r3, [r4, #0]
        Serial.begin();
   b4fe4:	f005 f8e4 	bl	ba1b0 <_Z16_fetch_usbserialv>
   b4fe8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b4fec:	f005 f8d0 	bl	ba190 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   b4ff0:	f003 fbf4 	bl	b87dc <_ZN5spark10LogManager8instanceEv>
   b4ff4:	4621      	mov	r1, r4
   b4ff6:	f003 fde5 	bl	b8bc4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler;
   b4ffa:	a804      	add	r0, sp, #16
   b4ffc:	f7ff ff14 	bl	b4e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
BleUuid serviceUuid("afe7acc5-33a9-478f-bbe1-8944aa08e884");
   b5000:	4915      	ldr	r1, [pc, #84]	; (b5058 <_GLOBAL__sub_I_client+0x148>)
   b5002:	4816      	ldr	r0, [pc, #88]	; (b505c <_GLOBAL__sub_I_client+0x14c>)
}
   b5004:	b011      	add	sp, #68	; 0x44
   b5006:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
BleUuid serviceUuid("afe7acc5-33a9-478f-bbe1-8944aa08e884");
   b500a:	f002 bad9 	b.w	b75c0 <_ZN8particle7BleUuidC1EPKc>
   b500e:	bf00      	nop
   b5010:	000bc94e 	.word	0x000bc94e
   b5014:	2003e580 	.word	0x2003e580
   b5018:	000b4af1 	.word	0x000b4af1
   b501c:	2003e538 	.word	0x2003e538
   b5020:	2003e52c 	.word	0x2003e52c
   b5024:	000bc95d 	.word	0x000bc95d
   b5028:	2003e560 	.word	0x2003e560
   b502c:	000bc96d 	.word	0x000bc96d
   b5030:	2003e570 	.word	0x2003e570
   b5034:	2003e5e0 	.word	0x2003e5e0
   b5038:	000bd4a0 	.word	0x000bd4a0
   b503c:	2003e530 	.word	0x2003e530
   b5040:	000bc9ac 	.word	0x000bc9ac
   b5044:	00989680 	.word	0x00989680
   b5048:	2003e650 	.word	0x2003e650
   b504c:	000bc9c0 	.word	0x000bc9c0
   b5050:	000bd708 	.word	0x000bd708
   b5054:	000bc9d8 	.word	0x000bc9d8
   b5058:	000bc97d 	.word	0x000bc97d
   b505c:	2003e674 	.word	0x2003e674

000b5060 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5064:	b085      	sub	sp, #20
   b5066:	461f      	mov	r7, r3
   b5068:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b506c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5070:	eba8 0902 	sub.w	r9, r8, r2
   b5074:	eba7 0a01 	sub.w	sl, r7, r1
   b5078:	f1b9 0f00 	cmp.w	r9, #0
   b507c:	bfb8      	it	lt
   b507e:	f1c9 0900 	rsblt	r9, r9, #0
   b5082:	f1ba 0f00 	cmp.w	sl, #0
   b5086:	bfb8      	it	lt
   b5088:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b508c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b508e:	4683      	mov	fp, r0
   b5090:	460c      	mov	r4, r1
   b5092:	4615      	mov	r5, r2
    if (steep) {
   b5094:	dd04      	ble.n	b50a0 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5096:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5098:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b509a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b509c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b509e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b50a0:	42bc      	cmp	r4, r7
   b50a2:	dd05      	ble.n	b50b0 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b50a4:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b50a6:	4645      	mov	r5, r8
   b50a8:	4690      	mov	r8, r2
    if (x0 > x1) {
   b50aa:	4622      	mov	r2, r4
   b50ac:	463c      	mov	r4, r7
   b50ae:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b50b0:	1b3e      	subs	r6, r7, r4
   b50b2:	b2b2      	uxth	r2, r6
   b50b4:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b50b6:	eba8 0205 	sub.w	r2, r8, r5
   b50ba:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b50be:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b50c2:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b50c6:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b50ca:	4545      	cmp	r5, r8
   b50cc:	bfb4      	ite	lt
   b50ce:	2201      	movlt	r2, #1
   b50d0:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b50d4:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b50d6:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b50d8:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b50da:	42bc      	cmp	r4, r7
   b50dc:	dc1c      	bgt.n	b5118 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b50de:	f8db 2000 	ldr.w	r2, [fp]
   b50e2:	9303      	str	r3, [sp, #12]
        if (steep) {
   b50e4:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b50e6:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b50ea:	bfc7      	ittee	gt
   b50ec:	4629      	movgt	r1, r5
   b50ee:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b50f0:	462a      	movle	r2, r5
   b50f2:	4621      	movle	r1, r4
   b50f4:	4658      	mov	r0, fp
   b50f6:	47c0      	blx	r8
        }
        err -= dy;
   b50f8:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b50fa:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b50fc:	1ab6      	subs	r6, r6, r2
   b50fe:	b2b1      	uxth	r1, r6
   b5100:	b236      	sxth	r6, r6
        if (err < 0) {
   b5102:	2e00      	cmp	r6, #0
   b5104:	da05      	bge.n	b5112 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5106:	9a02      	ldr	r2, [sp, #8]
   b5108:	4415      	add	r5, r2
            err += dx;
   b510a:	9a00      	ldr	r2, [sp, #0]
   b510c:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b510e:	b22d      	sxth	r5, r5
            err += dx;
   b5110:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5112:	3401      	adds	r4, #1
   b5114:	b224      	sxth	r4, r4
   b5116:	e7e0      	b.n	b50da <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5118:	b005      	add	sp, #20
   b511a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b511e <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b511e:	4770      	bx	lr

000b5120 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5120:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5122:	6804      	ldr	r4, [r0, #0]
   b5124:	6924      	ldr	r4, [r4, #16]
   b5126:	46a4      	mov	ip, r4
}
   b5128:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b512c:	4760      	bx	ip

000b512e <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b512e:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5130:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5132:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5136:	9502      	str	r5, [sp, #8]
   b5138:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b513a:	46a4      	mov	ip, r4
}
   b513c:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b513e:	4760      	bx	ip

000b5140 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5140:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5142:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5144:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5148:	9502      	str	r5, [sp, #8]
   b514a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b514c:	46a4      	mov	ip, r4
}
   b514e:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5150:	4760      	bx	ip

000b5152 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5152:	b470      	push	{r4, r5, r6}
   b5154:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5158:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b515c:	6804      	ldr	r4, [r0, #0]
   b515e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5162:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5164:	46a4      	mov	ip, r4
}
   b5166:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5168:	4760      	bx	ip

000b516a <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b516a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b516e:	461c      	mov	r4, r3
    startWrite();
   b5170:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5172:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5176:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5178:	4605      	mov	r5, r0
   b517a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b517c:	3c01      	subs	r4, #1
   b517e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5180:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5182:	b224      	sxth	r4, r4
    startWrite();
   b5184:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5186:	682b      	ldr	r3, [r5, #0]
   b5188:	f8cd 8004 	str.w	r8, [sp, #4]
   b518c:	9400      	str	r4, [sp, #0]
   b518e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5190:	4628      	mov	r0, r5
   b5192:	463b      	mov	r3, r7
   b5194:	4632      	mov	r2, r6
   b5196:	4639      	mov	r1, r7
   b5198:	47a0      	blx	r4
    endWrite();
   b519a:	682b      	ldr	r3, [r5, #0]
   b519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b519e:	4628      	mov	r0, r5
}
   b51a0:	b002      	add	sp, #8
   b51a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b51a6:	4718      	bx	r3

000b51a8 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b51a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b51ac:	461d      	mov	r5, r3
    startWrite();
   b51ae:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b51b0:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b51b4:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b51b6:	4604      	mov	r4, r0
   b51b8:	4617      	mov	r7, r2
   b51ba:	460e      	mov	r6, r1
    startWrite();
   b51bc:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b51be:	e9cd 7800 	strd	r7, r8, [sp]
   b51c2:	6822      	ldr	r2, [r4, #0]
   b51c4:	1e6b      	subs	r3, r5, #1
   b51c6:	4433      	add	r3, r6
   b51c8:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b51ca:	4620      	mov	r0, r4
   b51cc:	b21b      	sxth	r3, r3
   b51ce:	463a      	mov	r2, r7
   b51d0:	4631      	mov	r1, r6
   b51d2:	47a8      	blx	r5
    endWrite();
   b51d4:	6823      	ldr	r3, [r4, #0]
   b51d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b51d8:	4620      	mov	r0, r4
}
   b51da:	b002      	add	sp, #8
   b51dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b51e0:	4718      	bx	r3

000b51e2 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b51e2:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b51e6:	461e      	mov	r6, r3
    startWrite();
   b51e8:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b51ea:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b51ee:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b51f0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b51f4:	460c      	mov	r4, r1
   b51f6:	4605      	mov	r5, r0
   b51f8:	4617      	mov	r7, r2
    startWrite();
   b51fa:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b51fc:	4426      	add	r6, r4
   b51fe:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5200:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5202:	da0b      	bge.n	b521c <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5204:	f8cd 8000 	str.w	r8, [sp]
   b5208:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b520c:	4621      	mov	r1, r4
   b520e:	464b      	mov	r3, r9
   b5210:	463a      	mov	r2, r7
   b5212:	4628      	mov	r0, r5
   b5214:	3401      	adds	r4, #1
   b5216:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5218:	b224      	sxth	r4, r4
   b521a:	e7f0      	b.n	b51fe <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b521e:	4628      	mov	r0, r5
}
   b5220:	b002      	add	sp, #8
   b5222:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5226:	4718      	bx	r3

000b5228 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5228:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b522a:	6802      	ldr	r2, [r0, #0]
   b522c:	9101      	str	r1, [sp, #4]
   b522e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5232:	9100      	str	r1, [sp, #0]
   b5234:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5236:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b523a:	2200      	movs	r2, #0
   b523c:	4611      	mov	r1, r2
   b523e:	47a0      	blx	r4
}
   b5240:	b002      	add	sp, #8
   b5242:	bd10      	pop	{r4, pc}

000b5244 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5248:	4299      	cmp	r1, r3
        uint16_t color) {
   b524a:	4616      	mov	r6, r2
   b524c:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5250:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5254:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5256:	4680      	mov	r8, r0
   b5258:	460d      	mov	r5, r1
   b525a:	461c      	mov	r4, r3
    if(x0 == x1){
   b525c:	d113      	bne.n	b5286 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b525e:	42be      	cmp	r6, r7
   b5260:	bfc8      	it	gt
   b5262:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5264:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5268:	bfc4      	itt	gt
   b526a:	463e      	movgt	r6, r7
   b526c:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b526e:	1c7b      	adds	r3, r7, #1
   b5270:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5272:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5274:	b21b      	sxth	r3, r3
   b5276:	4632      	mov	r2, r6
   b5278:	4629      	mov	r1, r5
   b527a:	4640      	mov	r0, r8
   b527c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b527e:	b003      	add	sp, #12
   b5280:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5284:	4760      	bx	ip
    } else if(y0 == y1){
   b5286:	42be      	cmp	r6, r7
   b5288:	d10a      	bne.n	b52a0 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b528a:	4299      	cmp	r1, r3
   b528c:	bfc2      	ittt	gt
   b528e:	460b      	movgt	r3, r1
   b5290:	4625      	movgt	r5, r4
   b5292:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5294:	1c63      	adds	r3, r4, #1
   b5296:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b529a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b529c:	1b5b      	subs	r3, r3, r5
   b529e:	e7e9      	b.n	b5274 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b52a0:	6953      	ldr	r3, [r2, #20]
   b52a2:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b52a4:	e9cd 7900 	strd	r7, r9, [sp]
   b52a8:	f8d8 3000 	ldr.w	r3, [r8]
   b52ac:	4640      	mov	r0, r8
   b52ae:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b52b0:	4632      	mov	r2, r6
   b52b2:	4623      	mov	r3, r4
   b52b4:	4629      	mov	r1, r5
   b52b6:	47b8      	blx	r7
        endWrite();
   b52b8:	f8d8 3000 	ldr.w	r3, [r8]
   b52bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b52be:	4640      	mov	r0, r8
}
   b52c0:	b003      	add	sp, #12
   b52c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b52c6:	4718      	bx	r3

000b52c8 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b52c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b52cc:	461d      	mov	r5, r3
    startWrite();
   b52ce:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b52d0:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b52d4:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b52d6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b52da:	4604      	mov	r4, r0
   b52dc:	460f      	mov	r7, r1
   b52de:	4616      	mov	r6, r2
    startWrite();
   b52e0:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b52e2:	6823      	ldr	r3, [r4, #0]
   b52e4:	f8cd 8000 	str.w	r8, [sp]
   b52e8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b52ec:	4632      	mov	r2, r6
   b52ee:	462b      	mov	r3, r5
   b52f0:	4639      	mov	r1, r7
   b52f2:	4620      	mov	r0, r4
   b52f4:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b52f6:	6823      	ldr	r3, [r4, #0]
   b52f8:	f8cd 8000 	str.w	r8, [sp]
   b52fc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5300:	4432      	add	r2, r6
   b5302:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5306:	4639      	mov	r1, r7
   b5308:	462b      	mov	r3, r5
   b530a:	4620      	mov	r0, r4
   b530c:	b212      	sxth	r2, r2
   b530e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5310:	6823      	ldr	r3, [r4, #0]
   b5312:	f8cd 8000 	str.w	r8, [sp]
   b5316:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b531a:	4632      	mov	r2, r6
   b531c:	464b      	mov	r3, r9
   b531e:	4639      	mov	r1, r7
   b5320:	4620      	mov	r0, r4
   b5322:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5324:	1e6b      	subs	r3, r5, #1
   b5326:	19d9      	adds	r1, r3, r7
   b5328:	6823      	ldr	r3, [r4, #0]
   b532a:	f8cd 8000 	str.w	r8, [sp]
   b532e:	6a1d      	ldr	r5, [r3, #32]
   b5330:	4620      	mov	r0, r4
   b5332:	464b      	mov	r3, r9
   b5334:	4632      	mov	r2, r6
   b5336:	b209      	sxth	r1, r1
   b5338:	47a8      	blx	r5
    endWrite();
   b533a:	6823      	ldr	r3, [r4, #0]
   b533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b533e:	4620      	mov	r0, r4
}
   b5340:	b002      	add	sp, #8
   b5342:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5346:	4718      	bx	r3

000b5348 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5348:	4770      	bx	lr

000b534a <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b534a:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b534e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5352:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5354:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5356:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b535a:	bf59      	ittee	pl
   b535c:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b535e:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5360:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5362:	81c3      	strhmi	r3, [r0, #14]
}
   b5364:	4770      	bx	lr
	...

000b5368 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5368:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b536a:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b536c:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b536e:	4a07      	ldr	r2, [pc, #28]	; (b538c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5370:	4d07      	ldr	r5, [pc, #28]	; (b5390 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5372:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b5374:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5376:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5378:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b537c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5380:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5382:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5384:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5386:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5388:	6204      	str	r4, [r0, #32]
}
   b538a:	bd30      	pop	{r4, r5, pc}
   b538c:	01000101 	.word	0x01000101
   b5390:	000bcef0 	.word	0x000bcef0

000b5394 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5398:	b089      	sub	sp, #36	; 0x24
   b539a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b539e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b53a0:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b53a4:	9304      	str	r3, [sp, #16]
   b53a6:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b53aa:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b53ac:	9305      	str	r3, [sp, #20]
   b53ae:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b53b2:	4604      	mov	r4, r0
    startWrite();
   b53b4:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b53b6:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b53ba:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b53be:	bf48      	it	mi
   b53c0:	f108 020e 	addmi.w	r2, r8, #14
   b53c4:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b53c8:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b53ca:	4635      	mov	r5, r6
   b53cc:	9b03      	ldr	r3, [sp, #12]
   b53ce:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b53d0:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b53d4:	189a      	adds	r2, r3, r2
   b53d6:	9b05      	ldr	r3, [sp, #20]
   b53d8:	428b      	cmp	r3, r1
   b53da:	b212      	sxth	r2, r2
   b53dc:	dd27      	ble.n	b542e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b53de:	9b04      	ldr	r3, [sp, #16]
   b53e0:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b53e2:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b53e6:	9306      	str	r3, [sp, #24]
   b53e8:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b53ec:	4580      	cmp	r8, r0
   b53ee:	fa1f f189 	uxth.w	r1, r9
   b53f2:	dd17      	ble.n	b5424 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b53f4:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b53f6:	bf05      	ittet	eq
   b53f8:	9b06      	ldreq	r3, [sp, #24]
   b53fa:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b53fc:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b53fe:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5400:	bf18      	it	ne
   b5402:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5404:	062b      	lsls	r3, r5, #24
   b5406:	d50a      	bpl.n	b541e <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5408:	9b02      	ldr	r3, [sp, #8]
   b540a:	6820      	ldr	r0, [r4, #0]
   b540c:	9207      	str	r2, [sp, #28]
   b540e:	4419      	add	r1, r3
   b5410:	6983      	ldr	r3, [r0, #24]
   b5412:	b209      	sxth	r1, r1
   b5414:	461f      	mov	r7, r3
   b5416:	4620      	mov	r0, r4
   b5418:	4653      	mov	r3, sl
   b541a:	47b8      	blx	r7
   b541c:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b541e:	f109 0901 	add.w	r9, r9, #1
   b5422:	e7e1      	b.n	b53e8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5424:	9b01      	ldr	r3, [sp, #4]
   b5426:	3301      	adds	r3, #1
   b5428:	9301      	str	r3, [sp, #4]
   b542a:	445e      	add	r6, fp
   b542c:	e7ce      	b.n	b53cc <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b542e:	6823      	ldr	r3, [r4, #0]
   b5430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5432:	4620      	mov	r0, r4
}
   b5434:	b009      	add	sp, #36	; 0x24
   b5436:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b543a:	4718      	bx	r3

000b543c <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5440:	ed2d 8b02 	vpush	{d8}
   b5444:	b091      	sub	sp, #68	; 0x44
   b5446:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5448:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b544a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b544e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5452:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5456:	9103      	str	r1, [sp, #12]
   b5458:	461f      	mov	r7, r3
   b545a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b545e:	9304      	str	r3, [sp, #16]
   b5460:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5462:	2a00      	cmp	r2, #0
   b5464:	f040 80c5 	bne.w	b55f2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5468:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b546c:	428b      	cmp	r3, r1
   b546e:	f340 814c 	ble.w	b570a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5472:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5476:	42b3      	cmp	r3, r6
   b5478:	f340 8147 	ble.w	b570a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b547c:	2306      	movs	r3, #6
   b547e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5482:	2b00      	cmp	r3, #0
   b5484:	f340 8141 	ble.w	b570a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5488:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b548c:	2b00      	cmp	r3, #0
   b548e:	f340 813c 	ble.w	b570a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5492:	7f03      	ldrb	r3, [r0, #28]
   b5494:	b91b      	cbnz	r3, b549e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5496:	2faf      	cmp	r7, #175	; 0xaf
   b5498:	bf84      	itt	hi
   b549a:	3701      	addhi	r7, #1
   b549c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b549e:	f8db 3000 	ldr.w	r3, [fp]
   b54a2:	4658      	mov	r0, fp
   b54a4:	695b      	ldr	r3, [r3, #20]
   b54a6:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b54a8:	2205      	movs	r2, #5
   b54aa:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b54ac:	2200      	movs	r2, #0
   b54ae:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b54b0:	4a98      	ldr	r2, [pc, #608]	; (b5714 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b54b2:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b54b6:	18d3      	adds	r3, r2, r3
   b54b8:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b54ba:	b2b3      	uxth	r3, r6
   b54bc:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b54be:	9a05      	ldr	r2, [sp, #20]
   b54c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b54c2:	5c9b      	ldrb	r3, [r3, r2]
   b54c4:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b54c6:	b2ab      	uxth	r3, r5
   b54c8:	930b      	str	r3, [sp, #44]	; 0x2c
   b54ca:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b54ce:	9308      	str	r3, [sp, #32]
   b54d0:	9b03      	ldr	r3, [sp, #12]
   b54d2:	fb02 f905 	mul.w	r9, r2, r5
   b54d6:	fa19 f983 	uxtah	r9, r9, r3
   b54da:	fa0f f389 	sxth.w	r3, r9
   b54de:	ee08 3a10 	vmov	s16, r3
   b54e2:	2308      	movs	r3, #8
   b54e4:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b54e6:	9b03      	ldr	r3, [sp, #12]
   b54e8:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b54ec:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b54f0:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b54f4:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b54f6:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b54fa:	07d2      	lsls	r2, r2, #31
   b54fc:	d552      	bpl.n	b55a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b54fe:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5500:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5504:	d13e      	bne.n	b5584 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5506:	2c01      	cmp	r4, #1
   b5508:	d13c      	bne.n	b5584 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b550a:	699b      	ldr	r3, [r3, #24]
   b550c:	9906      	ldr	r1, [sp, #24]
   b550e:	461f      	mov	r7, r3
   b5510:	9b04      	ldr	r3, [sp, #16]
   b5512:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5514:	b212      	sxth	r2, r2
   b5516:	4651      	mov	r1, sl
   b5518:	4658      	mov	r0, fp
   b551a:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b551c:	f109 0301 	add.w	r3, r9, #1
   b5520:	fa4f f983 	sxtb.w	r9, r3
   b5524:	9b07      	ldr	r3, [sp, #28]
   b5526:	085b      	lsrs	r3, r3, #1
   b5528:	9307      	str	r3, [sp, #28]
   b552a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b552c:	3b01      	subs	r3, #1
   b552e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5532:	930a      	str	r3, [sp, #40]	; 0x28
   b5534:	d1de      	bne.n	b54f4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5536:	9f05      	ldr	r7, [sp, #20]
   b5538:	3701      	adds	r7, #1
   b553a:	b27b      	sxtb	r3, r7
   b553c:	9305      	str	r3, [sp, #20]
   b553e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5540:	3b01      	subs	r3, #1
   b5542:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5546:	9309      	str	r3, [sp, #36]	; 0x24
   b5548:	d1b9      	bne.n	b54be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b554a:	9b04      	ldr	r3, [sp, #16]
   b554c:	4543      	cmp	r3, r8
   b554e:	d00f      	beq.n	b5570 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5550:	2d01      	cmp	r5, #1
   b5552:	f8db 3000 	ldr.w	r3, [fp]
   b5556:	d13b      	bne.n	b55d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5558:	2c01      	cmp	r4, #1
   b555a:	d139      	bne.n	b55d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b555c:	9908      	ldr	r1, [sp, #32]
   b555e:	f8cd 8000 	str.w	r8, [sp]
   b5562:	3105      	adds	r1, #5
   b5564:	6a1c      	ldr	r4, [r3, #32]
   b5566:	4632      	mov	r2, r6
   b5568:	2308      	movs	r3, #8
   b556a:	b209      	sxth	r1, r1
   b556c:	4658      	mov	r0, fp
   b556e:	47a0      	blx	r4
        endWrite();
   b5570:	f8db 3000 	ldr.w	r3, [fp]
   b5574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5576:	4658      	mov	r0, fp
}
   b5578:	b011      	add	sp, #68	; 0x44
   b557a:	ecbd 8b02 	vpop	{d8}
   b557e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5582:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5584:	9906      	ldr	r1, [sp, #24]
   b5586:	fb14 f202 	smulbb	r2, r4, r2
   b558a:	440a      	add	r2, r1
   b558c:	9904      	ldr	r1, [sp, #16]
   b558e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5590:	9400      	str	r4, [sp, #0]
   b5592:	69db      	ldr	r3, [r3, #28]
   b5594:	ee18 1a10 	vmov	r1, s16
   b5598:	461f      	mov	r7, r3
   b559a:	b212      	sxth	r2, r2
   b559c:	462b      	mov	r3, r5
   b559e:	4658      	mov	r0, fp
   b55a0:	47b8      	blx	r7
   b55a2:	e7bb      	b.n	b551c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b55a4:	9a04      	ldr	r2, [sp, #16]
   b55a6:	4542      	cmp	r2, r8
   b55a8:	d0b8      	beq.n	b551c <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b55aa:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b55ac:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b55b0:	d107      	bne.n	b55c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b55b2:	2c01      	cmp	r4, #1
   b55b4:	d105      	bne.n	b55c2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b55b6:	699b      	ldr	r3, [r3, #24]
   b55b8:	9906      	ldr	r1, [sp, #24]
   b55ba:	461f      	mov	r7, r3
   b55bc:	440a      	add	r2, r1
   b55be:	4643      	mov	r3, r8
   b55c0:	e7a8      	b.n	b5514 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b55c2:	9906      	ldr	r1, [sp, #24]
   b55c4:	f8cd 8004 	str.w	r8, [sp, #4]
   b55c8:	fb14 f202 	smulbb	r2, r4, r2
   b55cc:	440a      	add	r2, r1
   b55ce:	e7df      	b.n	b5590 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b55d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b55d2:	f8cd 8004 	str.w	r8, [sp, #4]
   b55d6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b55da:	9a08      	ldr	r2, [sp, #32]
   b55dc:	00e4      	lsls	r4, r4, #3
   b55de:	440a      	add	r2, r1
   b55e0:	4611      	mov	r1, r2
   b55e2:	9400      	str	r4, [sp, #0]
   b55e4:	69dc      	ldr	r4, [r3, #28]
   b55e6:	4632      	mov	r2, r6
   b55e8:	462b      	mov	r3, r5
   b55ea:	b209      	sxth	r1, r1
   b55ec:	4658      	mov	r0, fp
   b55ee:	47a0      	blx	r4
        endWrite();
   b55f0:	e7be      	b.n	b5570 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b55f2:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b55f4:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b55f6:	6812      	ldr	r2, [r2, #0]
   b55f8:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b55fa:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b55fc:	b2ff      	uxtb	r7, r7
   b55fe:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b5602:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b5606:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b5608:	789a      	ldrb	r2, [r3, #2]
   b560a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b560c:	78da      	ldrb	r2, [r3, #3]
   b560e:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b5610:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b5612:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b5616:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b561a:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b561c:	d801      	bhi.n	b5622 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b561e:	2c01      	cmp	r4, #1
   b5620:	d957      	bls.n	b56d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b5622:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b5626:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b5628:	fa0f f38a 	sxth.w	r3, sl
   b562c:	9307      	str	r3, [sp, #28]
        startWrite();
   b562e:	f8db 3000 	ldr.w	r3, [fp]
   b5632:	4658      	mov	r0, fp
   b5634:	695b      	ldr	r3, [r3, #20]
   b5636:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5638:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b563a:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b563e:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5640:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b5644:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b5646:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5648:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b564a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b564c:	429f      	cmp	r7, r3
   b564e:	d28f      	bcs.n	b5570 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5650:	9b07      	ldr	r3, [sp, #28]
   b5652:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b5654:	443b      	add	r3, r7
   b5656:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b565a:	2200      	movs	r2, #0
   b565c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b565e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5660:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b5662:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b5666:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b566a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b566e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b5670:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b5672:	9905      	ldr	r1, [sp, #20]
   b5674:	4291      	cmp	r1, r2
   b5676:	d241      	bcs.n	b56fc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b5678:	1c5a      	adds	r2, r3, #1
   b567a:	b2d2      	uxtb	r2, r2
   b567c:	075b      	lsls	r3, r3, #29
   b567e:	920d      	str	r2, [sp, #52]	; 0x34
   b5680:	d107      	bne.n	b5692 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b5682:	9b06      	ldr	r3, [sp, #24]
   b5684:	9906      	ldr	r1, [sp, #24]
   b5686:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5688:	3301      	adds	r3, #1
   b568a:	b29b      	uxth	r3, r3
   b568c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b5690:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b5692:	f019 0f80 	tst.w	r9, #128	; 0x80
   b5696:	d012      	beq.n	b56be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b5698:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b569a:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b569e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b56a2:	d11a      	bne.n	b56da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b56a4:	2c01      	cmp	r4, #1
   b56a6:	d118      	bne.n	b56da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b56a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b56aa:	699b      	ldr	r3, [r3, #24]
   b56ac:	4411      	add	r1, r2
   b56ae:	9a05      	ldr	r2, [sp, #20]
   b56b0:	4411      	add	r1, r2
   b56b2:	461e      	mov	r6, r3
   b56b4:	4652      	mov	r2, sl
   b56b6:	9b04      	ldr	r3, [sp, #16]
   b56b8:	b209      	sxth	r1, r1
   b56ba:	4658      	mov	r0, fp
   b56bc:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b56be:	9e05      	ldr	r6, [sp, #20]
   b56c0:	3601      	adds	r6, #1
   b56c2:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b56c4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b56c8:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b56ca:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b56ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b56d0:	e7ce      	b.n	b5670 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b56d2:	2300      	movs	r3, #0
   b56d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b56d8:	e7a9      	b.n	b562e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b56da:	9805      	ldr	r0, [sp, #20]
   b56dc:	9a08      	ldr	r2, [sp, #32]
   b56de:	4402      	add	r2, r0
   b56e0:	fb02 1105 	mla	r1, r2, r5, r1
   b56e4:	9a04      	ldr	r2, [sp, #16]
   b56e6:	e9cd 4200 	strd	r4, r2, [sp]
   b56ea:	69db      	ldr	r3, [r3, #28]
   b56ec:	ee18 2a10 	vmov	r2, s16
   b56f0:	461e      	mov	r6, r3
   b56f2:	b209      	sxth	r1, r1
   b56f4:	462b      	mov	r3, r5
   b56f6:	4658      	mov	r0, fp
   b56f8:	47b0      	blx	r6
   b56fa:	e7e0      	b.n	b56be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b56fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b56fe:	3701      	adds	r7, #1
   b5700:	4498      	add	r8, r3
   b5702:	fa5f f888 	uxtb.w	r8, r8
   b5706:	b2ff      	uxtb	r7, r7
   b5708:	e79f      	b.n	b564a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b570a:	b011      	add	sp, #68	; 0x44
   b570c:	ecbd 8b02 	vpop	{d8}
   b5710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5714:	000bc9e8 	.word	0x000bc9e8

000b5718 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b5718:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b571a:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b571c:	b085      	sub	sp, #20
   b571e:	4604      	mov	r4, r0
   b5720:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b5722:	2a00      	cmp	r2, #0
   b5724:	d134      	bne.n	b5790 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b5726:	290a      	cmp	r1, #10
   b5728:	d108      	bne.n	b573c <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b572a:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b572c:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b572e:	7e42      	ldrb	r2, [r0, #25]
   b5730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b5734:	8263      	strh	r3, [r4, #18]
}
   b5736:	2001      	movs	r0, #1
   b5738:	b005      	add	sp, #20
   b573a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b573c:	290d      	cmp	r1, #13
   b573e:	d0fa      	beq.n	b5736 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5740:	7ee1      	ldrb	r1, [r4, #27]
   b5742:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b5744:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b5746:	b171      	cbz	r1, b5766 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b5748:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b574c:	2106      	movs	r1, #6
   b574e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b5752:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b5756:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b5758:	bfc1      	itttt	gt
   b575a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b575e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b5760:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b5764:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b5766:	8ae2      	ldrh	r2, [r4, #22]
   b5768:	9201      	str	r2, [sp, #4]
   b576a:	8aa2      	ldrh	r2, [r4, #20]
   b576c:	9200      	str	r2, [sp, #0]
   b576e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b5772:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5776:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b577a:	4620      	mov	r0, r4
   b577c:	f7ff fe5e 	bl	b543c <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b5780:	7e23      	ldrb	r3, [r4, #24]
   b5782:	8a22      	ldrh	r2, [r4, #16]
   b5784:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b5788:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b578c:	8223      	strh	r3, [r4, #16]
   b578e:	e7d2      	b.n	b5736 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b5790:	290a      	cmp	r1, #10
   b5792:	d107      	bne.n	b57a4 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b5794:	2300      	movs	r3, #0
   b5796:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b5798:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b579a:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b579c:	8a43      	ldrh	r3, [r0, #18]
   b579e:	fb01 3302 	mla	r3, r1, r2, r3
   b57a2:	e7c7      	b.n	b5734 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b57a4:	290d      	cmp	r1, #13
   b57a6:	d0c6      	beq.n	b5736 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b57a8:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b57aa:	42a9      	cmp	r1, r5
   b57ac:	d3c3      	bcc.n	b5736 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b57ae:	7a51      	ldrb	r1, [r2, #9]
   b57b0:	4299      	cmp	r1, r3
   b57b2:	d3c0      	bcc.n	b5736 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b57b4:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b57b6:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b57b8:	b2ed      	uxtb	r5, r5
   b57ba:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b57be:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b57c0:	b328      	cbz	r0, b580e <_ZN12Adafruit_GFX5writeEh+0xf6>
   b57c2:	78e9      	ldrb	r1, [r5, #3]
   b57c4:	b319      	cbz	r1, b580e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b57c6:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b57c8:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b57ca:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b57cc:	b191      	cbz	r1, b57f4 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b57ce:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b57d2:	4408      	add	r0, r1
   b57d4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b57d8:	fb06 1100 	mla	r1, r6, r0, r1
   b57dc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b57e0:	4281      	cmp	r1, r0
   b57e2:	dd07      	ble.n	b57f4 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b57e4:	2000      	movs	r0, #0
   b57e6:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b57e8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b57ec:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b57ee:	fb02 1207 	mla	r2, r2, r7, r1
   b57f2:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b57f4:	8ae2      	ldrh	r2, [r4, #22]
   b57f6:	9201      	str	r2, [sp, #4]
   b57f8:	8aa2      	ldrh	r2, [r4, #20]
   b57fa:	9200      	str	r2, [sp, #0]
   b57fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b5800:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b5804:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b5808:	4620      	mov	r0, r4
   b580a:	f7ff fe17 	bl	b543c <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b580e:	7929      	ldrb	r1, [r5, #4]
   b5810:	7e22      	ldrb	r2, [r4, #24]
   b5812:	8a23      	ldrh	r3, [r4, #16]
   b5814:	fb01 3302 	mla	r3, r1, r2, r3
   b5818:	e7b8      	b.n	b578c <_ZN12Adafruit_GFX5writeEh+0x74>

000b581a <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b581a:	2901      	cmp	r1, #1
   b581c:	bf38      	it	cc
   b581e:	2101      	movcc	r1, #1
   b5820:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b5822:	7641      	strb	r1, [r0, #25]
}
   b5824:	4770      	bx	lr
	...

000b5828 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5828:	b510      	push	{r4, lr}
   b582a:	4b04      	ldr	r3, [pc, #16]	; (b583c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b582c:	6003      	str	r3, [r0, #0]
   b582e:	4604      	mov	r4, r0
  if(buffer) {
   b5830:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5832:	b108      	cbz	r0, b5838 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b5834:	f001 fd2c 	bl	b7290 <free>
    buffer = NULL;
  }
}
   b5838:	4620      	mov	r0, r4
   b583a:	bd10      	pop	{r4, pc}
   b583c:	000bd3e8 	.word	0x000bd3e8

000b5840 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b5840:	b510      	push	{r4, lr}
   b5842:	4604      	mov	r4, r0
}
   b5844:	f7ff fff0 	bl	b5828 <_ZN16Adafruit_SSD1306D1Ev>
   b5848:	4620      	mov	r0, r4
   b584a:	2150      	movs	r1, #80	; 0x50
   b584c:	f7ff f937 	bl	b4abe <_ZdlPvj>
   b5850:	4620      	mov	r0, r4
   b5852:	bd10      	pop	{r4, pc}

000b5854 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5854:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b5856:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b5858:	db4b      	blt.n	b58f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b585a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b585e:	428c      	cmp	r4, r1
   b5860:	dd47      	ble.n	b58f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5862:	2a00      	cmp	r2, #0
   b5864:	db45      	blt.n	b58f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b5866:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b586a:	4294      	cmp	r4, r2
   b586c:	dd41      	ble.n	b58f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b586e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b5870:	2c02      	cmp	r4, #2
   b5872:	d01f      	beq.n	b58b4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b5874:	2c03      	cmp	r4, #3
   b5876:	d026      	beq.n	b58c6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b5878:	2c01      	cmp	r4, #1
   b587a:	d104      	bne.n	b5886 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b587c:	8904      	ldrh	r4, [r0, #8]
   b587e:	43d2      	mvns	r2, r2
   b5880:	4414      	add	r4, r2
      break;
   b5882:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b5884:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b5886:	2b01      	cmp	r3, #1
   b5888:	d023      	beq.n	b58d2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b588a:	2b02      	cmp	r3, #2
   b588c:	d032      	beq.n	b58f4 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b588e:	bb83      	cbnz	r3, b58f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b5890:	2a00      	cmp	r2, #0
   b5892:	4613      	mov	r3, r2
   b5894:	8904      	ldrh	r4, [r0, #8]
   b5896:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5898:	bfb8      	it	lt
   b589a:	1dd3      	addlt	r3, r2, #7
   b589c:	10db      	asrs	r3, r3, #3
   b589e:	fb13 1104 	smlabb	r1, r3, r4, r1
   b58a2:	f002 0207 	and.w	r2, r2, #7
   b58a6:	2301      	movs	r3, #1
   b58a8:	4093      	lsls	r3, r2
   b58aa:	5c42      	ldrb	r2, [r0, r1]
   b58ac:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b58b0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b58b2:	e01e      	b.n	b58f2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b58b4:	8904      	ldrh	r4, [r0, #8]
   b58b6:	3c01      	subs	r4, #1
   b58b8:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b58ba:	8944      	ldrh	r4, [r0, #10]
   b58bc:	43d2      	mvns	r2, r2
   b58be:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b58c0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b58c2:	b212      	sxth	r2, r2
      break;
   b58c4:	e7df      	b.n	b5886 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b58c6:	8944      	ldrh	r4, [r0, #10]
   b58c8:	3c01      	subs	r4, #1
   b58ca:	1a64      	subs	r4, r4, r1
      break;
   b58cc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b58ce:	b222      	sxth	r2, r4
      break;
   b58d0:	e7d9      	b.n	b5886 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b58d2:	2a00      	cmp	r2, #0
   b58d4:	8904      	ldrh	r4, [r0, #8]
   b58d6:	4613      	mov	r3, r2
   b58d8:	bfb8      	it	lt
   b58da:	1dd3      	addlt	r3, r2, #7
   b58dc:	10db      	asrs	r3, r3, #3
   b58de:	fb13 1104 	smlabb	r1, r3, r4, r1
   b58e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b58e4:	f002 0007 	and.w	r0, r2, #7
   b58e8:	2201      	movs	r2, #1
   b58ea:	4082      	lsls	r2, r0
   b58ec:	5c58      	ldrb	r0, [r3, r1]
   b58ee:	4302      	orrs	r2, r0
   b58f0:	545a      	strb	r2, [r3, r1]
}
   b58f2:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b58f4:	2a00      	cmp	r2, #0
   b58f6:	4613      	mov	r3, r2
   b58f8:	8904      	ldrh	r4, [r0, #8]
   b58fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b58fc:	bfb8      	it	lt
   b58fe:	1dd3      	addlt	r3, r2, #7
   b5900:	10db      	asrs	r3, r3, #3
   b5902:	fb13 1104 	smlabb	r1, r3, r4, r1
   b5906:	f002 0207 	and.w	r2, r2, #7
   b590a:	2301      	movs	r3, #1
   b590c:	fa03 f202 	lsl.w	r2, r3, r2
   b5910:	5c43      	ldrb	r3, [r0, r1]
   b5912:	405a      	eors	r2, r3
   b5914:	e7cc      	b.n	b58b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b5918 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b5918:	b570      	push	{r4, r5, r6, lr}
   b591a:	4604      	mov	r4, r0
   b591c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b591e:	2600      	movs	r6, #0
   b5920:	f7ff fd22 	bl	b5368 <_ZN12Adafruit_GFXC1Ess>
   b5924:	4b11      	ldr	r3, [pc, #68]	; (b596c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b5926:	6023      	str	r3, [r4, #0]
   b5928:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b592a:	b915      	cbnz	r5, b5932 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b592c:	f004 fdd6 	bl	ba4dc <_Z19__fetch_global_Wirev>
   b5930:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b5932:	23ff      	movs	r3, #255	; 0xff
   b5934:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b5938:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b593c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b5940:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b5944:	4b0a      	ldr	r3, [pc, #40]	; (b5970 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b5946:	63a3      	str	r3, [r4, #56]	; 0x38
   b5948:	2301      	movs	r3, #1
   b594a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b594e:	9b05      	ldr	r3, [sp, #20]
   b5950:	64a3      	str	r3, [r4, #72]	; 0x48
   b5952:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b5956:	9b06      	ldr	r3, [sp, #24]
   b5958:	86a2      	strh	r2, [r4, #52]	; 0x34
   b595a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b595e:	6426      	str	r6, [r4, #64]	; 0x40
   b5960:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b5964:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b5966:	4620      	mov	r0, r4
   b5968:	bd70      	pop	{r4, r5, r6, pc}
   b596a:	bf00      	nop
   b596c:	000bd3e8 	.word	0x000bd3e8
   b5970:	000bc9ac 	.word	0x000bc9ac

000b5974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b5974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5976:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5978:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b597a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b597c:	b190      	cbz	r0, b59a4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b597e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5982:	f002 fb35 	bl	b7ff0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5986:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5988:	6803      	ldr	r3, [r0, #0]
   b598a:	2100      	movs	r1, #0
   b598c:	689b      	ldr	r3, [r3, #8]
   b598e:	4798      	blx	r3
    WIRE_WRITE(c);
   b5990:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5992:	6803      	ldr	r3, [r0, #0]
   b5994:	4629      	mov	r1, r5
   b5996:	689b      	ldr	r3, [r3, #8]
   b5998:	4798      	blx	r3
    wire->endTransmission();
   b599a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b599c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b59a0:	f002 bb2d 	b.w	b7ffe <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b59a4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b59a8:	4601      	mov	r1, r0
   b59aa:	b298      	uxth	r0, r3
   b59ac:	f004 fd4f 	bl	ba44e <digitalWrite>
  if(spi) {
   b59b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b59b2:	b120      	cbz	r0, b59be <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b59b4:	4629      	mov	r1, r5
}
   b59b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b59ba:	f003 bf4f 	b.w	b985c <_ZN8SPIClass8transferEh>
   b59be:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b59c0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b59c2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b59c6:	ea05 0107 	and.w	r1, r5, r7
   b59ca:	b280      	uxth	r0, r0
   b59cc:	f004 fd3f 	bl	ba44e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b59d0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b59d4:	2101      	movs	r1, #1
   b59d6:	b280      	uxth	r0, r0
   b59d8:	f004 fd39 	bl	ba44e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b59dc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b59e0:	2100      	movs	r1, #0
   b59e2:	b280      	uxth	r0, r0
   b59e4:	f004 fd33 	bl	ba44e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b59e8:	3e01      	subs	r6, #1
   b59ea:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b59ee:	d1e8      	bne.n	b59c2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b59f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b59f2 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b59f2:	b538      	push	{r3, r4, r5, lr}
   b59f4:	4604      	mov	r4, r0
  TRANSACTION_START
   b59f6:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b59f8:	460d      	mov	r5, r1
  TRANSACTION_START
   b59fa:	b180      	cbz	r0, b5a1e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b59fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b59fe:	f002 fae9 	bl	b7fd4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b5a02:	2d00      	cmp	r5, #0
   b5a04:	4620      	mov	r0, r4
   b5a06:	bf14      	ite	ne
   b5a08:	21a7      	movne	r1, #167	; 0xa7
   b5a0a:	21a6      	moveq	r1, #166	; 0xa6
   b5a0c:	f7ff ffb2 	bl	b5974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b5a10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a12:	b188      	cbz	r0, b5a38 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b5a14:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b5a1a:	f002 badb 	b.w	b7fd4 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b5a1e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a20:	b118      	cbz	r0, b5a2a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b5a22:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5a26:	f003 feab 	bl	b9780 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5a2a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5a2e:	2100      	movs	r1, #0
   b5a30:	b280      	uxth	r0, r0
   b5a32:	f004 fd0c 	bl	ba44e <digitalWrite>
   b5a36:	e7e4      	b.n	b5a02 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b5a38:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5a3c:	2101      	movs	r1, #1
   b5a3e:	b280      	uxth	r0, r0
   b5a40:	f004 fd05 	bl	ba44e <digitalWrite>
   b5a44:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5a46:	b118      	cbz	r0, b5a50 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b5a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b5a4c:	f003 be7e 	b.w	b974c <_ZN8SPIClass14endTransactionEv>
}
   b5a50:	bd38      	pop	{r3, r4, r5, pc}

000b5a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5a52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5a56:	4604      	mov	r4, r0
  if(wire) { // I2C
   b5a58:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b5a5a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b5a5c:	188f      	adds	r7, r1, r2
   b5a5e:	b340      	cbz	r0, b5ab2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b5a60:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5a64:	f002 fac4 	bl	b7ff0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5a68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a6a:	6803      	ldr	r3, [r0, #0]
   b5a6c:	2100      	movs	r1, #0
   b5a6e:	689b      	ldr	r3, [r3, #8]
   b5a70:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b5a72:	2601      	movs	r6, #1
    while(n--) {
   b5a74:	42af      	cmp	r7, r5
        wire->endTransmission();
   b5a76:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b5a78:	d017      	beq.n	b5aaa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b5a7a:	2e1f      	cmp	r6, #31
   b5a7c:	d90c      	bls.n	b5a98 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b5a7e:	f002 fabe 	bl	b7ffe <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b5a82:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b5a86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a88:	f002 fab2 	bl	b7ff0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b5a8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a8e:	6803      	ldr	r3, [r0, #0]
   b5a90:	2100      	movs	r1, #0
   b5a92:	689b      	ldr	r3, [r3, #8]
   b5a94:	4798      	blx	r3
        bytesOut = 1;
   b5a96:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5a98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5a9a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5a9e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5aa0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b5aa2:	689b      	ldr	r3, [r3, #8]
   b5aa4:	4798      	blx	r3
      bytesOut++;
   b5aa6:	b2f6      	uxtb	r6, r6
    while(n--) {
   b5aa8:	e7e4      	b.n	b5a74 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b5aaa:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b5aae:	f002 baa6 	b.w	b7ffe <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b5ab2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b5ab6:	4601      	mov	r1, r0
   b5ab8:	b298      	uxth	r0, r3
   b5aba:	f004 fcc8 	bl	ba44e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5abe:	42bd      	cmp	r5, r7
   b5ac0:	d022      	beq.n	b5b08 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b5ac2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b5ac4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5ac8:	b118      	cbz	r0, b5ad2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b5aca:	4649      	mov	r1, r9
   b5acc:	f003 fec6 	bl	b985c <_ZN8SPIClass8transferEh>
   b5ad0:	e7f5      	b.n	b5abe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b5ad2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5ad4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5ad8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5adc:	ea09 0108 	and.w	r1, r9, r8
   b5ae0:	b280      	uxth	r0, r0
   b5ae2:	f004 fcb4 	bl	ba44e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5ae6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5aea:	2101      	movs	r1, #1
   b5aec:	b280      	uxth	r0, r0
   b5aee:	f004 fcae 	bl	ba44e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b5af2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5af6:	2100      	movs	r1, #0
   b5af8:	b280      	uxth	r0, r0
   b5afa:	f004 fca8 	bl	ba44e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5afe:	3e01      	subs	r6, #1
   b5b00:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b5b04:	d1e8      	bne.n	b5ad8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b5b06:	e7da      	b.n	b5abe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b5b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5b0c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b5b0c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5b10:	1dda      	adds	r2, r3, #7
   b5b12:	bf48      	it	mi
   b5b14:	f103 020e 	addmi.w	r2, r3, #14
   b5b18:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5b1c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5b1e:	10d2      	asrs	r2, r2, #3
   b5b20:	435a      	muls	r2, r3
   b5b22:	2100      	movs	r1, #0
   b5b24:	f004 bea2 	b.w	ba86c <memset>

000b5b28 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b5b28:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b5b2c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5b2e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b5b30:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b5b34:	4604      	mov	r4, r0
   b5b36:	460f      	mov	r7, r1
   b5b38:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5b3a:	b1c3      	cbz	r3, b5b6e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b5b3c:	4620      	mov	r0, r4
   b5b3e:	f7ff ffe5 	bl	b5b0c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b5b42:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b5b46:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5b4a:	2820      	cmp	r0, #32
   b5b4c:	dc21      	bgt.n	b5b92 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5b4e:	2320      	movs	r3, #32
   b5b50:	2201      	movs	r2, #1
   b5b52:	3820      	subs	r0, #32
   b5b54:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5b58:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b5b5c:	2373      	movs	r3, #115	; 0x73
   b5b5e:	3973      	subs	r1, #115	; 0x73
   b5b60:	9300      	str	r3, [sp, #0]
   b5b62:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5b66:	4b89      	ldr	r3, [pc, #548]	; (b5d8c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5b68:	f340 024f 	sbfx	r2, r0, #1, #16
   b5b6c:	e021      	b.n	b5bb2 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5b6e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b5b72:	1dd8      	adds	r0, r3, #7
   b5b74:	bf48      	it	mi
   b5b76:	f103 000e 	addmi.w	r0, r3, #14
   b5b7a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5b7e:	10c0      	asrs	r0, r0, #3
   b5b80:	4358      	muls	r0, r3
   b5b82:	f001 fb7d 	bl	b7280 <malloc>
   b5b86:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5b88:	2800      	cmp	r0, #0
   b5b8a:	d1d7      	bne.n	b5b3c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5b8c:	b004      	add	sp, #16
   b5b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b5b92:	3840      	subs	r0, #64	; 0x40
   b5b94:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5b98:	fa02 f280 	sxtah	r2, r2, r0
   b5b9c:	2340      	movs	r3, #64	; 0x40
   b5b9e:	2001      	movs	r0, #1
   b5ba0:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b5ba4:	2352      	movs	r3, #82	; 0x52
   b5ba6:	3952      	subs	r1, #82	; 0x52
   b5ba8:	9300      	str	r3, [sp, #0]
   b5baa:	4b79      	ldr	r3, [pc, #484]	; (b5d90 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5bac:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5bb0:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5bb2:	4620      	mov	r0, r4
   b5bb4:	f341 014f 	sbfx	r1, r1, #1, #16
   b5bb8:	f7ff fbec 	bl	b5394 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5bbc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5bbe:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b5bc2:	2800      	cmp	r0, #0
   b5bc4:	d078      	beq.n	b5cb8 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5bc6:	2d00      	cmp	r5, #0
   b5bc8:	d174      	bne.n	b5cb4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5bca:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5bce:	2b20      	cmp	r3, #32
   b5bd0:	bf0c      	ite	eq
   b5bd2:	253c      	moveq	r5, #60	; 0x3c
   b5bd4:	253d      	movne	r5, #61	; 0x3d
   b5bd6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5bda:	f1b8 0f00 	cmp.w	r8, #0
   b5bde:	d001      	beq.n	b5be4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5be0:	f002 f9fc 	bl	b7fdc <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b5be4:	b1fe      	cbz	r6, b5c26 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b5be6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5bea:	2800      	cmp	r0, #0
   b5bec:	db1b      	blt.n	b5c26 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b5bee:	2101      	movs	r1, #1
   b5bf0:	b280      	uxth	r0, r0
   b5bf2:	f004 fc1b 	bl	ba42c <pinMode>
    digitalWrite(rstPin, HIGH);
   b5bf6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5bfa:	2101      	movs	r1, #1
   b5bfc:	b280      	uxth	r0, r0
   b5bfe:	f004 fc26 	bl	ba44e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b5c02:	2001      	movs	r0, #1
   b5c04:	f001 fb84 	bl	b7310 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b5c08:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5c0c:	2100      	movs	r1, #0
   b5c0e:	b280      	uxth	r0, r0
   b5c10:	f004 fc1d 	bl	ba44e <digitalWrite>
    delay(10);                  // Wait 10 ms
   b5c14:	200a      	movs	r0, #10
   b5c16:	f001 fb7b 	bl	b7310 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b5c1a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b5c1e:	2101      	movs	r1, #1
   b5c20:	b280      	uxth	r0, r0
   b5c22:	f004 fc14 	bl	ba44e <digitalWrite>
  TRANSACTION_START
   b5c26:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5c28:	2800      	cmp	r0, #0
   b5c2a:	d074      	beq.n	b5d16 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b5c2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5c2e:	f002 f9d1 	bl	b7fd4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b5c32:	2204      	movs	r2, #4
   b5c34:	4957      	ldr	r1, [pc, #348]	; (b5d94 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b5c36:	4620      	mov	r0, r4
   b5c38:	f7ff ff0b 	bl	b5a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b5c3c:	8961      	ldrh	r1, [r4, #10]
   b5c3e:	3901      	subs	r1, #1
   b5c40:	b2c9      	uxtb	r1, r1
   b5c42:	4620      	mov	r0, r4
   b5c44:	f7ff fe96 	bl	b5974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5c48:	4953      	ldr	r1, [pc, #332]	; (b5d98 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5c4a:	2204      	movs	r2, #4
   b5c4c:	4620      	mov	r0, r4
   b5c4e:	f7ff ff00 	bl	b5a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b5c52:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5c56:	2b01      	cmp	r3, #1
   b5c58:	bf0c      	ite	eq
   b5c5a:	2110      	moveq	r1, #16
   b5c5c:	2114      	movne	r1, #20
   b5c5e:	4620      	mov	r0, r4
   b5c60:	f7ff fe88 	bl	b5974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b5c64:	2204      	movs	r2, #4
   b5c66:	494d      	ldr	r1, [pc, #308]	; (b5d9c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5c68:	4620      	mov	r0, r4
   b5c6a:	f7ff fef2 	bl	b5a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b5c6e:	68a3      	ldr	r3, [r4, #8]
   b5c70:	4a4b      	ldr	r2, [pc, #300]	; (b5da0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b5c72:	4293      	cmp	r3, r2
   b5c74:	d15c      	bne.n	b5d30 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b5c76:	494b      	ldr	r1, [pc, #300]	; (b5da4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5c78:	2204      	movs	r2, #4
   b5c7a:	4620      	mov	r0, r4
   b5c7c:	f7ff fee9 	bl	b5a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5c80:	21d9      	movs	r1, #217	; 0xd9
   b5c82:	4620      	mov	r0, r4
   b5c84:	f7ff fe76 	bl	b5974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5c88:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5c8c:	2b01      	cmp	r3, #1
   b5c8e:	bf0c      	ite	eq
   b5c90:	2122      	moveq	r1, #34	; 0x22
   b5c92:	21f1      	movne	r1, #241	; 0xf1
   b5c94:	4620      	mov	r0, r4
   b5c96:	f7ff fe6d 	bl	b5974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5c9a:	4620      	mov	r0, r4
   b5c9c:	4942      	ldr	r1, [pc, #264]	; (b5da8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5c9e:	2206      	movs	r2, #6
   b5ca0:	f7ff fed7 	bl	b5a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b5ca4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5ca6:	2800      	cmp	r0, #0
   b5ca8:	d063      	beq.n	b5d72 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b5caa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5cac:	f002 f992 	bl	b7fd4 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5cb0:	2001      	movs	r0, #1
   b5cb2:	e76b      	b.n	b5b8c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b5cb4:	b26d      	sxtb	r5, r5
   b5cb6:	e78e      	b.n	b5bd6 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5cb8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5cbc:	2101      	movs	r1, #1
   b5cbe:	b280      	uxth	r0, r0
   b5cc0:	f004 fbb4 	bl	ba42c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b5cc4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5cc8:	2101      	movs	r1, #1
   b5cca:	b280      	uxth	r0, r0
   b5ccc:	f004 fbae 	bl	ba42c <pinMode>
    SSD1306_DESELECT
   b5cd0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5cd4:	2101      	movs	r1, #1
   b5cd6:	b280      	uxth	r0, r0
   b5cd8:	f004 fbb9 	bl	ba44e <digitalWrite>
    if(spi) { // Hardware SPI
   b5cdc:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5cde:	b13d      	cbz	r5, b5cf0 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5ce0:	f1b8 0f00 	cmp.w	r8, #0
   b5ce4:	f43f af7e 	beq.w	b5be4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5ce8:	4628      	mov	r0, r5
   b5cea:	f003 fd07 	bl	b96fc <_ZN8SPIClass5beginEv>
   b5cee:	e779      	b.n	b5be4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b5cf0:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5cf4:	2101      	movs	r1, #1
   b5cf6:	b280      	uxth	r0, r0
   b5cf8:	f004 fb98 	bl	ba42c <pinMode>
      pinMode(clkPin , OUTPUT);
   b5cfc:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5d00:	2101      	movs	r1, #1
   b5d02:	b280      	uxth	r0, r0
   b5d04:	f004 fb92 	bl	ba42c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b5d08:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5d0c:	4629      	mov	r1, r5
   b5d0e:	b280      	uxth	r0, r0
   b5d10:	f004 fb9d 	bl	ba44e <digitalWrite>
   b5d14:	e766      	b.n	b5be4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b5d16:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d18:	b118      	cbz	r0, b5d22 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b5d1a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b5d1e:	f003 fd2f 	bl	b9780 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b5d22:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d26:	2100      	movs	r1, #0
   b5d28:	b280      	uxth	r0, r0
   b5d2a:	f004 fb90 	bl	ba44e <digitalWrite>
   b5d2e:	e780      	b.n	b5c32 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b5d30:	4a1e      	ldr	r2, [pc, #120]	; (b5dac <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b5d32:	4293      	cmp	r3, r2
   b5d34:	d10e      	bne.n	b5d54 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b5d36:	491e      	ldr	r1, [pc, #120]	; (b5db0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b5d38:	2203      	movs	r2, #3
   b5d3a:	4620      	mov	r0, r4
   b5d3c:	f7ff fe89 	bl	b5a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b5d40:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5d44:	2b01      	cmp	r3, #1
   b5d46:	bf0c      	ite	eq
   b5d48:	219f      	moveq	r1, #159	; 0x9f
   b5d4a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5d4c:	4620      	mov	r0, r4
   b5d4e:	f7ff fe11 	bl	b5974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b5d52:	e795      	b.n	b5c80 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b5d54:	4a17      	ldr	r2, [pc, #92]	; (b5db4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b5d56:	4293      	cmp	r3, r2
   b5d58:	d192      	bne.n	b5c80 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5d5a:	4917      	ldr	r1, [pc, #92]	; (b5db8 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5d5c:	2203      	movs	r2, #3
   b5d5e:	4620      	mov	r0, r4
   b5d60:	f7ff fe77 	bl	b5a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5d64:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5d68:	2b01      	cmp	r3, #1
   b5d6a:	bf0c      	ite	eq
   b5d6c:	2110      	moveq	r1, #16
   b5d6e:	21af      	movne	r1, #175	; 0xaf
   b5d70:	e7ec      	b.n	b5d4c <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b5d72:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5d76:	2101      	movs	r1, #1
   b5d78:	b280      	uxth	r0, r0
   b5d7a:	f004 fb68 	bl	ba44e <digitalWrite>
   b5d7e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5d80:	2800      	cmp	r0, #0
   b5d82:	d095      	beq.n	b5cb0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5d84:	f003 fce2 	bl	b974c <_ZN8SPIClass14endTransactionEv>
   b5d88:	e792      	b.n	b5cb0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5d8a:	bf00      	nop
   b5d8c:	000bd200 	.word	0x000bd200
   b5d90:	000bcf40 	.word	0x000bcf40
   b5d94:	000bd448 	.word	0x000bd448
   b5d98:	000bd44c 	.word	0x000bd44c
   b5d9c:	000bd450 	.word	0x000bd450
   b5da0:	00200080 	.word	0x00200080
   b5da4:	000bd45a 	.word	0x000bd45a
   b5da8:	000bd454 	.word	0x000bd454
   b5dac:	00400080 	.word	0x00400080
   b5db0:	000bd45e 	.word	0x000bd45e
   b5db4:	00100060 	.word	0x00100060
   b5db8:	000bd461 	.word	0x000bd461

000b5dbc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5dbc:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5dbe:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5dc0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5dc4:	db3d      	blt.n	b5e42 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5dc6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5dca:	4294      	cmp	r4, r2
   b5dcc:	dd39      	ble.n	b5e42 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5dce:	2900      	cmp	r1, #0
      w += x;
   b5dd0:	bfbe      	ittt	lt
   b5dd2:	185b      	addlt	r3, r3, r1
   b5dd4:	b21b      	sxthlt	r3, r3
      x  = 0;
   b5dd6:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5dd8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5ddc:	18ce      	adds	r6, r1, r3
   b5dde:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5de0:	bfc4      	itt	gt
   b5de2:	1a63      	subgt	r3, r4, r1
   b5de4:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b5de6:	2b00      	cmp	r3, #0
   b5de8:	dd2b      	ble.n	b5e42 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b5dea:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b5dec:	10d6      	asrs	r6, r2, #3
   b5dee:	fb14 1106 	smlabb	r1, r4, r6, r1
   b5df2:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b5df4:	f002 0007 	and.w	r0, r2, #7
   b5df8:	2201      	movs	r2, #1
   b5dfa:	4082      	lsls	r2, r0
      switch(color) {
   b5dfc:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b5dfe:	b2d2      	uxtb	r2, r2
      switch(color) {
   b5e00:	d016      	beq.n	b5e30 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b5e02:	2d02      	cmp	r5, #2
   b5e04:	d00b      	beq.n	b5e1e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b5e06:	b9e5      	cbnz	r5, b5e42 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b5e08:	43d2      	mvns	r2, r2
   b5e0a:	b2d2      	uxtb	r2, r2
   b5e0c:	440b      	add	r3, r1
   b5e0e:	4299      	cmp	r1, r3
   b5e10:	d017      	beq.n	b5e42 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5e12:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5e16:	4010      	ands	r0, r2
   b5e18:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5e1c:	e7f7      	b.n	b5e0e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b5e1e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b5e20:	4299      	cmp	r1, r3
   b5e22:	d00e      	beq.n	b5e42 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5e24:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5e28:	4050      	eors	r0, r2
   b5e2a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5e2e:	e7f7      	b.n	b5e20 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b5e30:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b5e32:	4299      	cmp	r1, r3
   b5e34:	d005      	beq.n	b5e42 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b5e36:	f811 0b01 	ldrb.w	r0, [r1], #1
   b5e3a:	4310      	orrs	r0, r2
   b5e3c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b5e40:	e7f7      	b.n	b5e32 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b5e42:	bd70      	pop	{r4, r5, r6, pc}

000b5e44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5e44:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5e46:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5e48:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5e4c:	db76      	blt.n	b5f3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5e4e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b5e52:	42b1      	cmp	r1, r6
   b5e54:	da72      	bge.n	b5f3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b5e56:	2a00      	cmp	r2, #0
      __h += __y;
   b5e58:	bfbe      	ittt	lt
   b5e5a:	189b      	addlt	r3, r3, r2
   b5e5c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5e5e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5e60:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5e64:	18d7      	adds	r7, r2, r3
   b5e66:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5e68:	bfc4      	itt	gt
   b5e6a:	1aa3      	subgt	r3, r4, r2
   b5e6c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5e6e:	2b00      	cmp	r3, #0
   b5e70:	dd64      	ble.n	b5f3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5e72:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b5e76:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5e78:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5e7c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5e80:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b5e82:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b5e86:	d023      	beq.n	b5ed0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5e88:	f1c2 0208 	rsb	r2, r2, #8
   b5e8c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5e8e:	492d      	ldr	r1, [pc, #180]	; (b5f44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5e90:	4293      	cmp	r3, r2
   b5e92:	bf3c      	itt	cc
   b5e94:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5e98:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5e9c:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5e9e:	bf3c      	itt	cc
   b5ea0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b5ea4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5ea8:	2d01      	cmp	r5, #1
   b5eaa:	d007      	beq.n	b5ebc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5eac:	2d02      	cmp	r5, #2
   b5eae:	d02e      	beq.n	b5f0e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5eb0:	b94d      	cbnz	r5, b5ec6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b5eb2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5eb6:	ea2c 0101 	bic.w	r1, ip, r1
   b5eba:	e003      	b.n	b5ec4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5ebc:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5ec0:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b5ec4:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b5ec6:	4293      	cmp	r3, r2
   b5ec8:	d338      	bcc.n	b5f3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5eca:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5ece:	440c      	add	r4, r1
        h -= mod;
   b5ed0:	1a9a      	subs	r2, r3, r2
   b5ed2:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b5ed4:	2a07      	cmp	r2, #7
   b5ed6:	d90e      	bls.n	b5ef6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5ed8:	2d02      	cmp	r5, #2
   b5eda:	d11d      	bne.n	b5f18 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5edc:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5ede:	7821      	ldrb	r1, [r4, #0]
   b5ee0:	43c9      	mvns	r1, r1
   b5ee2:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b5ee4:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5ee6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b5eea:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5eec:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b5eee:	440c      	add	r4, r1
            } while(h >= 8);
   b5ef0:	d8f5      	bhi.n	b5ede <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b5ef2:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b5ef6:	b30a      	cbz	r2, b5f3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5ef8:	4b13      	ldr	r3, [pc, #76]	; (b5f48 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b5efa:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b5efc:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b5efe:	d01a      	beq.n	b5f36 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b5f00:	2d02      	cmp	r5, #2
   b5f02:	d01c      	beq.n	b5f3e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b5f04:	b9d5      	cbnz	r5, b5f3c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b5f06:	7822      	ldrb	r2, [r4, #0]
   b5f08:	ea22 0303 	bic.w	r3, r2, r3
   b5f0c:	e015      	b.n	b5f3a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b5f0e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5f12:	ea81 010c 	eor.w	r1, r1, ip
   b5f16:	e7d5      	b.n	b5ec4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b5f18:	1e29      	subs	r1, r5, #0
   b5f1a:	bf18      	it	ne
   b5f1c:	2101      	movne	r1, #1
   b5f1e:	4249      	negs	r1, r1
   b5f20:	b2c9      	uxtb	r1, r1
   b5f22:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b5f24:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b5f26:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5f28:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b5f2c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b5f2e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b5f30:	4434      	add	r4, r6
            } while(h >= 8);
   b5f32:	d8f7      	bhi.n	b5f24 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b5f34:	e7dd      	b.n	b5ef2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b5f36:	7822      	ldrb	r2, [r4, #0]
   b5f38:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b5f3a:	7023      	strb	r3, [r4, #0]
}
   b5f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b5f3e:	7822      	ldrb	r2, [r4, #0]
   b5f40:	4053      	eors	r3, r2
   b5f42:	e7fa      	b.n	b5f3a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b5f44:	000bd438 	.word	0x000bd438
   b5f48:	000bd440 	.word	0x000bd440

000b5f4c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5f4c:	b470      	push	{r4, r5, r6}
   b5f4e:	4614      	mov	r4, r2
  switch(rotation) {
   b5f50:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5f52:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b5f56:	2a02      	cmp	r2, #2
   b5f58:	d00d      	beq.n	b5f76 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5f5a:	2a03      	cmp	r2, #3
   b5f5c:	d018      	beq.n	b5f90 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5f5e:	2a01      	cmp	r2, #1
   b5f60:	d111      	bne.n	b5f86 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b5f62:	8902      	ldrh	r2, [r0, #8]
   b5f64:	43e4      	mvns	r4, r4
   b5f66:	4414      	add	r4, r2
   b5f68:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5f6a:	9603      	str	r6, [sp, #12]
   b5f6c:	460a      	mov	r2, r1
   b5f6e:	4621      	mov	r1, r4
}
   b5f70:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5f72:	f7ff bf67 	b.w	b5e44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b5f76:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5f78:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b5f7a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5f7c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5f7e:	4414      	add	r4, r2
    x -= (w-1);
   b5f80:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b5f82:	b224      	sxth	r4, r4
    x -= (w-1);
   b5f84:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b5f86:	9603      	str	r6, [sp, #12]
   b5f88:	4622      	mov	r2, r4
}
   b5f8a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5f8c:	f7ff bf16 	b.w	b5dbc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5f90:	8945      	ldrh	r5, [r0, #10]
   b5f92:	4419      	add	r1, r3
   b5f94:	1a69      	subs	r1, r5, r1
   b5f96:	b209      	sxth	r1, r1
    break;
   b5f98:	e7e7      	b.n	b5f6a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5f9a <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5f9a:	b430      	push	{r4, r5}
   b5f9c:	4614      	mov	r4, r2
  switch(rotation) {
   b5f9e:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5fa0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b5fa4:	2a02      	cmp	r2, #2
   b5fa6:	d00d      	beq.n	b5fc4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5fa8:	2a03      	cmp	r2, #3
   b5faa:	d018      	beq.n	b5fde <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5fac:	2a01      	cmp	r2, #1
   b5fae:	d111      	bne.n	b5fd4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5fb0:	18e2      	adds	r2, r4, r3
   b5fb2:	8904      	ldrh	r4, [r0, #8]
   b5fb4:	1aa4      	subs	r4, r4, r2
   b5fb6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5fb8:	9502      	str	r5, [sp, #8]
   b5fba:	460a      	mov	r2, r1
   b5fbc:	4621      	mov	r1, r4
}
   b5fbe:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5fc0:	f7ff befc 	b.w	b5dbc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b5fc4:	8902      	ldrh	r2, [r0, #8]
   b5fc6:	43c9      	mvns	r1, r1
   b5fc8:	4411      	add	r1, r2
    y -= (h-1);
   b5fca:	18e2      	adds	r2, r4, r3
   b5fcc:	8944      	ldrh	r4, [r0, #10]
   b5fce:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5fd0:	b209      	sxth	r1, r1
    y -= (h-1);
   b5fd2:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b5fd4:	9502      	str	r5, [sp, #8]
   b5fd6:	4622      	mov	r2, r4
}
   b5fd8:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b5fda:	f7ff bf33 	b.w	b5e44 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5fde:	8942      	ldrh	r2, [r0, #10]
   b5fe0:	43c9      	mvns	r1, r1
   b5fe2:	4411      	add	r1, r2
   b5fe4:	b209      	sxth	r1, r1
    break;
   b5fe6:	e7e7      	b.n	b5fb8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b5fe8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b5fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5fec:	4604      	mov	r4, r0
  TRANSACTION_START
   b5fee:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b5ff0:	2800      	cmp	r0, #0
   b5ff2:	d042      	beq.n	b607a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b5ff4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b5ff6:	f001 ffed 	bl	b7fd4 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b5ffa:	4947      	ldr	r1, [pc, #284]	; (b6118 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b5ffc:	2205      	movs	r2, #5
   b5ffe:	4620      	mov	r0, r4
   b6000:	f7ff fd27 	bl	b5a52 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6004:	8921      	ldrh	r1, [r4, #8]
   b6006:	3901      	subs	r1, #1
   b6008:	4620      	mov	r0, r4
   b600a:	b2c9      	uxtb	r1, r1
   b600c:	f7ff fcb2 	bl	b5974 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6010:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6014:	1dde      	adds	r6, r3, #7
   b6016:	bf48      	it	mi
   b6018:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b601c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6020:	8923      	ldrh	r3, [r4, #8]
   b6022:	10f6      	asrs	r6, r6, #3
   b6024:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b6028:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b602c:	2800      	cmp	r0, #0
   b602e:	d03a      	beq.n	b60a6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6030:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6034:	f001 ffdc 	bl	b7ff0 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b6038:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b603a:	6803      	ldr	r3, [r0, #0]
   b603c:	2140      	movs	r1, #64	; 0x40
   b603e:	689b      	ldr	r3, [r3, #8]
   b6040:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6042:	2701      	movs	r7, #1
    while(count--) {
   b6044:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b6046:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b6048:	d024      	beq.n	b6094 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b604a:	2f1f      	cmp	r7, #31
   b604c:	d90c      	bls.n	b6068 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b604e:	f001 ffd6 	bl	b7ffe <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6052:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6056:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6058:	f001 ffca 	bl	b7ff0 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b605c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b605e:	6803      	ldr	r3, [r0, #0]
   b6060:	2140      	movs	r1, #64	; 0x40
   b6062:	689b      	ldr	r3, [r3, #8]
   b6064:	4798      	blx	r3
        bytesOut = 1;
   b6066:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b6068:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b606a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b606e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6070:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6072:	689b      	ldr	r3, [r3, #8]
   b6074:	4798      	blx	r3
      bytesOut++;
   b6076:	b2ff      	uxtb	r7, r7
    while(count--) {
   b6078:	e7e4      	b.n	b6044 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b607a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b607c:	b118      	cbz	r0, b6086 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b607e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6082:	f003 fb7d 	bl	b9780 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6086:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b608a:	2100      	movs	r1, #0
   b608c:	b280      	uxth	r0, r0
   b608e:	f004 f9de 	bl	ba44e <digitalWrite>
   b6092:	e7b2      	b.n	b5ffa <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6094:	f001 ffb3 	bl	b7ffe <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6098:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b609a:	b378      	cbz	r0, b60fc <_ZN16Adafruit_SSD13067displayEv+0x114>
   b609c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b609e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b60a2:	f001 bf97 	b.w	b7fd4 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b60a6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b60aa:	2101      	movs	r1, #1
   b60ac:	b280      	uxth	r0, r0
   b60ae:	f004 f9ce 	bl	ba44e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b60b2:	42ae      	cmp	r6, r5
   b60b4:	d0f0      	beq.n	b6098 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b60b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b60b8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b60bc:	b118      	cbz	r0, b60c6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b60be:	4649      	mov	r1, r9
   b60c0:	f003 fbcc 	bl	b985c <_ZN8SPIClass8transferEh>
   b60c4:	e7f5      	b.n	b60b2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b60c6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b60c8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b60cc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b60d0:	ea09 0108 	and.w	r1, r9, r8
   b60d4:	b280      	uxth	r0, r0
   b60d6:	f004 f9ba 	bl	ba44e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b60da:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b60de:	2101      	movs	r1, #1
   b60e0:	b280      	uxth	r0, r0
   b60e2:	f004 f9b4 	bl	ba44e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b60e6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b60ea:	2100      	movs	r1, #0
   b60ec:	b280      	uxth	r0, r0
   b60ee:	f004 f9ae 	bl	ba44e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b60f2:	3f01      	subs	r7, #1
   b60f4:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b60f8:	d1e8      	bne.n	b60cc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b60fa:	e7da      	b.n	b60b2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b60fc:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6100:	2101      	movs	r1, #1
   b6102:	b280      	uxth	r0, r0
   b6104:	f004 f9a3 	bl	ba44e <digitalWrite>
   b6108:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b610a:	b118      	cbz	r0, b6114 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b610c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6110:	f003 bb1c 	b.w	b974c <_ZN8SPIClass14endTransactionEv>
}
   b6114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6118:	000bd464 	.word	0x000bd464

000b611c <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b611c:	2100      	movs	r1, #0
   b611e:	220a      	movs	r2, #10
   b6120:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6124:	4770      	bx	lr

000b6126 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b6126:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b6128:	b510      	push	{r4, lr}
   b612a:	4604      	mov	r4, r0
    this->pin = pin;
   b612c:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b612e:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6130:	b288      	uxth	r0, r1
   b6132:	f004 f9a5 	bl	ba480 <digitalRead>
   b6136:	b108      	cbz	r0, b613c <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b6138:	2303      	movs	r3, #3
   b613a:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b613c:	f000 fe2c 	bl	b6d98 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6140:	6020      	str	r0, [r4, #0]
#endif
}
   b6142:	bd10      	pop	{r4, pc}

000b6144 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6144:	b538      	push	{r3, r4, r5, lr}
   b6146:	460c      	mov	r4, r1
   b6148:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b614a:	4611      	mov	r1, r2
   b614c:	b2a0      	uxth	r0, r4
   b614e:	f004 f96d 	bl	ba42c <pinMode>
  
  this->attach(pin);
   b6152:	4621      	mov	r1, r4
   b6154:	4628      	mov	r0, r5
}
   b6156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b615a:	f7ff bfe4 	b.w	b6126 <_ZN8Debounce6attachEi>

000b615e <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b615e:	b538      	push	{r3, r4, r5, lr}
   b6160:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b6162:	79c0      	ldrb	r0, [r0, #7]
   b6164:	f004 f98c 	bl	ba480 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b6168:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b616a:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b616c:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b6170:	bf18      	it	ne
   b6172:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6174:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b6178:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b617a:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b617c:	d00a      	beq.n	b6194 <_ZN8Debounce6updateEv+0x36>
   b617e:	f000 fe0b 	bl	b6d98 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b6182:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b6184:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b6186:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b618a:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b618c:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b618e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b6192:	bd38      	pop	{r3, r4, r5, pc}
   b6194:	f000 fe00 	bl	b6d98 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b6198:	6823      	ldr	r3, [r4, #0]
   b619a:	1ac0      	subs	r0, r0, r3
   b619c:	88a3      	ldrh	r3, [r4, #4]
   b619e:	4298      	cmp	r0, r3
   b61a0:	d3f4      	bcc.n	b618c <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b61a2:	79a3      	ldrb	r3, [r4, #6]
   b61a4:	f003 0301 	and.w	r3, r3, #1
   b61a8:	42ab      	cmp	r3, r5
   b61aa:	d0ef      	beq.n	b618c <_ZN8Debounce6updateEv+0x2e>
   b61ac:	f000 fdf4 	bl	b6d98 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b61b0:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b61b2:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b61b4:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b61b8:	f043 0308 	orr.w	r3, r3, #8
   b61bc:	e7e5      	b.n	b618a <_ZN8Debounce6updateEv+0x2c>

000b61be <_ZN9LIS3DHSPID1Ev>:

LIS3DHSPI::LIS3DHSPI(SPIClass &spi, int ss, int intPin) : LIS3DH(intPin), spi(spi), ss(ss), spiSettings(10 * MHZ, MSBFIRST, SPI_MODE0) {
}

LIS3DHSPI::~LIS3DHSPI() {
}
   b61be:	4770      	bx	lr

000b61c0 <_ZN9LIS3DHSPID0Ev>:
LIS3DHSPI::~LIS3DHSPI() {
   b61c0:	b510      	push	{r4, lr}
}
   b61c2:	2128      	movs	r1, #40	; 0x28
LIS3DHSPI::~LIS3DHSPI() {
   b61c4:	4604      	mov	r4, r0
}
   b61c6:	f7fe fc7a 	bl	b4abe <_ZdlPvj>
   b61ca:	4620      	mov	r0, r4
   b61cc:	bd10      	pop	{r4, pc}

000b61ce <_ZN9LIS3DHSPI16beginTransactionEv>:

void LIS3DHSPI::spiSetup() {
	// No longer used; SPI transactions are always used now
}

void LIS3DHSPI::beginTransaction() {
   b61ce:	b510      	push	{r4, lr}
   b61d0:	4604      	mov	r4, r0
	spi.beginTransaction(spiSettings);
   b61d2:	f100 0118 	add.w	r1, r0, #24
   b61d6:	68c0      	ldr	r0, [r0, #12]
   b61d8:	f003 fad2 	bl	b9780 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

	digitalWrite(ss, LOW);
   b61dc:	8a20      	ldrh	r0, [r4, #16]
   b61de:	2100      	movs	r1, #0
}
   b61e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	digitalWrite(ss, LOW);
   b61e4:	f004 b933 	b.w	ba44e <digitalWrite>

000b61e8 <_ZN9LIS3DHSPI14endTransactionEv>:

void LIS3DHSPI::endTransaction() {
   b61e8:	b510      	push	{r4, lr}
   b61ea:	4604      	mov	r4, r0
	digitalWrite(ss, HIGH);
   b61ec:	2101      	movs	r1, #1
   b61ee:	8a00      	ldrh	r0, [r0, #16]
   b61f0:	f004 f92d 	bl	ba44e <digitalWrite>

	spi.endTransaction();
   b61f4:	68e0      	ldr	r0, [r4, #12]
}
   b61f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	spi.endTransaction();
   b61fa:	f003 baa7 	b.w	b974c <_ZN8SPIClass14endTransactionEv>

000b61fe <_ZN9LIS3DHSPI8readDataEhPhj>:

bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b61fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6200:	461e      	mov	r6, r3
	beginTransaction();
   b6202:	6803      	ldr	r3, [r0, #0]
   b6204:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   b6206:	460f      	mov	r7, r1
   b6208:	4614      	mov	r4, r2
   b620a:	4605      	mov	r5, r0
	beginTransaction();
   b620c:	4798      	blx	r3

	if (numBytes > 1) {
   b620e:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   b6210:	bf88      	it	hi
   b6212:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(SPI_READ | addr);
   b6216:	68e8      	ldr	r0, [r5, #12]
   b6218:	f047 0180 	orr.w	r1, r7, #128	; 0x80
   b621c:	f003 fb1e 	bl	b985c <_ZN8SPIClass8transferEh>

	for(size_t ii = 0; ii < numBytes; ii++) {
   b6220:	4426      	add	r6, r4
   b6222:	42b4      	cmp	r4, r6
   b6224:	d006      	beq.n	b6234 <_ZN9LIS3DHSPI8readDataEhPhj+0x36>
		buf[ii] = spi.transfer(0);
   b6226:	68e8      	ldr	r0, [r5, #12]
   b6228:	2100      	movs	r1, #0
   b622a:	f003 fb17 	bl	b985c <_ZN8SPIClass8transferEh>
   b622e:	f804 0b01 	strb.w	r0, [r4], #1
	for(size_t ii = 0; ii < numBytes; ii++) {
   b6232:	e7f6      	b.n	b6222 <_ZN9LIS3DHSPI8readDataEhPhj+0x24>
	}

	endTransaction();
   b6234:	682b      	ldr	r3, [r5, #0]
   b6236:	4628      	mov	r0, r5
   b6238:	699b      	ldr	r3, [r3, #24]
   b623a:	4798      	blx	r3

	return true;
}
   b623c:	2001      	movs	r0, #1
   b623e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6240 <_ZN9LIS3DHSPI9writeDataEhPKhj>:

bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b6240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6242:	461e      	mov	r6, r3
	beginTransaction();
   b6244:	6803      	ldr	r3, [r0, #0]
   b6246:	695b      	ldr	r3, [r3, #20]
bool LIS3DHSPI::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   b6248:	460f      	mov	r7, r1
   b624a:	4614      	mov	r4, r2
   b624c:	4605      	mov	r5, r0
	beginTransaction();
   b624e:	4798      	blx	r3

	if (numBytes > 1) {
   b6250:	2e01      	cmp	r6, #1
		addr |= SPI_INCREMENT;
   b6252:	bf88      	it	hi
   b6254:	f047 0740 	orrhi.w	r7, r7, #64	; 0x40
	}

	spi.transfer(addr);
   b6258:	68e8      	ldr	r0, [r5, #12]
   b625a:	4639      	mov	r1, r7
   b625c:	f003 fafe 	bl	b985c <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   b6260:	4426      	add	r6, r4
   b6262:	42b4      	cmp	r4, r6
   b6264:	d005      	beq.n	b6272 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x32>
		spi.transfer(buf[ii]);
   b6266:	f814 1b01 	ldrb.w	r1, [r4], #1
   b626a:	68e8      	ldr	r0, [r5, #12]
   b626c:	f003 faf6 	bl	b985c <_ZN8SPIClass8transferEh>
	for(size_t ii = 0; ii < numBytes; ii++) {
   b6270:	e7f7      	b.n	b6262 <_ZN9LIS3DHSPI9writeDataEhPKhj+0x22>
	}

	endTransaction();
   b6272:	682b      	ldr	r3, [r5, #0]
   b6274:	4628      	mov	r0, r5
   b6276:	699b      	ldr	r3, [r3, #24]
   b6278:	4798      	blx	r3

	return true;
}
   b627a:	2001      	movs	r0, #1
   b627c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b627e <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   b627e:	2200      	movs	r2, #0
   b6280:	7002      	strb	r2, [r0, #0]
   b6282:	7042      	strb	r2, [r0, #1]
   b6284:	7082      	strb	r2, [r0, #2]
   b6286:	70c2      	strb	r2, [r0, #3]
   b6288:	7102      	strb	r2, [r0, #4]
   b628a:	7142      	strb	r2, [r0, #5]
   b628c:	7182      	strb	r2, [r0, #6]
   b628e:	71c2      	strb	r2, [r0, #7]
   b6290:	7202      	strb	r2, [r0, #8]
   b6292:	7242      	strb	r2, [r0, #9]
   b6294:	7282      	strb	r2, [r0, #10]
}
   b6296:	4770      	bx	lr

000b6298 <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   b6298:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   b629a:	f041 0107 	orr.w	r1, r1, #7
   b629e:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   b62a0:	7102      	strb	r2, [r0, #4]
   b62a2:	7082      	strb	r2, [r0, #2]
   b62a4:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   b62a6:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   b62a8:	7242      	strb	r2, [r0, #9]
}
   b62aa:	4770      	bx	lr

000b62ac <_ZN6LIS3DHC1Ei>:
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   b62ac:	4a02      	ldr	r2, [pc, #8]	; (b62b8 <_ZN6LIS3DHC1Ei+0xc>)
   b62ae:	e9c0 2100 	strd	r2, r1, [r0]
   b62b2:	2200      	movs	r2, #0
   b62b4:	7202      	strb	r2, [r0, #8]
}
   b62b6:	4770      	bx	lr
   b62b8:	000bd484 	.word	0x000bd484

000b62bc <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   b62bc:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   b62be:	6803      	ldr	r3, [r0, #0]
   b62c0:	aa01      	add	r2, sp, #4
   b62c2:	68dc      	ldr	r4, [r3, #12]
   b62c4:	2301      	movs	r3, #1
   b62c6:	47a0      	blx	r4
}
   b62c8:	f89d 0004 	ldrb.w	r0, [sp, #4]
   b62cc:	b002      	add	sp, #8
   b62ce:	bd10      	pop	{r4, pc}

000b62d0 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   b62d0:	b538      	push	{r3, r4, r5, lr}
   b62d2:	4605      	mov	r5, r0
   b62d4:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   b62d6:	210f      	movs	r1, #15
   b62d8:	4628      	mov	r0, r5
   b62da:	f7ff ffef 	bl	b62bc <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   b62de:	2833      	cmp	r0, #51	; 0x33
			found = true;
   b62e0:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   b62e4:	d004      	beq.n	b62f0 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   b62e6:	f001 f813 	bl	b7310 <delay>
	for(int tries = 0; tries < 10; tries++) {
   b62ea:	3c01      	subs	r4, #1
   b62ec:	d1f3      	bne.n	b62d6 <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   b62ee:	4620      	mov	r0, r4
}
   b62f0:	bd38      	pop	{r3, r4, r5, pc}

000b62f2 <_ZN9LIS3DHSPI9hasDeviceEv>:
bool LIS3DHSPI::hasDevice() {
   b62f2:	b510      	push	{r4, lr}
   b62f4:	4604      	mov	r4, r0
	spi.begin(ss);
   b62f6:	8a01      	ldrh	r1, [r0, #16]
   b62f8:	68c0      	ldr	r0, [r0, #12]
   b62fa:	f003 fa13 	bl	b9724 <_ZN8SPIClass5beginEt>
	return LIS3DH::hasDevice();
   b62fe:	4620      	mov	r0, r4
}
   b6300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LIS3DH::hasDevice();
   b6304:	f7ff bfe4 	b.w	b62d0 <_ZN6LIS3DH9hasDeviceEv>

000b6308 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b6308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b630a:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b630c:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   b630e:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   b6310:	f7ff ffd4 	bl	b62bc <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   b6314:	f000 0008 	and.w	r0, r0, #8
   b6318:	2800      	cmp	r0, #0
   b631a:	bf14      	ite	ne
   b631c:	2601      	movne	r6, #1
   b631e:	2600      	moveq	r6, #0
	if (hasData) {
   b6320:	d00f      	beq.n	b6342 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x3a>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   b6322:	682b      	ldr	r3, [r5, #0]
   b6324:	466a      	mov	r2, sp
   b6326:	68df      	ldr	r7, [r3, #12]
   b6328:	2128      	movs	r1, #40	; 0x28
   b632a:	2306      	movs	r3, #6
   b632c:	4628      	mov	r0, r5
   b632e:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   b6330:	f8bd 3000 	ldrh.w	r3, [sp]
   b6334:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   b6336:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   b633a:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   b633c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   b6340:	80a3      	strh	r3, [r4, #4]
}
   b6342:	4630      	mov	r0, r6
   b6344:	b003      	add	sp, #12
   b6346:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6348 <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   b6348:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   b634a:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   b634c:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   b6350:	691c      	ldr	r4, [r3, #16]
   b6352:	aa01      	add	r2, sp, #4
   b6354:	2301      	movs	r3, #1
   b6356:	47a0      	blx	r4
}
   b6358:	b002      	add	sp, #8
   b635a:	bd10      	pop	{r4, pc}

000b635c <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   b635c:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   b635e:	6803      	ldr	r3, [r0, #0]
   b6360:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   b6362:	4604      	mov	r4, r0
   b6364:	460d      	mov	r5, r1
	if (!hasDevice()) {
   b6366:	4798      	blx	r3
   b6368:	4606      	mov	r6, r0
   b636a:	b930      	cbnz	r0, b637a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   b636c:	f003 ff20 	bl	ba1b0 <_Z16_fetch_usbserialv>
   b6370:	4927      	ldr	r1, [pc, #156]	; (b6410 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   b6372:	f003 f954 	bl	b961e <_ZN5Print7printlnEPKc>
}
   b6376:	4630      	mov	r0, r6
   b6378:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   b637a:	782a      	ldrb	r2, [r5, #0]
   b637c:	2120      	movs	r1, #32
   b637e:	4620      	mov	r0, r4
   b6380:	f7ff ffe2 	bl	b6348 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   b6384:	786a      	ldrb	r2, [r5, #1]
   b6386:	2121      	movs	r1, #33	; 0x21
   b6388:	4620      	mov	r0, r4
   b638a:	f7ff ffdd 	bl	b6348 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   b638e:	78aa      	ldrb	r2, [r5, #2]
   b6390:	2122      	movs	r1, #34	; 0x22
   b6392:	4620      	mov	r0, r4
   b6394:	f7ff ffd8 	bl	b6348 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   b6398:	78ea      	ldrb	r2, [r5, #3]
   b639a:	2123      	movs	r1, #35	; 0x23
   b639c:	4620      	mov	r0, r4
   b639e:	f7ff ffd3 	bl	b6348 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   b63a2:	792a      	ldrb	r2, [r5, #4]
   b63a4:	2124      	movs	r1, #36	; 0x24
   b63a6:	4620      	mov	r0, r4
   b63a8:	f7ff ffce 	bl	b6348 <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   b63ac:	796a      	ldrb	r2, [r5, #5]
   b63ae:	2125      	movs	r1, #37	; 0x25
   b63b0:	4620      	mov	r0, r4
   b63b2:	f7ff ffc9 	bl	b6348 <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   b63b6:	79ab      	ldrb	r3, [r5, #6]
   b63b8:	b11b      	cbz	r3, b63c2 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   b63ba:	2126      	movs	r1, #38	; 0x26
   b63bc:	4620      	mov	r0, r4
   b63be:	f7ff ff7d 	bl	b62bc <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   b63c2:	7aaa      	ldrb	r2, [r5, #10]
   b63c4:	212e      	movs	r1, #46	; 0x2e
   b63c6:	4620      	mov	r0, r4
   b63c8:	f7ff ffbe 	bl	b6348 <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   b63cc:	78ab      	ldrb	r3, [r5, #2]
   b63ce:	065b      	lsls	r3, r3, #25
   b63d0:	d5d1      	bpl.n	b6376 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   b63d2:	79ea      	ldrb	r2, [r5, #7]
   b63d4:	2132      	movs	r1, #50	; 0x32
   b63d6:	4620      	mov	r0, r4
   b63d8:	f7ff ffb6 	bl	b6348 <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   b63dc:	7a2a      	ldrb	r2, [r5, #8]
   b63de:	2133      	movs	r1, #51	; 0x33
   b63e0:	4620      	mov	r0, r4
   b63e2:	f7ff ffb1 	bl	b6348 <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   b63e6:	6863      	ldr	r3, [r4, #4]
   b63e8:	2b00      	cmp	r3, #0
   b63ea:	db0a      	blt.n	b6402 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   b63ec:	7a6a      	ldrb	r2, [r5, #9]
   b63ee:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   b63f0:	4620      	mov	r0, r4
   b63f2:	2130      	movs	r1, #48	; 0x30
   b63f4:	f7ff ffa8 	bl	b6348 <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   b63f8:	2131      	movs	r1, #49	; 0x31
   b63fa:	4620      	mov	r0, r4
   b63fc:	f7ff ff5e 	bl	b62bc <_ZN6LIS3DH13readRegister8Eh>
   b6400:	e7b9      	b.n	b6376 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   b6402:	2200      	movs	r2, #0
   b6404:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   b6406:	2130      	movs	r1, #48	; 0x30
   b6408:	4620      	mov	r0, r4
   b640a:	f7ff ff9d 	bl	b6348 <_ZN6LIS3DH14writeRegister8Ehh>
   b640e:	e7b2      	b.n	b6376 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   b6410:	000bd469 	.word	0x000bd469

000b6414 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   b6414:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   b6418:	b510      	push	{r4, lr}
   b641a:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   b641c:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   b641e:	b113      	cbz	r3, b6426 <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   b6420:	6d88      	ldr	r0, [r1, #88]	; 0x58
   b6422:	f000 fc79 	bl	b6d18 <os_mutex_lock>
#endif
#endif
#endif
        }
   b6426:	4620      	mov	r0, r4
   b6428:	bd10      	pop	{r4, pc}

000b642a <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   b642a:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   b642c:	6803      	ldr	r3, [r0, #0]
   b642e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   b6432:	4604      	mov	r4, r0
            if (mqtt->thread)
   b6434:	b112      	cbz	r2, b643c <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   b6436:	6d98      	ldr	r0, [r3, #88]	; 0x58
   b6438:	f000 fc76 	bl	b6d28 <os_mutex_unlock>
#endif
#endif
#endif
        }
   b643c:	4620      	mov	r0, r4
   b643e:	bd10      	pop	{r4, pc}

000b6440 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(const char* domain, const uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   b6440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6442:	461f      	mov	r7, r3
   b6444:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b6448:	4604      	mov	r4, r0
   b644a:	460d      	mov	r5, r1
   b644c:	4616      	mov	r6, r2
    if (thread) {
   b644e:	b12b      	cbz	r3, b645c <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x1c>
        this->thread = true;
   b6450:	2301      	movs	r3, #1
   b6452:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   b6456:	3058      	adds	r0, #88	; 0x58
   b6458:	f000 fc4e 	bl	b6cf8 <os_mutex_create>
    }
    this->callback = callback;
   b645c:	9b08      	ldr	r3, [sp, #32]
   b645e:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   b6460:	2300      	movs	r3, #0
   b6462:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   b6464:	b106      	cbz	r6, b6468 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x28>
        this->ip = ip;
   b6466:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   b6468:	b125      	cbz	r5, b6474 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x34>
        this->domain = domain;
   b646a:	4629      	mov	r1, r5
   b646c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b6470:	f003 fa9b 	bl	b99aa <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   b6474:	9b06      	ldr	r3, [sp, #24]
   b6476:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b6478:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   b647a:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   b647c:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   b6480:	2bff      	cmp	r3, #255	; 0xff
   b6482:	bfb8      	it	lt
   b6484:	23ff      	movlt	r3, #255	; 0xff
   b6486:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   b648a:	b108      	cbz	r0, b6490 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb+0x50>
      delete[] buffer;
   b648c:	f7fe fb15 	bl	b4aba <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   b6490:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   b6494:	f7fe fb0f 	bl	b4ab6 <_Znaj>
   b6498:	61e0      	str	r0, [r4, #28]
}
   b649a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b649c <_ZN4MQTTC1EPKctPFvPcPhjEb>:
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b649c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b64a0:	4604      	mov	r4, r0
            bool thread) {
   b64a2:	2500      	movs	r5, #0
MQTT::MQTT(const char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   b64a4:	4617      	mov	r7, r2
   b64a6:	4698      	mov	r8, r3
   b64a8:	460e      	mov	r6, r1
            bool thread) {
   b64aa:	f003 fda5 	bl	b9ff8 <_ZN9TCPClientC1Ev>
   b64ae:	490d      	ldr	r1, [pc, #52]	; (b64e4 <_ZN4MQTTC1EPKctPFvPcPhjEb+0x48>)
   b64b0:	61e5      	str	r5, [r4, #28]
   b64b2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   b64b6:	f003 fa22 	bl	b98fe <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b64ba:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   b64be:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b64c0:	e9cd 8302 	strd	r8, r3, [sp, #8]
   b64c4:	22ff      	movs	r2, #255	; 0xff
   b64c6:	230f      	movs	r3, #15
   b64c8:	e9cd 3200 	strd	r3, r2, [sp]
   b64cc:	4620      	mov	r0, r4
            bool thread) {
   b64ce:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   b64d2:	463b      	mov	r3, r7
   b64d4:	462a      	mov	r2, r5
   b64d6:	4631      	mov	r1, r6
   b64d8:	f7ff ffb2 	bl	b6440 <_ZN4MQTT10initializeEPKcPKhtiiPFvPcPhjEb>
}
   b64dc:	4620      	mov	r0, r4
   b64de:	b004      	add	sp, #16
   b64e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b64e4:	000bd6d3 	.word	0x000bd6d3

000b64e8 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   b64e8:	b510      	push	{r4, lr}
   b64ea:	4604      	mov	r4, r0
    while(!_client.available()) {}
   b64ec:	4620      	mov	r0, r4
   b64ee:	f003 fcdf 	bl	b9eb0 <_ZN9TCPClient9availableEv>
   b64f2:	2800      	cmp	r0, #0
   b64f4:	d0fa      	beq.n	b64ec <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   b64f6:	4620      	mov	r0, r4
   b64f8:	f003 fac4 	bl	b9a84 <_ZN9TCPClient4readEv>
}
   b64fc:	b2c0      	uxtb	r0, r0
   b64fe:	bd10      	pop	{r4, pc}

000b6500 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   b6500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6504:	4605      	mov	r5, r0
   b6506:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   b6508:	f7ff ffee 	bl	b64e8 <_ZN4MQTT8readByteEv>
   b650c:	69eb      	ldr	r3, [r5, #28]
   b650e:	7018      	strb	r0, [r3, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   b6510:	69eb      	ldr	r3, [r5, #28]
   b6512:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   b6516:	f04f 0901 	mov.w	r9, #1
   b651a:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   b651e:	2700      	movs	r7, #0
    buffer[len++] = readByte();
   b6520:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   b6522:	4628      	mov	r0, r5
   b6524:	f7ff ffe0 	bl	b64e8 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   b6528:	4626      	mov	r6, r4
   b652a:	69eb      	ldr	r3, [r5, #28]
   b652c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   b652e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   b6532:	fb13 f309 	smulbb	r3, r3, r9
   b6536:	441f      	add	r7, r3
        buffer[len++] = digit;
   b6538:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   b653a:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   b653c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   b653e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   b6540:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   b6544:	d4ed      	bmi.n	b6522 <_ZN4MQTT10readPacketEPh+0x22>
    *lengthLength = len-1;
   b6546:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   b6548:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   b654c:	f888 3000 	strb.w	r3, [r8]
    if (isPublish) {
   b6550:	d11e      	bne.n	b6590 <_ZN4MQTT10readPacketEPh+0x90>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   b6552:	4628      	mov	r0, r5
   b6554:	f7ff ffc8 	bl	b64e8 <_ZN4MQTT8readByteEv>
   b6558:	69eb      	ldr	r3, [r5, #28]
   b655a:	5518      	strb	r0, [r3, r4]
        buffer[len++] = readByte();
   b655c:	4628      	mov	r0, r5
   b655e:	f7ff ffc3 	bl	b64e8 <_ZN4MQTT8readByteEv>
   b6562:	1cf4      	adds	r4, r6, #3
        buffer[len++] = readByte();
   b6564:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   b6566:	b2b6      	uxth	r6, r6
   b6568:	69eb      	ldr	r3, [r5, #28]
   b656a:	b2a4      	uxth	r4, r4
   b656c:	5598      	strb	r0, [r3, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   b656e:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   b6570:	b2b6      	uxth	r6, r6
   b6572:	42be      	cmp	r6, r7
   b6574:	d20e      	bcs.n	b6594 <_ZN4MQTT10readPacketEPh+0x94>
        digit = readByte();
   b6576:	4628      	mov	r0, r5
   b6578:	f7ff ffb6 	bl	b64e8 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   b657c:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   b6580:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   b6582:	bf84      	itt	hi
   b6584:	69eb      	ldrhi	r3, [r5, #28]
   b6586:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   b6588:	3401      	adds	r4, #1
   b658a:	b2a4      	uxth	r4, r4
    for (uint16_t i = start;i<length;i++) {
   b658c:	3601      	adds	r6, #1
   b658e:	e7ef      	b.n	b6570 <_ZN4MQTT10readPacketEPh+0x70>
    uint8_t start = 0;
   b6590:	2600      	movs	r6, #0
   b6592:	e7ed      	b.n	b6570 <_ZN4MQTT10readPacketEPh+0x70>
    }

    if (len > this->maxpacketsize) {
   b6594:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   b6598:	42a3      	cmp	r3, r4
   b659a:	bf2c      	ite	cs
   b659c:	4620      	movcs	r0, r4
   b659e:	2000      	movcc	r0, #0
   b65a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b65a4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b65a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b65a8:	4615      	mov	r5, r2
   b65aa:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   b65ac:	461a      	mov	r2, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   b65ae:	4607      	mov	r7, r0
    uint8_t llen = 0;
   b65b0:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   b65b2:	4696      	mov	lr, r2
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   b65b4:	a802      	add	r0, sp, #8
        digit = len % 128;
   b65b6:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
        if (len > 0) {
   b65ba:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   b65be:	f103 0401 	add.w	r4, r3, #1
   b65c2:	4403      	add	r3, r0
            digit |= 0x80;
   b65c4:	bf88      	it	hi
   b65c6:	f04c 0c80 	orrhi.w	ip, ip, #128	; 0x80
        llen++;
    } while(len > 0);
   b65ca:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   b65ce:	ea4f 12d2 	mov.w	r2, r2, lsr #7
        lenBuf[pos++] = digit;
   b65d2:	b2e4      	uxtb	r4, r4
   b65d4:	f803 cc04 	strb.w	ip, [r3, #-4]
    } while(len > 0);
   b65d8:	d81e      	bhi.n	b6618 <_ZN4MQTT5writeEhPht+0x74>

    buf[4-llen] = header;
   b65da:	f1c4 0304 	rsb	r3, r4, #4
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
   b65de:	f1c4 0005 	rsb	r0, r4, #5
    buf[4-llen] = header;
   b65e2:	54e9      	strb	r1, [r5, r3]
        buf[5-llen+i] = lenBuf[i];
   b65e4:	4622      	mov	r2, r4
   b65e6:	a901      	add	r1, sp, #4
   b65e8:	4428      	add	r0, r5
    buf[4-llen] = header;
   b65ea:	eb05 0803 	add.w	r8, r5, r3
        buf[5-llen+i] = lenBuf[i];
   b65ee:	f004 f915 	bl	ba81c <memcpy>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   b65f2:	1c72      	adds	r2, r6, #1
   b65f4:	4422      	add	r2, r4
   b65f6:	4641      	mov	r1, r8
   b65f8:	4638      	mov	r0, r7
   b65fa:	f003 fa2e 	bl	b9a5a <_ZN9TCPClient5writeEPKhj>
   b65fe:	4605      	mov	r5, r0
   b6600:	f000 fbca 	bl	b6d98 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   b6604:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   b6606:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   b6608:	4432      	add	r2, r6
   b660a:	b2a8      	uxth	r0, r5
}
   b660c:	1a13      	subs	r3, r2, r0
   b660e:	4258      	negs	r0, r3
   b6610:	4158      	adcs	r0, r3
   b6612:	b002      	add	sp, #8
   b6614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lenBuf[pos++] = digit;
   b6618:	4623      	mov	r3, r4
   b661a:	e7ca      	b.n	b65b2 <_ZN4MQTT5writeEhPht+0xe>

000b661c <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   b661c:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   b661e:	b5f0      	push	{r4, r5, r6, r7, lr}
   b6620:	4605      	mov	r5, r0
    pos += 2;
   b6622:	b298      	uxth	r0, r3
   b6624:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   b6626:	5cce      	ldrb	r6, [r1, r3]
   b6628:	b29c      	uxth	r4, r3
   b662a:	b156      	cbz	r6, b6642 <_ZN4MQTT11writeStringEPKcPht+0x26>
   b662c:	f8b5 c054 	ldrh.w	ip, [r5, #84]	; 0x54
   b6630:	4584      	cmp	ip, r0
   b6632:	f103 0701 	add.w	r7, r3, #1
   b6636:	d904      	bls.n	b6642 <_ZN4MQTT11writeStringEPKcPht+0x26>
        buf[pos++] = *idp++;
   b6638:	1c44      	adds	r4, r0, #1
   b663a:	5416      	strb	r6, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   b663c:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   b663e:	b2a0      	uxth	r0, r4
    while (*idp && pos < this->maxpacketsize) {
   b6640:	e7f1      	b.n	b6626 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   b6642:	b299      	uxth	r1, r3
   b6644:	1a41      	subs	r1, r0, r1
   b6646:	440a      	add	r2, r1
   b6648:	0a21      	lsrs	r1, r4, #8
   b664a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   b664e:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   b6652:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6654 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   b6654:	b538      	push	{r3, r4, r5, lr}
   b6656:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   b6658:	f003 fb4c 	bl	b9cf4 <_ZN9TCPClient9connectedEv>
   b665c:	2800      	cmp	r0, #0
   b665e:	bf14      	ite	ne
   b6660:	2501      	movne	r5, #1
   b6662:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   b6664:	d102      	bne.n	b666c <_ZN4MQTT11isConnectedEv+0x18>
   b6666:	4620      	mov	r0, r4
   b6668:	f003 fc7c 	bl	b9f64 <_ZN9TCPClient4stopEv>
    return rc;
}
   b666c:	4628      	mov	r0, r5
   b666e:	bd38      	pop	{r3, r4, r5, pc}

000b6670 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   b6670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6674:	b088      	sub	sp, #32
   b6676:	4604      	mov	r4, r0
   b6678:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   b667c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b6680:	4689      	mov	r9, r1
   b6682:	4617      	mov	r7, r2
   b6684:	461e      	mov	r6, r3
    if (!isConnected()) {
   b6686:	f7ff ffe5 	bl	b6654 <_ZN4MQTT11isConnectedEv>
   b668a:	4605      	mov	r5, r0
   b668c:	2800      	cmp	r0, #0
   b668e:	f040 80cd 	bne.w	b682c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>
        MutexLocker lock(this);
   b6692:	4621      	mov	r1, r4
   b6694:	a801      	add	r0, sp, #4
   b6696:	f7ff febd 	bl	b6414 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   b669a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b669c:	2900      	cmp	r1, #0
   b669e:	f040 8088 	bne.w	b67b2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x142>
            result = _client.connect(this->domain.c_str(), this->port);
   b66a2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b66a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   b66a8:	462b      	mov	r3, r5
   b66aa:	4620      	mov	r0, r4
   b66ac:	f003 faa4 	bl	b9bf8 <_ZN9TCPClient7connectEPKctm>
        if (result) {
   b66b0:	2800      	cmp	r0, #0
   b66b2:	d07a      	beq.n	b67aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
            nextMsgId = 1;
   b66b4:	2301      	movs	r3, #1
   b66b6:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   b66b8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b66bc:	69e2      	ldr	r2, [r4, #28]
            if (version == MQTT_V311) {
   b66be:	2b04      	cmp	r3, #4
   b66c0:	4b5b      	ldr	r3, [pc, #364]	; (b6830 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   b66c2:	f040 8081 	bne.w	b67c8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x158>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   b66c6:	6818      	ldr	r0, [r3, #0]
   b66c8:	8899      	ldrh	r1, [r3, #4]
   b66ca:	799b      	ldrb	r3, [r3, #6]
   b66cc:	f8ad 100c 	strh.w	r1, [sp, #12]
   b66d0:	f88d 300e 	strb.w	r3, [sp, #14]
   b66d4:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   b66d6:	f8c2 0005 	str.w	r0, [r2, #5]
   b66da:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b66de:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b66e2:	f8a2 1009 	strh.w	r1, [r2, #9]
   b66e6:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   b66e8:	230c      	movs	r3, #12
            if (willTopic) {
   b66ea:	f1b8 0f00 	cmp.w	r8, #0
   b66ee:	f000 8081 	beq.w	b67f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   b66f2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   b66f6:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   b66fa:	0140      	lsls	r0, r0, #5
   b66fc:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   b6700:	f040 0006 	orr.w	r0, r0, #6
   b6704:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   b6706:	f1ba 0f00 	cmp.w	sl, #0
   b670a:	d101      	bne.n	b6710 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa0>
              v = v&0xfd;
   b670c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   b6710:	b11f      	cbz	r7, b671a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
                if(pass != NULL) {
   b6712:	2e00      	cmp	r6, #0
   b6714:	d170      	bne.n	b67f8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x188>
                v = v|0x80;
   b6716:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   b671a:	69e2      	ldr	r2, [r4, #28]
   b671c:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   b671e:	6d22      	ldr	r2, [r4, #80]	; 0x50
   b6720:	69e1      	ldr	r1, [r4, #28]
   b6722:	1c58      	adds	r0, r3, #1
   b6724:	1212      	asrs	r2, r2, #8
   b6726:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   b6728:	1c9a      	adds	r2, r3, #2
   b672a:	69e1      	ldr	r1, [r4, #28]
   b672c:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b672e:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   b6730:	3303      	adds	r3, #3
   b6732:	69e2      	ldr	r2, [r4, #28]
   b6734:	4649      	mov	r1, r9
   b6736:	4620      	mov	r0, r4
   b6738:	f7ff ff70 	bl	b661c <_ZN4MQTT11writeStringEPKcPht>
   b673c:	4603      	mov	r3, r0
            if (willTopic) {
   b673e:	f1b8 0f00 	cmp.w	r8, #0
   b6742:	d00b      	beq.n	b675c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xec>
                length = writeString(willTopic, buffer, length);
   b6744:	69e2      	ldr	r2, [r4, #28]
   b6746:	4641      	mov	r1, r8
   b6748:	4620      	mov	r0, r4
   b674a:	f7ff ff67 	bl	b661c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   b674e:	69e2      	ldr	r2, [r4, #28]
   b6750:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   b6752:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   b6754:	4620      	mov	r0, r4
   b6756:	f7ff ff61 	bl	b661c <_ZN4MQTT11writeStringEPKcPht>
   b675a:	4603      	mov	r3, r0
            if(user != NULL) {
   b675c:	b167      	cbz	r7, b6778 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                length = writeString(user,buffer,length);
   b675e:	69e2      	ldr	r2, [r4, #28]
   b6760:	4639      	mov	r1, r7
   b6762:	4620      	mov	r0, r4
   b6764:	f7ff ff5a 	bl	b661c <_ZN4MQTT11writeStringEPKcPht>
   b6768:	4603      	mov	r3, r0
                if(pass != NULL) {
   b676a:	b12e      	cbz	r6, b6778 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x108>
                    length = writeString(pass,buffer,length);
   b676c:	69e2      	ldr	r2, [r4, #28]
   b676e:	4631      	mov	r1, r6
   b6770:	4620      	mov	r0, r4
   b6772:	f7ff ff53 	bl	b661c <_ZN4MQTT11writeStringEPKcPht>
   b6776:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   b6778:	3b05      	subs	r3, #5
   b677a:	69e2      	ldr	r2, [r4, #28]
   b677c:	b29b      	uxth	r3, r3
   b677e:	2110      	movs	r1, #16
   b6780:	4620      	mov	r0, r4
   b6782:	f7ff ff0f 	bl	b65a4 <_ZN4MQTT5writeEhPht>
   b6786:	f000 fb07 	bl	b6d98 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   b678a:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   b678e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   b6792:	4620      	mov	r0, r4
   b6794:	f003 fb8c 	bl	b9eb0 <_ZN9TCPClient9availableEv>
   b6798:	bb88      	cbnz	r0, b67fe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18e>
   b679a:	f000 fafd 	bl	b6d98 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   b679e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b67a0:	1ac0      	subs	r0, r0, r3
   b67a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b67a4:	4373      	muls	r3, r6
   b67a6:	4298      	cmp	r0, r3
   b67a8:	d9f3      	bls.n	b6792 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x122>
        _client.stop();
   b67aa:	4620      	mov	r0, r4
   b67ac:	f003 fbda 	bl	b9f64 <_ZN9TCPClient4stopEv>
   b67b0:	e035      	b.n	b681e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1ae>
            result = _client.connect(this->ip, this->port);
   b67b2:	a802      	add	r0, sp, #8
   b67b4:	f001 fca4 	bl	b8100 <_ZN9IPAddressC1EPKh>
   b67b8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   b67bc:	462b      	mov	r3, r5
   b67be:	a902      	add	r1, sp, #8
   b67c0:	4620      	mov	r0, r4
   b67c2:	f003 faf9 	bl	b9db8 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b67c6:	e773      	b.n	b66b0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   b67c8:	f8d3 0007 	ldr.w	r0, [r3, #7]
   b67cc:	f8d3 100b 	ldr.w	r1, [r3, #11]
   b67d0:	7bdb      	ldrb	r3, [r3, #15]
   b67d2:	f10d 0c08 	add.w	ip, sp, #8
   b67d6:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b67da:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   b67de:	ab02      	add	r3, sp, #8
   b67e0:	cb03      	ldmia	r3!, {r0, r1}
   b67e2:	f8c2 0005 	str.w	r0, [r2, #5]
   b67e6:	f8c2 1009 	str.w	r1, [r2, #9]
   b67ea:	f89c 3000 	ldrb.w	r3, [ip]
   b67ee:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   b67f0:	230e      	movs	r3, #14
   b67f2:	e77a      	b.n	b66ea <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   b67f4:	2002      	movs	r0, #2
   b67f6:	e786      	b.n	b6706 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x96>
                    v = v|(0x80>>1);
   b67f8:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   b67fc:	e78d      	b.n	b671a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            uint16_t len = readPacket(&llen);
   b67fe:	a902      	add	r1, sp, #8
   b6800:	4620      	mov	r0, r4
   b6802:	f7ff fe7d 	bl	b6500 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   b6806:	2804      	cmp	r0, #4
   b6808:	d1cf      	bne.n	b67aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
                if (buffer[3] == CONN_ACCEPT) {
   b680a:	69e3      	ldr	r3, [r4, #28]
   b680c:	78de      	ldrb	r6, [r3, #3]
   b680e:	2e00      	cmp	r6, #0
   b6810:	d1cb      	bne.n	b67aa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13a>
   b6812:	f000 fac1 	bl	b6d98 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   b6816:	2501      	movs	r5, #1
                    lastInActivity = millis();
   b6818:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   b681a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   b681e:	a801      	add	r0, sp, #4
   b6820:	f7ff fe03 	bl	b642a <_ZN4MQTT11MutexLockerD1Ev>
}
   b6824:	4628      	mov	r0, r5
   b6826:	b008      	add	sp, #32
   b6828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   b682c:	2500      	movs	r5, #0
   b682e:	e7f9      	b.n	b6824 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b4>
   b6830:	000bc894 	.word	0x000bc894

000b6834 <_ZN4MQTT7connectEPKc>:
bool MQTT::connect(const char *id) {
   b6834:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   b6836:	2301      	movs	r3, #1
   b6838:	2204      	movs	r2, #4
   b683a:	e9cd 3204 	strd	r3, r2, [sp, #16]
   b683e:	2300      	movs	r3, #0
   b6840:	e9cd 3302 	strd	r3, r3, [sp, #8]
   b6844:	e9cd 3300 	strd	r3, r3, [sp]
   b6848:	461a      	mov	r2, r3
   b684a:	f7ff ff11 	bl	b6670 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   b684e:	b007      	add	sp, #28
   b6850:	f85d fb04 	ldr.w	pc, [sp], #4

000b6854 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   b6854:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6856:	4604      	mov	r4, r0
   b6858:	460e      	mov	r6, r1
    if (isConnected()) {
   b685a:	f7ff fefb 	bl	b6654 <_ZN4MQTT11isConnectedEv>
   b685e:	4605      	mov	r5, r0
   b6860:	b1c8      	cbz	r0, b6896 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   b6862:	4621      	mov	r1, r4
   b6864:	a801      	add	r0, sp, #4
   b6866:	f7ff fdd5 	bl	b6414 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   b686a:	69e3      	ldr	r3, [r4, #28]
   b686c:	2262      	movs	r2, #98	; 0x62
   b686e:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b6870:	69e3      	ldr	r3, [r4, #28]
   b6872:	2202      	movs	r2, #2
   b6874:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b6876:	69e3      	ldr	r3, [r4, #28]
   b6878:	0a32      	lsrs	r2, r6, #8
   b687a:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b687c:	69e3      	ldr	r3, [r4, #28]
   b687e:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b6880:	69e1      	ldr	r1, [r4, #28]
   b6882:	2204      	movs	r2, #4
   b6884:	4620      	mov	r0, r4
   b6886:	f003 f8e8 	bl	b9a5a <_ZN9TCPClient5writeEPKhj>
   b688a:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b688c:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b688e:	bf18      	it	ne
   b6890:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b6892:	f7ff fdca 	bl	b642a <_ZN4MQTT11MutexLockerD1Ev>
}
   b6896:	4628      	mov	r0, r5
   b6898:	b002      	add	sp, #8
   b689a:	bd70      	pop	{r4, r5, r6, pc}

000b689c <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   b689c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b689e:	4604      	mov	r4, r0
   b68a0:	460e      	mov	r6, r1
    if (isConnected()) {
   b68a2:	f7ff fed7 	bl	b6654 <_ZN4MQTT11isConnectedEv>
   b68a6:	4605      	mov	r5, r0
   b68a8:	b1c8      	cbz	r0, b68de <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   b68aa:	4621      	mov	r1, r4
   b68ac:	a801      	add	r0, sp, #4
   b68ae:	f7ff fdb1 	bl	b6414 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   b68b2:	69e3      	ldr	r3, [r4, #28]
   b68b4:	2272      	movs	r2, #114	; 0x72
   b68b6:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   b68b8:	69e3      	ldr	r3, [r4, #28]
   b68ba:	2202      	movs	r2, #2
   b68bc:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   b68be:	69e3      	ldr	r3, [r4, #28]
   b68c0:	0a32      	lsrs	r2, r6, #8
   b68c2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   b68c4:	69e3      	ldr	r3, [r4, #28]
   b68c6:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   b68c8:	69e1      	ldr	r1, [r4, #28]
   b68ca:	2204      	movs	r2, #4
   b68cc:	4620      	mov	r0, r4
   b68ce:	f003 f8c4 	bl	b9a5a <_ZN9TCPClient5writeEPKhj>
   b68d2:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   b68d4:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   b68d6:	bf18      	it	ne
   b68d8:	2501      	movne	r5, #1
        MutexLocker lock(this);
   b68da:	f7ff fda6 	bl	b642a <_ZN4MQTT11MutexLockerD1Ev>
}
   b68de:	4628      	mov	r0, r5
   b68e0:	b002      	add	sp, #8
   b68e2:	bd70      	pop	{r4, r5, r6, pc}

000b68e4 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   b68e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b68e8:	ed2d 8b02 	vpush	{d8}
   b68ec:	b087      	sub	sp, #28
   b68ee:	af00      	add	r7, sp, #0
   b68f0:	4604      	mov	r4, r0
    if (isConnected()) {
   b68f2:	f7ff feaf 	bl	b6654 <_ZN4MQTT11isConnectedEv>
   b68f6:	4681      	mov	r9, r0
   b68f8:	b1f8      	cbz	r0, b693a <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   b68fa:	4621      	mov	r1, r4
   b68fc:	f107 0014 	add.w	r0, r7, #20
   b6900:	f7ff fd88 	bl	b6414 <_ZN4MQTT11MutexLockerC1EPS_>
   b6904:	f000 fa48 	bl	b6d98 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   b6908:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b690a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b690e:	4353      	muls	r3, r2
   b6910:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   b6912:	1a82      	subs	r2, r0, r2
   b6914:	429a      	cmp	r2, r3
   b6916:	4606      	mov	r6, r0
   b6918:	d803      	bhi.n	b6922 <_ZN4MQTT4loopEv+0x3e>
   b691a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   b691c:	1a82      	subs	r2, r0, r2
   b691e:	4293      	cmp	r3, r2
   b6920:	d221      	bcs.n	b6966 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   b6922:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   b6926:	b17b      	cbz	r3, b6948 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   b6928:	4620      	mov	r0, r4
   b692a:	f003 fb1b 	bl	b9f64 <_ZN9TCPClient4stopEv>
                return false;
   b692e:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   b6932:	f107 0014 	add.w	r0, r7, #20
   b6936:	f7ff fd78 	bl	b642a <_ZN4MQTT11MutexLockerD1Ev>
}
   b693a:	4648      	mov	r0, r9
   b693c:	371c      	adds	r7, #28
   b693e:	46bd      	mov	sp, r7
   b6940:	ecbd 8b02 	vpop	{d8}
   b6944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   b6948:	69e2      	ldr	r2, [r4, #28]
   b694a:	21c0      	movs	r1, #192	; 0xc0
   b694c:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   b694e:	69e2      	ldr	r2, [r4, #28]
   b6950:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   b6952:	69e1      	ldr	r1, [r4, #28]
   b6954:	2202      	movs	r2, #2
   b6956:	4620      	mov	r0, r4
   b6958:	f003 f87f 	bl	b9a5a <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   b695c:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   b6960:	2301      	movs	r3, #1
   b6962:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   b6966:	4620      	mov	r0, r4
   b6968:	f003 faa2 	bl	b9eb0 <_ZN9TCPClient9availableEv>
   b696c:	2800      	cmp	r0, #0
   b696e:	d0e0      	beq.n	b6932 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   b6970:	f107 0113 	add.w	r1, r7, #19
   b6974:	4620      	mov	r0, r4
   b6976:	f7ff fdc3 	bl	b6500 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   b697a:	4683      	mov	fp, r0
   b697c:	2800      	cmp	r0, #0
   b697e:	d0d8      	beq.n	b6932 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   b6980:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   b6982:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   b6984:	7819      	ldrb	r1, [r3, #0]
   b6986:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   b698a:	2a30      	cmp	r2, #48	; 0x30
   b698c:	d17f      	bne.n	b6a8e <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   b698e:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   b6992:	f1ba 0f00 	cmp.w	sl, #0
   b6996:	d0cc      	beq.n	b6932 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b6998:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   b699c:	466a      	mov	r2, sp
   b699e:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   b69a2:	eb03 020c 	add.w	r2, r3, ip
   b69a6:	7851      	ldrb	r1, [r2, #1]
   b69a8:	7895      	ldrb	r5, [r2, #2]
   b69aa:	eb05 2501 	add.w	r5, r5, r1, lsl #8
   b69ae:	b2ad      	uxth	r5, r5
                        char topic[tl+1];
   b69b0:	f105 0208 	add.w	r2, r5, #8
   b69b4:	4669      	mov	r1, sp
   b69b6:	08d2      	lsrs	r2, r2, #3
   b69b8:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   b69bc:	4695      	mov	sp, r2
   b69be:	f10c 0203 	add.w	r2, ip, #3
   b69c2:	60fa      	str	r2, [r7, #12]
   b69c4:	eb03 0e02 	add.w	lr, r3, r2
   b69c8:	eb0d 0205 	add.w	r2, sp, r5
   b69cc:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   b69ce:	f8c7 d008 	str.w	sp, [r7, #8]
   b69d2:	607a      	str	r2, [r7, #4]
   b69d4:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   b69d8:	428a      	cmp	r2, r1
   b69da:	d006      	beq.n	b69ea <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   b69dc:	460a      	mov	r2, r1
   b69de:	f81e 8b01 	ldrb.w	r8, [lr], #1
   b69e2:	f802 8b01 	strb.w	r8, [r2], #1
   b69e6:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   b69e8:	e7f4      	b.n	b69d4 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   b69ea:	2200      	movs	r2, #0
   b69ec:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b69ee:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b69f2:	68f9      	ldr	r1, [r7, #12]
   b69f4:	f008 0806 	and.w	r8, r8, #6
                            callback(topic,payload,len-llen-3-tl-2);
   b69f8:	ebab 020c 	sub.w	r2, fp, ip
   b69fc:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b69fe:	f1b8 0f02 	cmp.w	r8, #2
                            callback(topic,payload,len-llen-3-tl-2);
   b6a02:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6a06:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   b6a08:	d125      	bne.n	b6a56 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6a0a:	f813 e001 	ldrb.w	lr, [r3, r1]
   b6a0e:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   b6a10:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6a12:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   b6a16:	f10c 0105 	add.w	r1, ip, #5
   b6a1a:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   b6a1c:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6a1e:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   b6a22:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   b6a24:	69e3      	ldr	r3, [r4, #28]
   b6a26:	2240      	movs	r2, #64	; 0x40
   b6a28:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   b6a2a:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   b6a2c:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   b6a30:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   b6a34:	69e3      	ldr	r3, [r4, #28]
   b6a36:	ea4f 221b 	mov.w	r2, fp, lsr #8
   b6a3a:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   b6a3c:	69e3      	ldr	r3, [r4, #28]
   b6a3e:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   b6a42:	69e1      	ldr	r1, [r4, #28]
   b6a44:	2204      	movs	r2, #4
   b6a46:	4620      	mov	r0, r4
   b6a48:	f003 f807 	bl	b9a5a <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   b6a4c:	6266      	str	r6, [r4, #36]	; 0x24
   b6a4e:	ee18 3a10 	vmov	r3, s16
   b6a52:	469d      	mov	sp, r3
   b6a54:	e76d      	b.n	b6932 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   b6a56:	f1b8 0f04 	cmp.w	r8, #4
   b6a5a:	d115      	bne.n	b6a88 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a5c:	f813 e001 	ldrb.w	lr, [r3, r1]
   b6a60:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6a62:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a64:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   b6a68:	f10c 0105 	add.w	r1, ip, #5
   b6a6c:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6a6e:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a70:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   b6a74:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   b6a76:	69e3      	ldr	r3, [r4, #28]
   b6a78:	2250      	movs	r2, #80	; 0x50
   b6a7a:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   b6a7c:	69e3      	ldr	r3, [r4, #28]
   b6a7e:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   b6a80:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   b6a84:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   b6a86:	e7d5      	b.n	b6a34 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   b6a88:	4419      	add	r1, r3
   b6a8a:	47d0      	blx	sl
   b6a8c:	e7df      	b.n	b6a4e <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   b6a8e:	2a50      	cmp	r2, #80	; 0x50
   b6a90:	d108      	bne.n	b6aa4 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   b6a92:	789a      	ldrb	r2, [r3, #2]
   b6a94:	78d9      	ldrb	r1, [r3, #3]
   b6a96:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   b6a9a:	b289      	uxth	r1, r1
   b6a9c:	4620      	mov	r0, r4
   b6a9e:	f7ff fed9 	bl	b6854 <_ZN4MQTT14publishReleaseEt>
   b6aa2:	e746      	b.n	b6932 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   b6aa4:	2a40      	cmp	r2, #64	; 0x40
   b6aa6:	d112      	bne.n	b6ace <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   b6aa8:	6b62      	ldr	r2, [r4, #52]	; 0x34
   b6aaa:	2a00      	cmp	r2, #0
   b6aac:	f43f af41 	beq.w	b6932 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   b6ab0:	f1bb 0f04 	cmp.w	fp, #4
   b6ab4:	f47f af3d 	bne.w	b6932 <_ZN4MQTT4loopEv+0x4e>
   b6ab8:	f011 0f06 	tst.w	r1, #6
   b6abc:	f47f af39 	bne.w	b6932 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   b6ac0:	7899      	ldrb	r1, [r3, #2]
   b6ac2:	78d8      	ldrb	r0, [r3, #3]
   b6ac4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   b6ac8:	b280      	uxth	r0, r0
   b6aca:	4790      	blx	r2
   b6acc:	e731      	b.n	b6932 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   b6ace:	2a60      	cmp	r2, #96	; 0x60
   b6ad0:	d108      	bne.n	b6ae4 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   b6ad2:	789a      	ldrb	r2, [r3, #2]
   b6ad4:	78d9      	ldrb	r1, [r3, #3]
   b6ad6:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   b6ada:	b289      	uxth	r1, r1
   b6adc:	4620      	mov	r0, r4
   b6ade:	f7ff fedd 	bl	b689c <_ZN4MQTT15publishCompleteEt>
   b6ae2:	e726      	b.n	b6932 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   b6ae4:	2a70      	cmp	r2, #112	; 0x70
   b6ae6:	d0df      	beq.n	b6aa8 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   b6ae8:	2a90      	cmp	r2, #144	; 0x90
   b6aea:	f43f af22 	beq.w	b6932 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   b6aee:	2ac0      	cmp	r2, #192	; 0xc0
   b6af0:	d10a      	bne.n	b6b08 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   b6af2:	22d0      	movs	r2, #208	; 0xd0
   b6af4:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   b6af6:	69e3      	ldr	r3, [r4, #28]
   b6af8:	2200      	movs	r2, #0
   b6afa:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   b6afc:	69e1      	ldr	r1, [r4, #28]
   b6afe:	2202      	movs	r2, #2
   b6b00:	4620      	mov	r0, r4
   b6b02:	f002 ffaa 	bl	b9a5a <_ZN9TCPClient5writeEPKhj>
   b6b06:	e714      	b.n	b6932 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   b6b08:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   b6b0a:	bf04      	itt	eq
   b6b0c:	2300      	moveq	r3, #0
   b6b0e:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   b6b12:	e70e      	b.n	b6932 <_ZN4MQTT4loopEv+0x4e>

000b6b14 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:
bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   b6b14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6b16:	4604      	mov	r4, r0
   b6b18:	460f      	mov	r7, r1
   b6b1a:	4616      	mov	r6, r2
    if (isConnected()) {
   b6b1c:	f7ff fd9a 	bl	b6654 <_ZN4MQTT11isConnectedEv>
   b6b20:	4605      	mov	r5, r0
   b6b22:	b310      	cbz	r0, b6b6a <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x56>
        MutexLocker lock(this);
   b6b24:	4621      	mov	r1, r4
   b6b26:	a801      	add	r0, sp, #4
   b6b28:	f7ff fc74 	bl	b6414 <_ZN4MQTT11MutexLockerC1EPS_>
        nextMsgId++;
   b6b2c:	8c23      	ldrh	r3, [r4, #32]
   b6b2e:	3301      	adds	r3, #1
   b6b30:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   b6b32:	b1eb      	cbz	r3, b6b70 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x5c>
            nextMsgId = 1;
   b6b34:	8423      	strh	r3, [r4, #32]
        buffer[length++] = (nextMsgId >> 8);
   b6b36:	8c23      	ldrh	r3, [r4, #32]
   b6b38:	69e2      	ldr	r2, [r4, #28]
   b6b3a:	0a1b      	lsrs	r3, r3, #8
   b6b3c:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   b6b3e:	69e3      	ldr	r3, [r4, #28]
   b6b40:	8c22      	ldrh	r2, [r4, #32]
   b6b42:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   b6b44:	69e2      	ldr	r2, [r4, #28]
   b6b46:	2307      	movs	r3, #7
   b6b48:	4639      	mov	r1, r7
   b6b4a:	4620      	mov	r0, r4
   b6b4c:	f7ff fd66 	bl	b661c <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   b6b50:	69e3      	ldr	r3, [r4, #28]
   b6b52:	541e      	strb	r6, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   b6b54:	3804      	subs	r0, #4
   b6b56:	b283      	uxth	r3, r0
   b6b58:	69e2      	ldr	r2, [r4, #28]
   b6b5a:	2182      	movs	r1, #130	; 0x82
   b6b5c:	4620      	mov	r0, r4
   b6b5e:	f7ff fd21 	bl	b65a4 <_ZN4MQTT5writeEhPht>
   b6b62:	4605      	mov	r5, r0
        MutexLocker lock(this);
   b6b64:	a801      	add	r0, sp, #4
   b6b66:	f7ff fc60 	bl	b642a <_ZN4MQTT11MutexLockerD1Ev>
}
   b6b6a:	4628      	mov	r0, r5
   b6b6c:	b003      	add	sp, #12
   b6b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            nextMsgId = 1;
   b6b70:	2301      	movs	r3, #1
   b6b72:	e7df      	b.n	b6b34 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x20>

000b6b74 <_ZN4MQTT9subscribeEPKc>:
    return subscribe(topic, QOS0);
   b6b74:	2200      	movs	r2, #0
   b6b76:	f7ff bfcd 	b.w	b6b14 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>
	...

000b6b7c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b6b7c:	b510      	push	{r4, lr}
   b6b7e:	4b06      	ldr	r3, [pc, #24]	; (b6b98 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6b80:	6003      	str	r3, [r0, #0]
   b6b82:	4604      	mov	r4, r0
	if (mutex) {
   b6b84:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b6b86:	b108      	cbz	r0, b6b8c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b6b88:	f000 f8be 	bl	b6d08 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b6b8c:	4620      	mov	r0, r4
   b6b8e:	f7fe fe4b 	bl	b5828 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6b92:	4620      	mov	r0, r4
   b6b94:	bd10      	pop	{r4, pc}
   b6b96:	bf00      	nop
   b6b98:	000bd4c4 	.word	0x000bd4c4

000b6b9c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b6b9c:	b510      	push	{r4, lr}
   b6b9e:	4604      	mov	r4, r0
}
   b6ba0:	f7ff ffec 	bl	b6b7c <_ZN16OledWingAdafruitD1Ev>
   b6ba4:	4620      	mov	r0, r4
   b6ba6:	2170      	movs	r1, #112	; 0x70
   b6ba8:	f7fd ff89 	bl	b4abe <_ZdlPvj>
   b6bac:	4620      	mov	r0, r4
   b6bae:	bd10      	pop	{r4, pc}

000b6bb0 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6bb0:	b530      	push	{r4, r5, lr}
   b6bb2:	b085      	sub	sp, #20
   b6bb4:	4604      	mov	r4, r0
   b6bb6:	460d      	mov	r5, r1
   b6bb8:	f003 fc90 	bl	ba4dc <_Z19__fetch_global_Wirev>
   b6bbc:	4a10      	ldr	r2, [pc, #64]	; (b6c00 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b6bbe:	4911      	ldr	r1, [pc, #68]	; (b6c04 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6bc0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6bc8:	2180      	movs	r1, #128	; 0x80
   b6bca:	4603      	mov	r3, r0
   b6bcc:	9200      	str	r2, [sp, #0]
   b6bce:	4620      	mov	r0, r4
   b6bd0:	2220      	movs	r2, #32
   b6bd2:	f7fe fea1 	bl	b5918 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6bd6:	4b0c      	ldr	r3, [pc, #48]	; (b6c08 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6bd8:	6023      	str	r3, [r4, #0]
   b6bda:	2300      	movs	r3, #0
   b6bdc:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6be0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6be4:	f7ff fa9a 	bl	b611c <_ZN8DebounceC1Ev>
   b6be8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6bec:	f7ff fa96 	bl	b611c <_ZN8DebounceC1Ev>
   b6bf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6bf4:	f7ff fa92 	bl	b611c <_ZN8DebounceC1Ev>
}
   b6bf8:	4620      	mov	r0, r4
   b6bfa:	b005      	add	sp, #20
   b6bfc:	bd30      	pop	{r4, r5, pc}
   b6bfe:	bf00      	nop
   b6c00:	00061a80 	.word	0x00061a80
   b6c04:	000186a0 	.word	0x000186a0
   b6c08:	000bd4c4 	.word	0x000bd4c4

000b6c0c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b6c0c:	b513      	push	{r0, r1, r4, lr}
   b6c0e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b6c10:	3050      	adds	r0, #80	; 0x50
   b6c12:	f000 f871 	bl	b6cf8 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b6c16:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6c18:	07d9      	lsls	r1, r3, #31
   b6c1a:	d505      	bpl.n	b6c28 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b6c1c:	2202      	movs	r2, #2
   b6c1e:	2104      	movs	r1, #4
   b6c20:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6c24:	f7ff fa8e 	bl	b6144 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b6c28:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6c2a:	079a      	lsls	r2, r3, #30
   b6c2c:	d505      	bpl.n	b6c3a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b6c2e:	2200      	movs	r2, #0
   b6c30:	2103      	movs	r1, #3
   b6c32:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6c36:	f7ff fa85 	bl	b6144 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b6c3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6c3c:	075b      	lsls	r3, r3, #29
   b6c3e:	d505      	bpl.n	b6c4c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b6c40:	2202      	movs	r2, #2
   b6c42:	4611      	mov	r1, r2
   b6c44:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6c48:	f7ff fa7c 	bl	b6144 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b6c4c:	2301      	movs	r3, #1
   b6c4e:	9300      	str	r3, [sp, #0]
   b6c50:	223c      	movs	r2, #60	; 0x3c
   b6c52:	2102      	movs	r1, #2
   b6c54:	4620      	mov	r0, r4
   b6c56:	f7fe ff67 	bl	b5b28 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b6c5a:	b002      	add	sp, #8
   b6c5c:	bd10      	pop	{r4, pc}

000b6c5e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b6c5e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b6c60:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b6c62:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b6c64:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b6c66:	d502      	bpl.n	b6c6e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b6c68:	3058      	adds	r0, #88	; 0x58
   b6c6a:	f7ff fa78 	bl	b615e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b6c6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6c70:	079a      	lsls	r2, r3, #30
   b6c72:	d503      	bpl.n	b6c7c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b6c74:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6c78:	f7ff fa71 	bl	b615e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b6c7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6c7e:	075b      	lsls	r3, r3, #29
   b6c80:	d505      	bpl.n	b6c8e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b6c82:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b6c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b6c8a:	f7ff ba68 	b.w	b615e <_ZN8Debounce6updateEv>
}
   b6c8e:	bd10      	pop	{r4, pc}

000b6c90 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6c90:	b508      	push	{r3, lr}
   b6c92:	4b02      	ldr	r3, [pc, #8]	; (b6c9c <hal_ble_stack_init+0xc>)
   b6c94:	681b      	ldr	r3, [r3, #0]
   b6c96:	689b      	ldr	r3, [r3, #8]
   b6c98:	9301      	str	r3, [sp, #4]
   b6c9a:	bd08      	pop	{r3, pc}
   b6c9c:	00030278 	.word	0x00030278

000b6ca0 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b6ca0:	b508      	push	{r3, lr}
   b6ca2:	4b02      	ldr	r3, [pc, #8]	; (b6cac <hal_ble_gap_set_advertising_data+0xc>)
   b6ca4:	681b      	ldr	r3, [r3, #0]
   b6ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b6ca8:	9301      	str	r3, [sp, #4]
   b6caa:	bd08      	pop	{r3, pc}
   b6cac:	00030278 	.word	0x00030278

000b6cb0 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b6cb0:	b508      	push	{r3, lr}
   b6cb2:	4b02      	ldr	r3, [pc, #8]	; (b6cbc <hal_ble_gap_set_scan_response_data+0xc>)
   b6cb4:	681b      	ldr	r3, [r3, #0]
   b6cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6cb8:	9301      	str	r3, [sp, #4]
   b6cba:	bd08      	pop	{r3, pc}
   b6cbc:	00030278 	.word	0x00030278

000b6cc0 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b6cc0:	b508      	push	{r3, lr}
   b6cc2:	4b02      	ldr	r3, [pc, #8]	; (b6ccc <hal_ble_gap_start_advertising+0xc>)
   b6cc4:	681b      	ldr	r3, [r3, #0]
   b6cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b6cc8:	9301      	str	r3, [sp, #4]
   b6cca:	bd08      	pop	{r3, pc}
   b6ccc:	00030278 	.word	0x00030278

000b6cd0 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6cd0:	b508      	push	{r3, lr}
   b6cd2:	4b03      	ldr	r3, [pc, #12]	; (b6ce0 <hal_ble_gap_disconnect+0x10>)
   b6cd4:	681b      	ldr	r3, [r3, #0]
   b6cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6cda:	9301      	str	r3, [sp, #4]
   b6cdc:	bd08      	pop	{r3, pc}
   b6cde:	0000      	.short	0x0000
   b6ce0:	00030278 	.word	0x00030278

000b6ce4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6ce4:	b508      	push	{r3, lr}
   b6ce6:	4b03      	ldr	r3, [pc, #12]	; (b6cf4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6ce8:	681b      	ldr	r3, [r3, #0]
   b6cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6cee:	9301      	str	r3, [sp, #4]
   b6cf0:	bd08      	pop	{r3, pc}
   b6cf2:	0000      	.short	0x0000
   b6cf4:	00030278 	.word	0x00030278

000b6cf8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6cf8:	b508      	push	{r3, lr}
   b6cfa:	4b02      	ldr	r3, [pc, #8]	; (b6d04 <os_mutex_create+0xc>)
   b6cfc:	681b      	ldr	r3, [r3, #0]
   b6cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6d00:	9301      	str	r3, [sp, #4]
   b6d02:	bd08      	pop	{r3, pc}
   b6d04:	00030248 	.word	0x00030248

000b6d08 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6d08:	b508      	push	{r3, lr}
   b6d0a:	4b02      	ldr	r3, [pc, #8]	; (b6d14 <os_mutex_destroy+0xc>)
   b6d0c:	681b      	ldr	r3, [r3, #0]
   b6d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6d10:	9301      	str	r3, [sp, #4]
   b6d12:	bd08      	pop	{r3, pc}
   b6d14:	00030248 	.word	0x00030248

000b6d18 <os_mutex_lock>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   b6d18:	b508      	push	{r3, lr}
   b6d1a:	4b02      	ldr	r3, [pc, #8]	; (b6d24 <os_mutex_lock+0xc>)
   b6d1c:	681b      	ldr	r3, [r3, #0]
   b6d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6d20:	9301      	str	r3, [sp, #4]
   b6d22:	bd08      	pop	{r3, pc}
   b6d24:	00030248 	.word	0x00030248

000b6d28 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   b6d28:	b508      	push	{r3, lr}
   b6d2a:	4b02      	ldr	r3, [pc, #8]	; (b6d34 <os_mutex_unlock+0xc>)
   b6d2c:	681b      	ldr	r3, [r3, #0]
   b6d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6d30:	9301      	str	r3, [sp, #4]
   b6d32:	bd08      	pop	{r3, pc}
   b6d34:	00030248 	.word	0x00030248

000b6d38 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6d38:	b508      	push	{r3, lr}
   b6d3a:	4b02      	ldr	r3, [pc, #8]	; (b6d44 <os_mutex_recursive_create+0xc>)
   b6d3c:	681b      	ldr	r3, [r3, #0]
   b6d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6d40:	9301      	str	r3, [sp, #4]
   b6d42:	bd08      	pop	{r3, pc}
   b6d44:	00030248 	.word	0x00030248

000b6d48 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b6d48:	b508      	push	{r3, lr}
   b6d4a:	4b02      	ldr	r3, [pc, #8]	; (b6d54 <os_mutex_recursive_destroy+0xc>)
   b6d4c:	681b      	ldr	r3, [r3, #0]
   b6d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b6d50:	9301      	str	r3, [sp, #4]
   b6d52:	bd08      	pop	{r3, pc}
   b6d54:	00030248 	.word	0x00030248

000b6d58 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6d58:	b508      	push	{r3, lr}
   b6d5a:	4b02      	ldr	r3, [pc, #8]	; (b6d64 <os_mutex_recursive_lock+0xc>)
   b6d5c:	681b      	ldr	r3, [r3, #0]
   b6d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6d60:	9301      	str	r3, [sp, #4]
   b6d62:	bd08      	pop	{r3, pc}
   b6d64:	00030248 	.word	0x00030248

000b6d68 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6d68:	b508      	push	{r3, lr}
   b6d6a:	4b02      	ldr	r3, [pc, #8]	; (b6d74 <os_mutex_recursive_unlock+0xc>)
   b6d6c:	681b      	ldr	r3, [r3, #0]
   b6d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6d70:	9301      	str	r3, [sp, #4]
   b6d72:	bd08      	pop	{r3, pc}
   b6d74:	00030248 	.word	0x00030248

000b6d78 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6d78:	b508      	push	{r3, lr}
   b6d7a:	4b02      	ldr	r3, [pc, #8]	; (b6d84 <HAL_RNG_GetRandomNumber+0xc>)
   b6d7c:	681b      	ldr	r3, [r3, #0]
   b6d7e:	685b      	ldr	r3, [r3, #4]
   b6d80:	9301      	str	r3, [sp, #4]
   b6d82:	bd08      	pop	{r3, pc}
   b6d84:	00030218 	.word	0x00030218

000b6d88 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6d88:	b508      	push	{r3, lr}
   b6d8a:	4b02      	ldr	r3, [pc, #8]	; (b6d94 <HAL_Delay_Microseconds+0xc>)
   b6d8c:	681b      	ldr	r3, [r3, #0]
   b6d8e:	68db      	ldr	r3, [r3, #12]
   b6d90:	9301      	str	r3, [sp, #4]
   b6d92:	bd08      	pop	{r3, pc}
   b6d94:	00030218 	.word	0x00030218

000b6d98 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6d98:	b508      	push	{r3, lr}
   b6d9a:	4b02      	ldr	r3, [pc, #8]	; (b6da4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6d9c:	681b      	ldr	r3, [r3, #0]
   b6d9e:	695b      	ldr	r3, [r3, #20]
   b6da0:	9301      	str	r3, [sp, #4]
   b6da2:	bd08      	pop	{r3, pc}
   b6da4:	00030218 	.word	0x00030218

000b6da8 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6da8:	b508      	push	{r3, lr}
   b6daa:	4b02      	ldr	r3, [pc, #8]	; (b6db4 <hal_gpio_mode+0xc>)
   b6dac:	681b      	ldr	r3, [r3, #0]
   b6dae:	689b      	ldr	r3, [r3, #8]
   b6db0:	9301      	str	r3, [sp, #4]
   b6db2:	bd08      	pop	{r3, pc}
   b6db4:	0003022c 	.word	0x0003022c

000b6db8 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6db8:	b508      	push	{r3, lr}
   b6dba:	4b02      	ldr	r3, [pc, #8]	; (b6dc4 <hal_gpio_get_mode+0xc>)
   b6dbc:	681b      	ldr	r3, [r3, #0]
   b6dbe:	68db      	ldr	r3, [r3, #12]
   b6dc0:	9301      	str	r3, [sp, #4]
   b6dc2:	bd08      	pop	{r3, pc}
   b6dc4:	0003022c 	.word	0x0003022c

000b6dc8 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6dc8:	b508      	push	{r3, lr}
   b6dca:	4b02      	ldr	r3, [pc, #8]	; (b6dd4 <hal_gpio_write+0xc>)
   b6dcc:	681b      	ldr	r3, [r3, #0]
   b6dce:	691b      	ldr	r3, [r3, #16]
   b6dd0:	9301      	str	r3, [sp, #4]
   b6dd2:	bd08      	pop	{r3, pc}
   b6dd4:	0003022c 	.word	0x0003022c

000b6dd8 <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6dd8:	b508      	push	{r3, lr}
   b6dda:	4b02      	ldr	r3, [pc, #8]	; (b6de4 <hal_gpio_read+0xc>)
   b6ddc:	681b      	ldr	r3, [r3, #0]
   b6dde:	695b      	ldr	r3, [r3, #20]
   b6de0:	9301      	str	r3, [sp, #4]
   b6de2:	bd08      	pop	{r3, pc}
   b6de4:	0003022c 	.word	0x0003022c

000b6de8 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6de8:	b508      	push	{r3, lr}
   b6dea:	4b02      	ldr	r3, [pc, #8]	; (b6df4 <hal_i2c_set_speed+0xc>)
   b6dec:	681b      	ldr	r3, [r3, #0]
   b6dee:	681b      	ldr	r3, [r3, #0]
   b6df0:	9301      	str	r3, [sp, #4]
   b6df2:	bd08      	pop	{r3, pc}
   b6df4:	00030228 	.word	0x00030228

000b6df8 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6df8:	b508      	push	{r3, lr}
   b6dfa:	4b02      	ldr	r3, [pc, #8]	; (b6e04 <hal_i2c_begin+0xc>)
   b6dfc:	681b      	ldr	r3, [r3, #0]
   b6dfe:	68db      	ldr	r3, [r3, #12]
   b6e00:	9301      	str	r3, [sp, #4]
   b6e02:	bd08      	pop	{r3, pc}
   b6e04:	00030228 	.word	0x00030228

000b6e08 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6e08:	b508      	push	{r3, lr}
   b6e0a:	4b02      	ldr	r3, [pc, #8]	; (b6e14 <hal_i2c_begin_transmission+0xc>)
   b6e0c:	681b      	ldr	r3, [r3, #0]
   b6e0e:	699b      	ldr	r3, [r3, #24]
   b6e10:	9301      	str	r3, [sp, #4]
   b6e12:	bd08      	pop	{r3, pc}
   b6e14:	00030228 	.word	0x00030228

000b6e18 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6e18:	b508      	push	{r3, lr}
   b6e1a:	4b02      	ldr	r3, [pc, #8]	; (b6e24 <hal_i2c_end_transmission+0xc>)
   b6e1c:	681b      	ldr	r3, [r3, #0]
   b6e1e:	69db      	ldr	r3, [r3, #28]
   b6e20:	9301      	str	r3, [sp, #4]
   b6e22:	bd08      	pop	{r3, pc}
   b6e24:	00030228 	.word	0x00030228

000b6e28 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6e28:	b508      	push	{r3, lr}
   b6e2a:	4b02      	ldr	r3, [pc, #8]	; (b6e34 <hal_i2c_write+0xc>)
   b6e2c:	681b      	ldr	r3, [r3, #0]
   b6e2e:	6a1b      	ldr	r3, [r3, #32]
   b6e30:	9301      	str	r3, [sp, #4]
   b6e32:	bd08      	pop	{r3, pc}
   b6e34:	00030228 	.word	0x00030228

000b6e38 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6e38:	b508      	push	{r3, lr}
   b6e3a:	4b02      	ldr	r3, [pc, #8]	; (b6e44 <hal_i2c_available+0xc>)
   b6e3c:	681b      	ldr	r3, [r3, #0]
   b6e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6e40:	9301      	str	r3, [sp, #4]
   b6e42:	bd08      	pop	{r3, pc}
   b6e44:	00030228 	.word	0x00030228

000b6e48 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6e48:	b508      	push	{r3, lr}
   b6e4a:	4b02      	ldr	r3, [pc, #8]	; (b6e54 <hal_i2c_read+0xc>)
   b6e4c:	681b      	ldr	r3, [r3, #0]
   b6e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e50:	9301      	str	r3, [sp, #4]
   b6e52:	bd08      	pop	{r3, pc}
   b6e54:	00030228 	.word	0x00030228

000b6e58 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6e58:	b508      	push	{r3, lr}
   b6e5a:	4b02      	ldr	r3, [pc, #8]	; (b6e64 <hal_i2c_peek+0xc>)
   b6e5c:	681b      	ldr	r3, [r3, #0]
   b6e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6e60:	9301      	str	r3, [sp, #4]
   b6e62:	bd08      	pop	{r3, pc}
   b6e64:	00030228 	.word	0x00030228

000b6e68 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6e68:	b508      	push	{r3, lr}
   b6e6a:	4b02      	ldr	r3, [pc, #8]	; (b6e74 <hal_i2c_flush+0xc>)
   b6e6c:	681b      	ldr	r3, [r3, #0]
   b6e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e70:	9301      	str	r3, [sp, #4]
   b6e72:	bd08      	pop	{r3, pc}
   b6e74:	00030228 	.word	0x00030228

000b6e78 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6e78:	b508      	push	{r3, lr}
   b6e7a:	4b02      	ldr	r3, [pc, #8]	; (b6e84 <hal_i2c_is_enabled+0xc>)
   b6e7c:	681b      	ldr	r3, [r3, #0]
   b6e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6e80:	9301      	str	r3, [sp, #4]
   b6e82:	bd08      	pop	{r3, pc}
   b6e84:	00030228 	.word	0x00030228

000b6e88 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6e88:	b508      	push	{r3, lr}
   b6e8a:	4b02      	ldr	r3, [pc, #8]	; (b6e94 <hal_i2c_init+0xc>)
   b6e8c:	681b      	ldr	r3, [r3, #0]
   b6e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6e90:	9301      	str	r3, [sp, #4]
   b6e92:	bd08      	pop	{r3, pc}
   b6e94:	00030228 	.word	0x00030228

000b6e98 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6e98:	b508      	push	{r3, lr}
   b6e9a:	4b02      	ldr	r3, [pc, #8]	; (b6ea4 <if_index_to_name+0xc>)
   b6e9c:	681b      	ldr	r3, [r3, #0]
   b6e9e:	695b      	ldr	r3, [r3, #20]
   b6ea0:	9301      	str	r3, [sp, #4]
   b6ea2:	bd08      	pop	{r3, pc}
   b6ea4:	0003026c 	.word	0x0003026c

000b6ea8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6ea8:	b508      	push	{r3, lr}
   b6eaa:	4b02      	ldr	r3, [pc, #8]	; (b6eb4 <inet_inet_ntop+0xc>)
   b6eac:	681b      	ldr	r3, [r3, #0]
   b6eae:	695b      	ldr	r3, [r3, #20]
   b6eb0:	9301      	str	r3, [sp, #4]
   b6eb2:	bd08      	pop	{r3, pc}
   b6eb4:	00030264 	.word	0x00030264

000b6eb8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6eb8:	b508      	push	{r3, lr}
   b6eba:	4b02      	ldr	r3, [pc, #8]	; (b6ec4 <inet_htonl+0xc>)
   b6ebc:	681b      	ldr	r3, [r3, #0]
   b6ebe:	6a1b      	ldr	r3, [r3, #32]
   b6ec0:	9301      	str	r3, [sp, #4]
   b6ec2:	bd08      	pop	{r3, pc}
   b6ec4:	00030264 	.word	0x00030264

000b6ec8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6ec8:	b508      	push	{r3, lr}
   b6eca:	4b02      	ldr	r3, [pc, #8]	; (b6ed4 <inet_htons+0xc>)
   b6ecc:	681b      	ldr	r3, [r3, #0]
   b6ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ed0:	9301      	str	r3, [sp, #4]
   b6ed2:	bd08      	pop	{r3, pc}
   b6ed4:	00030264 	.word	0x00030264

000b6ed8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6ed8:	b508      	push	{r3, lr}
   b6eda:	4b02      	ldr	r3, [pc, #8]	; (b6ee4 <netdb_freeaddrinfo+0xc>)
   b6edc:	681b      	ldr	r3, [r3, #0]
   b6ede:	689b      	ldr	r3, [r3, #8]
   b6ee0:	9301      	str	r3, [sp, #4]
   b6ee2:	bd08      	pop	{r3, pc}
   b6ee4:	00030268 	.word	0x00030268

000b6ee8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6ee8:	b508      	push	{r3, lr}
   b6eea:	4b02      	ldr	r3, [pc, #8]	; (b6ef4 <netdb_getaddrinfo+0xc>)
   b6eec:	681b      	ldr	r3, [r3, #0]
   b6eee:	68db      	ldr	r3, [r3, #12]
   b6ef0:	9301      	str	r3, [sp, #4]
   b6ef2:	bd08      	pop	{r3, pc}
   b6ef4:	00030268 	.word	0x00030268

000b6ef8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6ef8:	b508      	push	{r3, lr}
   b6efa:	4b02      	ldr	r3, [pc, #8]	; (b6f04 <sock_setsockopt+0xc>)
   b6efc:	681b      	ldr	r3, [r3, #0]
   b6efe:	699b      	ldr	r3, [r3, #24]
   b6f00:	9301      	str	r3, [sp, #4]
   b6f02:	bd08      	pop	{r3, pc}
   b6f04:	00030238 	.word	0x00030238

000b6f08 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6f08:	b508      	push	{r3, lr}
   b6f0a:	4b02      	ldr	r3, [pc, #8]	; (b6f14 <sock_close+0xc>)
   b6f0c:	681b      	ldr	r3, [r3, #0]
   b6f0e:	69db      	ldr	r3, [r3, #28]
   b6f10:	9301      	str	r3, [sp, #4]
   b6f12:	bd08      	pop	{r3, pc}
   b6f14:	00030238 	.word	0x00030238

000b6f18 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6f18:	b508      	push	{r3, lr}
   b6f1a:	4b02      	ldr	r3, [pc, #8]	; (b6f24 <sock_connect+0xc>)
   b6f1c:	681b      	ldr	r3, [r3, #0]
   b6f1e:	6a1b      	ldr	r3, [r3, #32]
   b6f20:	9301      	str	r3, [sp, #4]
   b6f22:	bd08      	pop	{r3, pc}
   b6f24:	00030238 	.word	0x00030238

000b6f28 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b6f28:	b508      	push	{r3, lr}
   b6f2a:	4b02      	ldr	r3, [pc, #8]	; (b6f34 <sock_recv+0xc>)
   b6f2c:	681b      	ldr	r3, [r3, #0]
   b6f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f30:	9301      	str	r3, [sp, #4]
   b6f32:	bd08      	pop	{r3, pc}
   b6f34:	00030238 	.word	0x00030238

000b6f38 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b6f38:	b508      	push	{r3, lr}
   b6f3a:	4b02      	ldr	r3, [pc, #8]	; (b6f44 <sock_send+0xc>)
   b6f3c:	681b      	ldr	r3, [r3, #0]
   b6f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f40:	9301      	str	r3, [sp, #4]
   b6f42:	bd08      	pop	{r3, pc}
   b6f44:	00030238 	.word	0x00030238

000b6f48 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b6f48:	b508      	push	{r3, lr}
   b6f4a:	4b02      	ldr	r3, [pc, #8]	; (b6f54 <sock_socket+0xc>)
   b6f4c:	681b      	ldr	r3, [r3, #0]
   b6f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b6f50:	9301      	str	r3, [sp, #4]
   b6f52:	bd08      	pop	{r3, pc}
   b6f54:	00030238 	.word	0x00030238

000b6f58 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6f58:	b508      	push	{r3, lr}
   b6f5a:	4b02      	ldr	r3, [pc, #8]	; (b6f64 <hal_spi_begin+0xc>)
   b6f5c:	681b      	ldr	r3, [r3, #0]
   b6f5e:	681b      	ldr	r3, [r3, #0]
   b6f60:	9301      	str	r3, [sp, #4]
   b6f62:	bd08      	pop	{r3, pc}
   b6f64:	00030230 	.word	0x00030230

000b6f68 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6f68:	b508      	push	{r3, lr}
   b6f6a:	4b02      	ldr	r3, [pc, #8]	; (b6f74 <hal_spi_transfer+0xc>)
   b6f6c:	681b      	ldr	r3, [r3, #0]
   b6f6e:	695b      	ldr	r3, [r3, #20]
   b6f70:	9301      	str	r3, [sp, #4]
   b6f72:	bd08      	pop	{r3, pc}
   b6f74:	00030230 	.word	0x00030230

000b6f78 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6f78:	b508      	push	{r3, lr}
   b6f7a:	4b02      	ldr	r3, [pc, #8]	; (b6f84 <hal_spi_init+0xc>)
   b6f7c:	681b      	ldr	r3, [r3, #0]
   b6f7e:	69db      	ldr	r3, [r3, #28]
   b6f80:	9301      	str	r3, [sp, #4]
   b6f82:	bd08      	pop	{r3, pc}
   b6f84:	00030230 	.word	0x00030230

000b6f88 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6f88:	b508      	push	{r3, lr}
   b6f8a:	4b02      	ldr	r3, [pc, #8]	; (b6f94 <hal_spi_is_enabled+0xc>)
   b6f8c:	681b      	ldr	r3, [r3, #0]
   b6f8e:	6a1b      	ldr	r3, [r3, #32]
   b6f90:	9301      	str	r3, [sp, #4]
   b6f92:	bd08      	pop	{r3, pc}
   b6f94:	00030230 	.word	0x00030230

000b6f98 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6f98:	b508      	push	{r3, lr}
   b6f9a:	4b02      	ldr	r3, [pc, #8]	; (b6fa4 <hal_spi_info+0xc>)
   b6f9c:	681b      	ldr	r3, [r3, #0]
   b6f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6fa0:	9301      	str	r3, [sp, #4]
   b6fa2:	bd08      	pop	{r3, pc}
   b6fa4:	00030230 	.word	0x00030230

000b6fa8 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6fa8:	b508      	push	{r3, lr}
   b6faa:	4b02      	ldr	r3, [pc, #8]	; (b6fb4 <hal_spi_set_settings+0xc>)
   b6fac:	681b      	ldr	r3, [r3, #0]
   b6fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6fb0:	9301      	str	r3, [sp, #4]
   b6fb2:	bd08      	pop	{r3, pc}
   b6fb4:	00030230 	.word	0x00030230

000b6fb8 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6fb8:	b508      	push	{r3, lr}
   b6fba:	4b02      	ldr	r3, [pc, #8]	; (b6fc4 <hal_spi_acquire+0xc>)
   b6fbc:	681b      	ldr	r3, [r3, #0]
   b6fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6fc0:	9301      	str	r3, [sp, #4]
   b6fc2:	bd08      	pop	{r3, pc}
   b6fc4:	00030230 	.word	0x00030230

000b6fc8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6fc8:	b508      	push	{r3, lr}
   b6fca:	4b02      	ldr	r3, [pc, #8]	; (b6fd4 <hal_spi_release+0xc>)
   b6fcc:	681b      	ldr	r3, [r3, #0]
   b6fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6fd0:	9301      	str	r3, [sp, #4]
   b6fd2:	bd08      	pop	{r3, pc}
   b6fd4:	00030230 	.word	0x00030230

000b6fd8 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   b6fd8:	b508      	push	{r3, lr}
   b6fda:	4b02      	ldr	r3, [pc, #8]	; (b6fe4 <hal_usart_end+0xc>)
   b6fdc:	681b      	ldr	r3, [r3, #0]
   b6fde:	689b      	ldr	r3, [r3, #8]
   b6fe0:	9301      	str	r3, [sp, #4]
   b6fe2:	bd08      	pop	{r3, pc}
   b6fe4:	0003023c 	.word	0x0003023c

000b6fe8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b6fe8:	b508      	push	{r3, lr}
   b6fea:	4b02      	ldr	r3, [pc, #8]	; (b6ff4 <hal_usart_write+0xc>)
   b6fec:	681b      	ldr	r3, [r3, #0]
   b6fee:	68db      	ldr	r3, [r3, #12]
   b6ff0:	9301      	str	r3, [sp, #4]
   b6ff2:	bd08      	pop	{r3, pc}
   b6ff4:	0003023c 	.word	0x0003023c

000b6ff8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b6ff8:	b508      	push	{r3, lr}
   b6ffa:	4b02      	ldr	r3, [pc, #8]	; (b7004 <hal_usart_available+0xc>)
   b6ffc:	681b      	ldr	r3, [r3, #0]
   b6ffe:	691b      	ldr	r3, [r3, #16]
   b7000:	9301      	str	r3, [sp, #4]
   b7002:	bd08      	pop	{r3, pc}
   b7004:	0003023c 	.word	0x0003023c

000b7008 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7008:	b508      	push	{r3, lr}
   b700a:	4b02      	ldr	r3, [pc, #8]	; (b7014 <hal_usart_read+0xc>)
   b700c:	681b      	ldr	r3, [r3, #0]
   b700e:	695b      	ldr	r3, [r3, #20]
   b7010:	9301      	str	r3, [sp, #4]
   b7012:	bd08      	pop	{r3, pc}
   b7014:	0003023c 	.word	0x0003023c

000b7018 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7018:	b508      	push	{r3, lr}
   b701a:	4b02      	ldr	r3, [pc, #8]	; (b7024 <hal_usart_peek+0xc>)
   b701c:	681b      	ldr	r3, [r3, #0]
   b701e:	699b      	ldr	r3, [r3, #24]
   b7020:	9301      	str	r3, [sp, #4]
   b7022:	bd08      	pop	{r3, pc}
   b7024:	0003023c 	.word	0x0003023c

000b7028 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7028:	b508      	push	{r3, lr}
   b702a:	4b02      	ldr	r3, [pc, #8]	; (b7034 <hal_usart_flush+0xc>)
   b702c:	681b      	ldr	r3, [r3, #0]
   b702e:	69db      	ldr	r3, [r3, #28]
   b7030:	9301      	str	r3, [sp, #4]
   b7032:	bd08      	pop	{r3, pc}
   b7034:	0003023c 	.word	0x0003023c

000b7038 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7038:	b508      	push	{r3, lr}
   b703a:	4b02      	ldr	r3, [pc, #8]	; (b7044 <hal_usart_is_enabled+0xc>)
   b703c:	681b      	ldr	r3, [r3, #0]
   b703e:	6a1b      	ldr	r3, [r3, #32]
   b7040:	9301      	str	r3, [sp, #4]
   b7042:	bd08      	pop	{r3, pc}
   b7044:	0003023c 	.word	0x0003023c

000b7048 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7048:	b508      	push	{r3, lr}
   b704a:	4b02      	ldr	r3, [pc, #8]	; (b7054 <hal_usart_available_data_for_write+0xc>)
   b704c:	681b      	ldr	r3, [r3, #0]
   b704e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7050:	9301      	str	r3, [sp, #4]
   b7052:	bd08      	pop	{r3, pc}
   b7054:	0003023c 	.word	0x0003023c

000b7058 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b7058:	b508      	push	{r3, lr}
   b705a:	4b02      	ldr	r3, [pc, #8]	; (b7064 <hal_usart_begin_config+0xc>)
   b705c:	681b      	ldr	r3, [r3, #0]
   b705e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7060:	9301      	str	r3, [sp, #4]
   b7062:	bd08      	pop	{r3, pc}
   b7064:	0003023c 	.word	0x0003023c

000b7068 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b7068:	b508      	push	{r3, lr}
   b706a:	4b02      	ldr	r3, [pc, #8]	; (b7074 <hal_usart_init_ex+0xc>)
   b706c:	681b      	ldr	r3, [r3, #0]
   b706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7070:	9301      	str	r3, [sp, #4]
   b7072:	bd08      	pop	{r3, pc}
   b7074:	0003023c 	.word	0x0003023c

000b7078 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b7078:	b508      	push	{r3, lr}
   b707a:	4b02      	ldr	r3, [pc, #8]	; (b7084 <HAL_USB_USART_Init+0xc>)
   b707c:	681b      	ldr	r3, [r3, #0]
   b707e:	681b      	ldr	r3, [r3, #0]
   b7080:	9301      	str	r3, [sp, #4]
   b7082:	bd08      	pop	{r3, pc}
   b7084:	0003024c 	.word	0x0003024c

000b7088 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b7088:	b508      	push	{r3, lr}
   b708a:	4b02      	ldr	r3, [pc, #8]	; (b7094 <HAL_USB_USART_Begin+0xc>)
   b708c:	681b      	ldr	r3, [r3, #0]
   b708e:	685b      	ldr	r3, [r3, #4]
   b7090:	9301      	str	r3, [sp, #4]
   b7092:	bd08      	pop	{r3, pc}
   b7094:	0003024c 	.word	0x0003024c

000b7098 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   b7098:	b508      	push	{r3, lr}
   b709a:	4b02      	ldr	r3, [pc, #8]	; (b70a4 <HAL_USB_USART_End+0xc>)
   b709c:	681b      	ldr	r3, [r3, #0]
   b709e:	689b      	ldr	r3, [r3, #8]
   b70a0:	9301      	str	r3, [sp, #4]
   b70a2:	bd08      	pop	{r3, pc}
   b70a4:	0003024c 	.word	0x0003024c

000b70a8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b70a8:	b508      	push	{r3, lr}
   b70aa:	4b02      	ldr	r3, [pc, #8]	; (b70b4 <HAL_USB_USART_Available_Data+0xc>)
   b70ac:	681b      	ldr	r3, [r3, #0]
   b70ae:	691b      	ldr	r3, [r3, #16]
   b70b0:	9301      	str	r3, [sp, #4]
   b70b2:	bd08      	pop	{r3, pc}
   b70b4:	0003024c 	.word	0x0003024c

000b70b8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b70b8:	b508      	push	{r3, lr}
   b70ba:	4b02      	ldr	r3, [pc, #8]	; (b70c4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b70bc:	681b      	ldr	r3, [r3, #0]
   b70be:	695b      	ldr	r3, [r3, #20]
   b70c0:	9301      	str	r3, [sp, #4]
   b70c2:	bd08      	pop	{r3, pc}
   b70c4:	0003024c 	.word	0x0003024c

000b70c8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b70c8:	b508      	push	{r3, lr}
   b70ca:	4b02      	ldr	r3, [pc, #8]	; (b70d4 <HAL_USB_USART_Receive_Data+0xc>)
   b70cc:	681b      	ldr	r3, [r3, #0]
   b70ce:	699b      	ldr	r3, [r3, #24]
   b70d0:	9301      	str	r3, [sp, #4]
   b70d2:	bd08      	pop	{r3, pc}
   b70d4:	0003024c 	.word	0x0003024c

000b70d8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b70d8:	b508      	push	{r3, lr}
   b70da:	4b02      	ldr	r3, [pc, #8]	; (b70e4 <HAL_USB_USART_Send_Data+0xc>)
   b70dc:	681b      	ldr	r3, [r3, #0]
   b70de:	69db      	ldr	r3, [r3, #28]
   b70e0:	9301      	str	r3, [sp, #4]
   b70e2:	bd08      	pop	{r3, pc}
   b70e4:	0003024c 	.word	0x0003024c

000b70e8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b70e8:	b508      	push	{r3, lr}
   b70ea:	4b02      	ldr	r3, [pc, #8]	; (b70f4 <HAL_USB_USART_Flush_Data+0xc>)
   b70ec:	681b      	ldr	r3, [r3, #0]
   b70ee:	6a1b      	ldr	r3, [r3, #32]
   b70f0:	9301      	str	r3, [sp, #4]
   b70f2:	bd08      	pop	{r3, pc}
   b70f4:	0003024c 	.word	0x0003024c

000b70f8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b70f8:	b508      	push	{r3, lr}
   b70fa:	4b02      	ldr	r3, [pc, #8]	; (b7104 <panic_+0xc>)
   b70fc:	681b      	ldr	r3, [r3, #0]
   b70fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7100:	9301      	str	r3, [sp, #4]
   b7102:	bd08      	pop	{r3, pc}
   b7104:	00030260 	.word	0x00030260

000b7108 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b7108:	b508      	push	{r3, lr}
   b710a:	4b02      	ldr	r3, [pc, #8]	; (b7114 <log_message+0xc>)
   b710c:	681b      	ldr	r3, [r3, #0]
   b710e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7110:	9301      	str	r3, [sp, #4]
   b7112:	bd08      	pop	{r3, pc}
   b7114:	00030260 	.word	0x00030260

000b7118 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   b7118:	b508      	push	{r3, lr}
   b711a:	4b02      	ldr	r3, [pc, #8]	; (b7124 <log_message_v+0xc>)
   b711c:	681b      	ldr	r3, [r3, #0]
   b711e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b7120:	9301      	str	r3, [sp, #4]
   b7122:	bd08      	pop	{r3, pc}
   b7124:	00030260 	.word	0x00030260

000b7128 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   b7128:	b508      	push	{r3, lr}
   b712a:	4b02      	ldr	r3, [pc, #8]	; (b7134 <log_level_name+0xc>)
   b712c:	681b      	ldr	r3, [r3, #0]
   b712e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   b7130:	9301      	str	r3, [sp, #4]
   b7132:	bd08      	pop	{r3, pc}
   b7134:	00030260 	.word	0x00030260

000b7138 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   b7138:	b508      	push	{r3, lr}
   b713a:	4b02      	ldr	r3, [pc, #8]	; (b7144 <log_set_callbacks+0xc>)
   b713c:	681b      	ldr	r3, [r3, #0]
   b713e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b7140:	9301      	str	r3, [sp, #4]
   b7142:	bd08      	pop	{r3, pc}
   b7144:	00030260 	.word	0x00030260

000b7148 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7148:	b508      	push	{r3, lr}
   b714a:	4b02      	ldr	r3, [pc, #8]	; (b7154 <set_system_mode+0xc>)
   b714c:	681b      	ldr	r3, [r3, #0]
   b714e:	685b      	ldr	r3, [r3, #4]
   b7150:	9301      	str	r3, [sp, #4]
   b7152:	bd08      	pop	{r3, pc}
   b7154:	00030220 	.word	0x00030220

000b7158 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7158:	b508      	push	{r3, lr}
   b715a:	4b02      	ldr	r3, [pc, #8]	; (b7164 <system_delay_ms+0xc>)
   b715c:	681b      	ldr	r3, [r3, #0]
   b715e:	695b      	ldr	r3, [r3, #20]
   b7160:	9301      	str	r3, [sp, #4]
   b7162:	bd08      	pop	{r3, pc}
   b7164:	00030220 	.word	0x00030220

000b7168 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7168:	b508      	push	{r3, lr}
   b716a:	4b02      	ldr	r3, [pc, #8]	; (b7174 <system_thread_set_state+0xc>)
   b716c:	681b      	ldr	r3, [r3, #0]
   b716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7170:	9301      	str	r3, [sp, #4]
   b7172:	bd08      	pop	{r3, pc}
   b7174:	00030220 	.word	0x00030220

000b7178 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7178:	b508      	push	{r3, lr}
   b717a:	4b03      	ldr	r3, [pc, #12]	; (b7188 <system_ctrl_set_app_request_handler+0x10>)
   b717c:	681b      	ldr	r3, [r3, #0]
   b717e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7182:	9301      	str	r3, [sp, #4]
   b7184:	bd08      	pop	{r3, pc}
   b7186:	0000      	.short	0x0000
   b7188:	00030220 	.word	0x00030220

000b718c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b718c:	b508      	push	{r3, lr}
   b718e:	4b03      	ldr	r3, [pc, #12]	; (b719c <system_ctrl_set_result+0x10>)
   b7190:	681b      	ldr	r3, [r3, #0]
   b7192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b7196:	9301      	str	r3, [sp, #4]
   b7198:	bd08      	pop	{r3, pc}
   b719a:	0000      	.short	0x0000
   b719c:	00030220 	.word	0x00030220

000b71a0 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   b71a0:	b508      	push	{r3, lr}
   b71a2:	4b02      	ldr	r3, [pc, #8]	; (b71ac <spark_deviceID+0xc>)
   b71a4:	681b      	ldr	r3, [r3, #0]
   b71a6:	69db      	ldr	r3, [r3, #28]
   b71a8:	9301      	str	r3, [sp, #4]
   b71aa:	bd08      	pop	{r3, pc}
   b71ac:	00030244 	.word	0x00030244

000b71b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b71b0:	b508      	push	{r3, lr}
   b71b2:	4b02      	ldr	r3, [pc, #8]	; (b71bc <spark_set_random_seed_from_cloud_handler+0xc>)
   b71b4:	681b      	ldr	r3, [r3, #0]
   b71b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b71b8:	9301      	str	r3, [sp, #4]
   b71ba:	bd08      	pop	{r3, pc}
   b71bc:	00030244 	.word	0x00030244

000b71c0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b71c0:	b508      	push	{r3, lr}
   b71c2:	4b02      	ldr	r3, [pc, #8]	; (b71cc <network_connect+0xc>)
   b71c4:	681b      	ldr	r3, [r3, #0]
   b71c6:	685b      	ldr	r3, [r3, #4]
   b71c8:	9301      	str	r3, [sp, #4]
   b71ca:	bd08      	pop	{r3, pc}
   b71cc:	00030240 	.word	0x00030240

000b71d0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b71d0:	b508      	push	{r3, lr}
   b71d2:	4b02      	ldr	r3, [pc, #8]	; (b71dc <network_connecting+0xc>)
   b71d4:	681b      	ldr	r3, [r3, #0]
   b71d6:	689b      	ldr	r3, [r3, #8]
   b71d8:	9301      	str	r3, [sp, #4]
   b71da:	bd08      	pop	{r3, pc}
   b71dc:	00030240 	.word	0x00030240

000b71e0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b71e0:	b508      	push	{r3, lr}
   b71e2:	4b02      	ldr	r3, [pc, #8]	; (b71ec <network_disconnect+0xc>)
   b71e4:	681b      	ldr	r3, [r3, #0]
   b71e6:	68db      	ldr	r3, [r3, #12]
   b71e8:	9301      	str	r3, [sp, #4]
   b71ea:	bd08      	pop	{r3, pc}
   b71ec:	00030240 	.word	0x00030240

000b71f0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b71f0:	b508      	push	{r3, lr}
   b71f2:	4b02      	ldr	r3, [pc, #8]	; (b71fc <network_ready+0xc>)
   b71f4:	681b      	ldr	r3, [r3, #0]
   b71f6:	691b      	ldr	r3, [r3, #16]
   b71f8:	9301      	str	r3, [sp, #4]
   b71fa:	bd08      	pop	{r3, pc}
   b71fc:	00030240 	.word	0x00030240

000b7200 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7200:	b508      	push	{r3, lr}
   b7202:	4b02      	ldr	r3, [pc, #8]	; (b720c <network_on+0xc>)
   b7204:	681b      	ldr	r3, [r3, #0]
   b7206:	695b      	ldr	r3, [r3, #20]
   b7208:	9301      	str	r3, [sp, #4]
   b720a:	bd08      	pop	{r3, pc}
   b720c:	00030240 	.word	0x00030240

000b7210 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7210:	b508      	push	{r3, lr}
   b7212:	4b02      	ldr	r3, [pc, #8]	; (b721c <network_off+0xc>)
   b7214:	681b      	ldr	r3, [r3, #0]
   b7216:	699b      	ldr	r3, [r3, #24]
   b7218:	9301      	str	r3, [sp, #4]
   b721a:	bd08      	pop	{r3, pc}
   b721c:	00030240 	.word	0x00030240

000b7220 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7220:	b508      	push	{r3, lr}
   b7222:	4b02      	ldr	r3, [pc, #8]	; (b722c <network_listen+0xc>)
   b7224:	681b      	ldr	r3, [r3, #0]
   b7226:	69db      	ldr	r3, [r3, #28]
   b7228:	9301      	str	r3, [sp, #4]
   b722a:	bd08      	pop	{r3, pc}
   b722c:	00030240 	.word	0x00030240

000b7230 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7230:	b508      	push	{r3, lr}
   b7232:	4b02      	ldr	r3, [pc, #8]	; (b723c <network_listening+0xc>)
   b7234:	681b      	ldr	r3, [r3, #0]
   b7236:	6a1b      	ldr	r3, [r3, #32]
   b7238:	9301      	str	r3, [sp, #4]
   b723a:	bd08      	pop	{r3, pc}
   b723c:	00030240 	.word	0x00030240

000b7240 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7240:	b508      	push	{r3, lr}
   b7242:	4b02      	ldr	r3, [pc, #8]	; (b724c <network_set_listen_timeout+0xc>)
   b7244:	681b      	ldr	r3, [r3, #0]
   b7246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7248:	9301      	str	r3, [sp, #4]
   b724a:	bd08      	pop	{r3, pc}
   b724c:	00030240 	.word	0x00030240

000b7250 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7250:	b508      	push	{r3, lr}
   b7252:	4b02      	ldr	r3, [pc, #8]	; (b725c <network_get_listen_timeout+0xc>)
   b7254:	681b      	ldr	r3, [r3, #0]
   b7256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7258:	9301      	str	r3, [sp, #4]
   b725a:	bd08      	pop	{r3, pc}
   b725c:	00030240 	.word	0x00030240

000b7260 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7260:	b508      	push	{r3, lr}
   b7262:	4b02      	ldr	r3, [pc, #8]	; (b726c <network_is_on+0xc>)
   b7264:	681b      	ldr	r3, [r3, #0]
   b7266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7268:	9301      	str	r3, [sp, #4]
   b726a:	bd08      	pop	{r3, pc}
   b726c:	00030240 	.word	0x00030240

000b7270 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7270:	b508      	push	{r3, lr}
   b7272:	4b02      	ldr	r3, [pc, #8]	; (b727c <network_is_off+0xc>)
   b7274:	681b      	ldr	r3, [r3, #0]
   b7276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7278:	9301      	str	r3, [sp, #4]
   b727a:	bd08      	pop	{r3, pc}
   b727c:	00030240 	.word	0x00030240

000b7280 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7280:	b508      	push	{r3, lr}
   b7282:	4b02      	ldr	r3, [pc, #8]	; (b728c <malloc+0xc>)
   b7284:	681b      	ldr	r3, [r3, #0]
   b7286:	681b      	ldr	r3, [r3, #0]
   b7288:	9301      	str	r3, [sp, #4]
   b728a:	bd08      	pop	{r3, pc}
   b728c:	0003021c 	.word	0x0003021c

000b7290 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7290:	b508      	push	{r3, lr}
   b7292:	4b02      	ldr	r3, [pc, #8]	; (b729c <free+0xc>)
   b7294:	681b      	ldr	r3, [r3, #0]
   b7296:	685b      	ldr	r3, [r3, #4]
   b7298:	9301      	str	r3, [sp, #4]
   b729a:	bd08      	pop	{r3, pc}
   b729c:	0003021c 	.word	0x0003021c

000b72a0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b72a0:	b508      	push	{r3, lr}
   b72a2:	4b02      	ldr	r3, [pc, #8]	; (b72ac <realloc+0xc>)
   b72a4:	681b      	ldr	r3, [r3, #0]
   b72a6:	689b      	ldr	r3, [r3, #8]
   b72a8:	9301      	str	r3, [sp, #4]
   b72aa:	bd08      	pop	{r3, pc}
   b72ac:	0003021c 	.word	0x0003021c

000b72b0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b72b0:	b508      	push	{r3, lr}
   b72b2:	4b02      	ldr	r3, [pc, #8]	; (b72bc <vsnprintf+0xc>)
   b72b4:	681b      	ldr	r3, [r3, #0]
   b72b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b72b8:	9301      	str	r3, [sp, #4]
   b72ba:	bd08      	pop	{r3, pc}
   b72bc:	0003021c 	.word	0x0003021c

000b72c0 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b72c0:	b508      	push	{r3, lr}
   b72c2:	4b02      	ldr	r3, [pc, #8]	; (b72cc <abort+0xc>)
   b72c4:	681b      	ldr	r3, [r3, #0]
   b72c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b72c8:	9301      	str	r3, [sp, #4]
   b72ca:	bd08      	pop	{r3, pc}
   b72cc:	0003021c 	.word	0x0003021c

000b72d0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b72d0:	b508      	push	{r3, lr}
   b72d2:	4b02      	ldr	r3, [pc, #8]	; (b72dc <_malloc_r+0xc>)
   b72d4:	681b      	ldr	r3, [r3, #0]
   b72d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b72d8:	9301      	str	r3, [sp, #4]
   b72da:	bd08      	pop	{r3, pc}
   b72dc:	0003021c 	.word	0x0003021c

000b72e0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b72e0:	b508      	push	{r3, lr}
   b72e2:	4b02      	ldr	r3, [pc, #8]	; (b72ec <__errno+0xc>)
   b72e4:	681b      	ldr	r3, [r3, #0]
   b72e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b72e8:	9301      	str	r3, [sp, #4]
   b72ea:	bd08      	pop	{r3, pc}
   b72ec:	0003021c 	.word	0x0003021c

000b72f0 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b72f0:	b508      	push	{r3, lr}
   b72f2:	4b02      	ldr	r3, [pc, #8]	; (b72fc <__assert_func+0xc>)
   b72f4:	681b      	ldr	r3, [r3, #0]
   b72f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b72f8:	9301      	str	r3, [sp, #4]
   b72fa:	bd08      	pop	{r3, pc}
   b72fc:	0003021c 	.word	0x0003021c

000b7300 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7300:	b508      	push	{r3, lr}
   b7302:	4b02      	ldr	r3, [pc, #8]	; (b730c <newlib_impure_ptr_callback+0xc>)
   b7304:	681b      	ldr	r3, [r3, #0]
   b7306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7308:	9301      	str	r3, [sp, #4]
   b730a:	bd08      	pop	{r3, pc}
   b730c:	0003021c 	.word	0x0003021c

000b7310 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7310:	2100      	movs	r1, #0
   b7312:	f7ff bf21 	b.w	b7158 <system_delay_ms>

000b7316 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
	  // 2070.  allocate_shared should use allocator_traits<A>::construct
	  allocator_traits<_Alloc>::construct(__a, _M_ptr(),
	      std::forward<_Args>(__args)...); // might throw
	}

      ~_Sp_counted_ptr_inplace() noexcept { }
   b7316:	4770      	bx	lr

000b7318 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	// Check for the fake type_info first, so we don't try to access it
	// as a real type_info object. Otherwise, check if it's the real
	// type_info for this class. With RTTI enabled we can check directly,
	// or call a library function to do it.
	if (&__ti == &_Sp_make_shared_tag::_S_ti()
	    ||
   b7318:	4b06      	ldr	r3, [pc, #24]	; (b7334 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b731a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b731c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b731e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7322:	d005      	beq.n	b7330 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
#if __cpp_rtti
	    __ti == typeid(_Sp_make_shared_tag)
#else
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7324:	4608      	mov	r0, r1
   b7326:	f003 f945 	bl	ba5b4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
#endif
	   )
	  return __ptr;
	return nullptr;
   b732a:	2800      	cmp	r0, #0
   b732c:	bf08      	it	eq
   b732e:	2400      	moveq	r4, #0
      }
   b7330:	4620      	mov	r0, r4
   b7332:	bd10      	pop	{r4, pc}
   b7334:	000bd5f0 	.word	0x000bd5f0

000b7338 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7338:	b510      	push	{r4, lr}
   b733a:	2130      	movs	r1, #48	; 0x30
   b733c:	4604      	mov	r4, r0
   b733e:	f7fd fbbe 	bl	b4abe <_ZdlPvj>
   b7342:	4620      	mov	r0, r4
   b7344:	bd10      	pop	{r4, pc}

000b7346 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b7346:	2130      	movs	r1, #48	; 0x30
   b7348:	f7fd bbb9 	b.w	b4abe <_ZdlPvj>

000b734c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b734c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b734e:	2500      	movs	r5, #0
   b7350:	1cec      	adds	r4, r5, #3
   b7352:	428c      	cmp	r4, r1
   b7354:	d80d      	bhi.n	b7372 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b7356:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b7358:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b735a:	5d87      	ldrb	r7, [r0, r6]
   b735c:	4297      	cmp	r7, r2
   b735e:	d105      	bne.n	b736c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b7360:	4426      	add	r6, r4
   b7362:	42b1      	cmp	r1, r6
   b7364:	d305      	bcc.n	b7372 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b7366:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b7368:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b736a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b736c:	3401      	adds	r4, #1
   b736e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b7370:	e7ee      	b.n	b7350 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b7372:	2000      	movs	r0, #0
   b7374:	e7f9      	b.n	b736a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b7376 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b7376:	4603      	mov	r3, r0
   b7378:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   b737a:	681b      	ldr	r3, [r3, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b737c:	e9d3 2100 	ldrd	r2, r1, [r3]
   b7380:	4710      	bx	r2

000b7382 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	switch (__op)
   b7382:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7384:	b538      	push	{r3, r4, r5, lr}
   b7386:	4604      	mov	r4, r0
	switch (__op)
   b7388:	d102      	bne.n	b7390 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b738a:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b738c:	6023      	str	r3, [r4, #0]
	}
   b738e:	e003      	b.n	b7398 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
	  switch (__op)
   b7390:	2a02      	cmp	r2, #2
   b7392:	d003      	beq.n	b739c <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x1a>
   b7394:	2a03      	cmp	r2, #3
   b7396:	d00d      	beq.n	b73b4 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x32>
      }
   b7398:	2000      	movs	r0, #0
   b739a:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b739c:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b739e:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b73a0:	f7fd fb87 	bl	b4ab2 <_Znwj>
   b73a4:	4603      	mov	r3, r0
   b73a6:	2800      	cmp	r0, #0
   b73a8:	d0f0      	beq.n	b738c <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
   b73aa:	e895 0003 	ldmia.w	r5, {r0, r1}
   b73ae:	e883 0003 	stmia.w	r3, {r0, r1}
   b73b2:	e7eb      	b.n	b738c <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b73b4:	6800      	ldr	r0, [r0, #0]
   b73b6:	2800      	cmp	r0, #0
   b73b8:	d0ee      	beq.n	b7398 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>
   b73ba:	2108      	movs	r1, #8
   b73bc:	f7fd fb7f 	bl	b4abe <_ZdlPvj>
   b73c0:	e7ea      	b.n	b7398 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x16>

000b73c2 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b73c2:	b510      	push	{r4, lr}
      if (_M_manager)
   b73c4:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b73c6:	4604      	mov	r4, r0
      if (_M_manager)
   b73c8:	b113      	cbz	r3, b73d0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b73ca:	2203      	movs	r2, #3
   b73cc:	4601      	mov	r1, r0
   b73ce:	4798      	blx	r3
    }
   b73d0:	4620      	mov	r0, r4
   b73d2:	bd10      	pop	{r4, pc}

000b73d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b73d4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b73d6:	6843      	ldr	r3, [r0, #4]
   b73d8:	3b01      	subs	r3, #1
    {
   b73da:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b73dc:	6043      	str	r3, [r0, #4]
   b73de:	b963      	cbnz	r3, b73fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b73e0:	6803      	ldr	r3, [r0, #0]
   b73e2:	689b      	ldr	r3, [r3, #8]
   b73e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b73e6:	68a3      	ldr	r3, [r4, #8]
   b73e8:	3b01      	subs	r3, #1
   b73ea:	60a3      	str	r3, [r4, #8]
   b73ec:	b92b      	cbnz	r3, b73fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b73ee:	6823      	ldr	r3, [r4, #0]
   b73f0:	4620      	mov	r0, r4
   b73f2:	68db      	ldr	r3, [r3, #12]
    }
   b73f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b73f8:	4718      	bx	r3
    }
   b73fa:	bd10      	pop	{r4, pc}

000b73fc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b73fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b7400:	b2da      	uxtb	r2, r3
   b7402:	2a09      	cmp	r2, #9
   b7404:	d801      	bhi.n	b740a <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7406:	4618      	mov	r0, r3
   b7408:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b740a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b740e:	2b05      	cmp	r3, #5
   b7410:	d801      	bhi.n	b7416 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b7412:	3857      	subs	r0, #87	; 0x57
   b7414:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7416:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b741a:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b741c:	bf94      	ite	ls
   b741e:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b7420:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b7424:	4770      	bx	lr
	...

000b7428 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7428:	b510      	push	{r4, lr}
            locked_(false) {
   b742a:	2300      	movs	r3, #0
   b742c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b742e:	4b04      	ldr	r3, [pc, #16]	; (b7440 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b7430:	4604      	mov	r4, r0
   b7432:	6818      	ldr	r0, [r3, #0]
   b7434:	f7ff fc90 	bl	b6d58 <os_mutex_recursive_lock>
        locked_ = true;
   b7438:	2301      	movs	r3, #1
   b743a:	7023      	strb	r3, [r4, #0]
    }
   b743c:	4620      	mov	r0, r4
   b743e:	bd10      	pop	{r4, pc}
   b7440:	2003e68c 	.word	0x2003e68c

000b7444 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7444:	b510      	push	{r4, lr}
        if (locked_) {
   b7446:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7448:	4604      	mov	r4, r0
        if (locked_) {
   b744a:	b11b      	cbz	r3, b7454 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b744c:	4b02      	ldr	r3, [pc, #8]	; (b7458 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b744e:	6818      	ldr	r0, [r3, #0]
   b7450:	f7ff fc8a 	bl	b6d68 <os_mutex_recursive_unlock>
    }
   b7454:	4620      	mov	r0, r4
   b7456:	bd10      	pop	{r4, pc}
   b7458:	2003e68c 	.word	0x2003e68c

000b745c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b745c:	b082      	sub	sp, #8
   b745e:	4603      	mov	r3, r0
    address_ = addr;
   b7460:	6808      	ldr	r0, [r1, #0]
   b7462:	6849      	ldr	r1, [r1, #4]
   b7464:	466a      	mov	r2, sp
   b7466:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7468:	466a      	mov	r2, sp
   b746a:	ca03      	ldmia	r2!, {r0, r1}
   b746c:	6018      	str	r0, [r3, #0]
}
   b746e:	4618      	mov	r0, r3
    address_ = addr.address_;
   b7470:	6059      	str	r1, [r3, #4]
}
   b7472:	b002      	add	sp, #8
   b7474:	4770      	bx	lr

000b7476 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b7476:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b7478:	7982      	ldrb	r2, [r0, #6]
   b747a:	798b      	ldrb	r3, [r1, #6]
   b747c:	429a      	cmp	r2, r3
   b747e:	d106      	bne.n	b748e <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b7480:	2206      	movs	r2, #6
   b7482:	f003 f9bb 	bl	ba7fc <memcmp>
   b7486:	fab0 f080 	clz	r0, r0
   b748a:	0940      	lsrs	r0, r0, #5
}
   b748c:	bd08      	pop	{r3, pc}
    return false;
   b748e:	2000      	movs	r0, #0
   b7490:	e7fc      	b.n	b748c <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b7492 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b7492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7496:	6003      	str	r3, [r0, #0]
   b7498:	8083      	strh	r3, [r0, #4]
}
   b749a:	2000      	movs	r0, #0
   b749c:	4770      	bx	lr

000b749e <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b749e:	b508      	push	{r3, lr}
   b74a0:	4602      	mov	r2, r0
        : address_{} {
   b74a2:	2100      	movs	r1, #0
   b74a4:	6001      	str	r1, [r0, #0]
   b74a6:	6041      	str	r1, [r0, #4]
    clear();
   b74a8:	f7ff fff3 	bl	b7492 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b74ac:	7191      	strb	r1, [r2, #6]
}
   b74ae:	4610      	mov	r0, r2
   b74b0:	bd08      	pop	{r3, pc}
	...

000b74b4 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b74b4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b74b6:	2301      	movs	r3, #1
   b74b8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b74ba:	4b05      	ldr	r3, [pc, #20]	; (b74d0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b74bc:	4602      	mov	r2, r0
   b74be:	f103 0110 	add.w	r1, r3, #16
   b74c2:	f853 4b04 	ldr.w	r4, [r3], #4
   b74c6:	f842 4b04 	str.w	r4, [r2], #4
   b74ca:	428b      	cmp	r3, r1
   b74cc:	d1f9      	bne.n	b74c2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b74ce:	bd10      	pop	{r4, pc}
   b74d0:	000bc8aa 	.word	0x000bc8aa

000b74d4 <_ZNK8particle7BleUuid4typeEv>:
}
   b74d4:	6900      	ldr	r0, [r0, #16]
   b74d6:	4770      	bx	lr

000b74d8 <_ZNK8particle7BleUuid7shortedEv>:
}
   b74d8:	8980      	ldrh	r0, [r0, #12]
   b74da:	4770      	bx	lr

000b74dc <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b74dc:	4770      	bx	lr
	...

000b74e0 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b74e0:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b74e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b74e6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b74e8:	4b34      	ldr	r3, [pc, #208]	; (b75bc <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b74ea:	460c      	mov	r4, r1
   b74ec:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b74ee:	4602      	mov	r2, r0
   b74f0:	f103 0110 	add.w	r1, r3, #16
   b74f4:	f853 0b04 	ldr.w	r0, [r3], #4
   b74f8:	f842 0b04 	str.w	r0, [r2], #4
   b74fc:	428b      	cmp	r3, r1
   b74fe:	d1f9      	bne.n	b74f4 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b7500:	b344      	cbz	r4, b7554 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b7502:	2124      	movs	r1, #36	; 0x24
   b7504:	4620      	mov	r0, r4
   b7506:	f003 fa1a 	bl	ba93e <strnlen>
   b750a:	2804      	cmp	r0, #4
   b750c:	f04f 0500 	mov.w	r5, #0
   b7510:	d123      	bne.n	b755a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b7512:	f8ad 5004 	strh.w	r5, [sp, #4]
   b7516:	af01      	add	r7, sp, #4
   b7518:	1ca5      	adds	r5, r4, #2
   b751a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b751c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b7520:	f7ff ff6c 	bl	b73fc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b7524:	f1b0 0800 	subs.w	r8, r0, #0
   b7528:	db12      	blt.n	b7550 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b752a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b752e:	f7ff ff65 	bl	b73fc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7532:	2800      	cmp	r0, #0
   b7534:	db0c      	blt.n	b7550 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b7536:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7538:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b753c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b753e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7542:	d1eb      	bne.n	b751c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7544:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b7548:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b754a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b754e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7550:	2300      	movs	r3, #0
   b7552:	6133      	str	r3, [r6, #16]
}
   b7554:	b002      	add	sp, #8
   b7556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b755a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b755e:	2124      	movs	r1, #36	; 0x24
   b7560:	4620      	mov	r0, r4
   b7562:	f003 f9ec 	bl	ba93e <strnlen>
   b7566:	42a8      	cmp	r0, r5
   b7568:	d807      	bhi.n	b757a <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b756a:	4642      	mov	r2, r8
   b756c:	2100      	movs	r1, #0
   b756e:	4630      	mov	r0, r6
}
   b7570:	b002      	add	sp, #8
   b7572:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b7576:	f003 b979 	b.w	ba86c <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b757a:	f1b8 0f00 	cmp.w	r8, #0
   b757e:	d0e9      	beq.n	b7554 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7580:	5d60      	ldrb	r0, [r4, r5]
   b7582:	f7ff ff3b 	bl	b73fc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b7586:	0603      	lsls	r3, r0, #24
   b7588:	d415      	bmi.n	b75b6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b758a:	0100      	lsls	r0, r0, #4
   b758c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7590:	b2c7      	uxtb	r7, r0
   b7592:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b7596:	2124      	movs	r1, #36	; 0x24
   b7598:	4620      	mov	r0, r4
   b759a:	f003 f9d0 	bl	ba93e <strnlen>
   b759e:	3501      	adds	r5, #1
   b75a0:	42a8      	cmp	r0, r5
   b75a2:	d908      	bls.n	b75b6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b75a4:	5d60      	ldrb	r0, [r4, r5]
   b75a6:	f7ff ff29 	bl	b73fc <_ZN8particle11hexToNibbleEc>
   b75aa:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b75ac:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b75ae:	bfa4      	itt	ge
   b75b0:	4338      	orrge	r0, r7
   b75b2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b75b6:	3501      	adds	r5, #1
   b75b8:	e7d1      	b.n	b755e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b75ba:	bf00      	nop
   b75bc:	000bc8aa 	.word	0x000bc8aa

000b75c0 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b75c0:	b513      	push	{r0, r1, r4, lr}
   b75c2:	4604      	mov	r4, r0
   b75c4:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b75c6:	f7ff ff75 	bl	b74b4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b75ca:	4620      	mov	r0, r4
   b75cc:	9901      	ldr	r1, [sp, #4]
   b75ce:	f7ff ff87 	bl	b74e0 <_ZN8particle7BleUuid9constructEPKc>
}
   b75d2:	4620      	mov	r0, r4
   b75d4:	b002      	add	sp, #8
   b75d6:	bd10      	pop	{r4, pc}

000b75d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:

    void onAttMtuExchangedCallback(const BleOnAttMtuExchangedStdFunction& callback) {
        attMtuExchangedCallback_ = callback;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b75d8:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b75da:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b75de:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b75e2:	4293      	cmp	r3, r2
   b75e4:	4618      	mov	r0, r3
   b75e6:	d006      	beq.n	b75f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b75e8:	6804      	ldr	r4, [r0, #0]
   b75ea:	8824      	ldrh	r4, [r4, #0]
   b75ec:	428c      	cmp	r4, r1
   b75ee:	f103 0308 	add.w	r3, r3, #8
   b75f2:	d1f6      	bne.n	b75e2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   b75f4:	bd10      	pop	{r4, pc}
        return nullptr;
   b75f6:	2000      	movs	r0, #0
   b75f8:	e7fc      	b.n	b75f4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b75fc <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b75fc:	b570      	push	{r4, r5, r6, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b75fe:	2500      	movs	r5, #0
   b7600:	6005      	str	r5, [r0, #0]
   b7602:	4606      	mov	r6, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7604:	2030      	movs	r0, #48	; 0x30
   b7606:	f7fd fa54 	bl	b4ab2 <_Znwj>
	  auto __pi = ::new (__mem)
   b760a:	4604      	mov	r4, r0
   b760c:	b188      	cbz	r0, b7632 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b760e:	2301      	movs	r3, #1
   b7610:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7614:	4b09      	ldr	r3, [pc, #36]	; (b763c <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b7616:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7618:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b761c:	8183      	strh	r3, [r0, #12]
   b761e:	300e      	adds	r0, #14
   b7620:	f7ff ff3d 	bl	b749e <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7624:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7628:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b762c:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7630:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7632:	6074      	str	r4, [r6, #4]
   b7634:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b7636:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7638:	4630      	mov	r0, r6
   b763a:	bd70      	pop	{r4, r5, r6, pc}
   b763c:	000bd5dc 	.word	0x000bd5dc

000b7640 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b7640:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7642:	460d      	mov	r5, r1
   b7644:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7646:	a801      	add	r0, sp, #4
   b7648:	f7ff feee 	bl	b7428 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b764c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b764e:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7652:	6023      	str	r3, [r4, #0]
   b7654:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7658:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b765a:	a801      	add	r0, sp, #4
   b765c:	f7ff fef2 	bl	b7444 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7660:	4620      	mov	r0, r4
   b7662:	b003      	add	sp, #12
   b7664:	bd30      	pop	{r4, r5, pc}

000b7666 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7666:	b530      	push	{r4, r5, lr}
   b7668:	4605      	mov	r5, r0
   b766a:	b087      	sub	sp, #28
   b766c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b766e:	a801      	add	r0, sp, #4
   b7670:	f7ff feda 	bl	b7428 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7674:	682a      	ldr	r2, [r5, #0]
   b7676:	6823      	ldr	r3, [r4, #0]
   b7678:	8812      	ldrh	r2, [r2, #0]
   b767a:	881b      	ldrh	r3, [r3, #0]
   b767c:	429a      	cmp	r2, r3
   b767e:	d10d      	bne.n	b769c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7680:	4629      	mov	r1, r5
   b7682:	a802      	add	r0, sp, #8
   b7684:	f7ff ffdc 	bl	b7640 <_ZNK8particle13BlePeerDevice7addressEv>
   b7688:	4621      	mov	r1, r4
   b768a:	a804      	add	r0, sp, #16
   b768c:	f7ff ffd8 	bl	b7640 <_ZNK8particle13BlePeerDevice7addressEv>
   b7690:	a904      	add	r1, sp, #16
   b7692:	a802      	add	r0, sp, #8
   b7694:	f7ff feef 	bl	b7476 <_ZNK8particle10BleAddresseqERKS0_>
   b7698:	4604      	mov	r4, r0
   b769a:	b900      	cbnz	r0, b769e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b769c:	2400      	movs	r4, #0
    WiringBleLock lk;
   b769e:	a801      	add	r0, sp, #4
   b76a0:	f7ff fed0 	bl	b7444 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b76a4:	4620      	mov	r0, r4
   b76a6:	b007      	add	sp, #28
   b76a8:	bd30      	pop	{r4, r5, pc}
	...

000b76ac <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b76ac:	b510      	push	{r4, lr}
   b76ae:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b76b0:	2064      	movs	r0, #100	; 0x64
   b76b2:	f7fd f9fe 	bl	b4ab2 <_Znwj>
   b76b6:	b168      	cbz	r0, b76d4 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b76b8:	2300      	movs	r3, #0
   b76ba:	e9c0 3300 	strd	r3, r3, [r0]
   b76be:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b76c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b76c6:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b76ca:	6203      	str	r3, [r0, #32]
    _Function_base() : _M_manager(nullptr) { }
   b76cc:	62c3      	str	r3, [r0, #44]	; 0x2c
   b76ce:	63c3      	str	r3, [r0, #60]	; 0x3c
   b76d0:	64c3      	str	r3, [r0, #76]	; 0x4c
   b76d2:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b76d4:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b76d6:	b920      	cbnz	r0, b76e2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b76d8:	4a0a      	ldr	r2, [pc, #40]	; (b7704 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b76da:	490b      	ldr	r1, [pc, #44]	; (b7708 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b76dc:	200a      	movs	r0, #10
   b76de:	f7ff fd0b 	bl	b70f8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b76e2:	2000      	movs	r0, #0
   b76e4:	f7ff fad4 	bl	b6c90 <hal_ble_stack_init>
   b76e8:	b120      	cbz	r0, b76f4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b76ea:	4a06      	ldr	r2, [pc, #24]	; (b7704 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b76ec:	4907      	ldr	r1, [pc, #28]	; (b770c <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b76ee:	200a      	movs	r0, #10
   b76f0:	f7ff fd02 	bl	b70f8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b76f4:	6821      	ldr	r1, [r4, #0]
   b76f6:	4806      	ldr	r0, [pc, #24]	; (b7710 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b76f8:	2200      	movs	r2, #0
   b76fa:	f7ff faf3 	bl	b6ce4 <hal_ble_set_callback_on_periph_link_events>
}
   b76fe:	4620      	mov	r0, r4
   b7700:	bd10      	pop	{r4, pc}
   b7702:	bf00      	nop
   b7704:	000b6d89 	.word	0x000b6d89
   b7708:	000bd514 	.word	0x000bd514
   b770c:	000bd552 	.word	0x000bd552
   b7710:	000b7bfd 	.word	0x000b7bfd

000b7714 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7714:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7716:	4c0a      	ldr	r4, [pc, #40]	; (b7740 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7718:	7823      	ldrb	r3, [r4, #0]
   b771a:	f3bf 8f5b 	dmb	ish
   b771e:	07db      	lsls	r3, r3, #31
   b7720:	d40c      	bmi.n	b773c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7722:	4620      	mov	r0, r4
   b7724:	f7fd f9da 	bl	b4adc <__cxa_guard_acquire>
   b7728:	b140      	cbz	r0, b773c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b772a:	4806      	ldr	r0, [pc, #24]	; (b7744 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b772c:	f7ff ffbe 	bl	b76ac <_ZN8particle14BleLocalDeviceC1Ev>
   b7730:	4620      	mov	r0, r4
   b7732:	f7fd f9d8 	bl	b4ae6 <__cxa_guard_release>
   b7736:	4804      	ldr	r0, [pc, #16]	; (b7748 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7738:	f003 f84e 	bl	ba7d8 <atexit>
    return instance;
}
   b773c:	4801      	ldr	r0, [pc, #4]	; (b7744 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b773e:	bd10      	pop	{r4, pc}
   b7740:	2003e688 	.word	0x2003e688
   b7744:	2003e690 	.word	0x2003e690
   b7748:	000b78ed 	.word	0x000b78ed

000b774c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b774c:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b774e:	2000      	movs	r0, #0
   b7750:	f7ff fa9e 	bl	b6c90 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7754:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7758:	bd08      	pop	{r3, pc}

000b775a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b775a:	b919      	cbnz	r1, b7764 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b775c:	460a      	mov	r2, r1
   b775e:	4608      	mov	r0, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b7760:	f7ff ba9e 	b.w	b6ca0 <hal_ble_gap_set_advertising_data>
   b7764:	e9d1 0100 	ldrd	r0, r1, [r1]
   b7768:	2200      	movs	r2, #0
   b776a:	e7f9      	b.n	b7760 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b776c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b776c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b776e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7772:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7774:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b7778:	42ae      	cmp	r6, r5
   b777a:	d004      	beq.n	b7786 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b777c:	4628      	mov	r0, r5
   b777e:	f002 f873 	bl	b9868 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b7782:	3510      	adds	r5, #16
   b7784:	e7f8      	b.n	b7778 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b7786:	6820      	ldr	r0, [r4, #0]
   b7788:	f7ff fd82 	bl	b7290 <free>
}
   b778c:	4620      	mov	r0, r4
   b778e:	bd70      	pop	{r4, r5, r6, pc}

000b7790 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7790:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b7792:	1e14      	subs	r4, r2, #0
   b7794:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b7796:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b7798:	db02      	blt.n	b77a0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b779a:	1862      	adds	r2, r4, r1
   b779c:	429a      	cmp	r2, r3
   b779e:	dd00      	ble.n	b77a2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b77a0:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b77a2:	682a      	ldr	r2, [r5, #0]
   b77a4:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b77a6:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b77a8:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b77aa:	1a52      	subs	r2, r2, r1
   b77ac:	f003 f844 	bl	ba838 <memmove>
    size_ -= n;
   b77b0:	686a      	ldr	r2, [r5, #4]
   b77b2:	1b12      	subs	r2, r2, r4
   b77b4:	606a      	str	r2, [r5, #4]
}
   b77b6:	bd38      	pop	{r3, r4, r5, pc}

000b77b8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b77b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (offset == nullptr) {
   b77ba:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b77bc:	4604      	mov	r4, r0
   b77be:	460d      	mov	r5, r1
   b77c0:	ab01      	add	r3, sp, #4
   b77c2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b77c6:	f7ff fdc1 	bl	b734c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b77ca:	4602      	mov	r2, r0
   b77cc:	b138      	cbz	r0, b77de <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x26>
        selfData_.removeAt(offset, len);
   b77ce:	9901      	ldr	r1, [sp, #4]
   b77d0:	4620      	mov	r0, r4
   b77d2:	f7ff ffdd 	bl	b7790 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
        remove(type);
   b77d6:	4629      	mov	r1, r5
   b77d8:	4620      	mov	r0, r4
   b77da:	f7ff ffed 	bl	b77b8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b77de:	b003      	add	sp, #12
   b77e0:	bd30      	pop	{r4, r5, pc}

000b77e2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b77e2:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   b77e4:	460c      	mov	r4, r1
   b77e6:	b929      	cbnz	r1, b77f4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b77e8:	460a      	mov	r2, r1
   b77ea:	4608      	mov	r0, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b77ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b77f0:	f7ff ba5e 	b.w	b6cb0 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b77f4:	2101      	movs	r1, #1
   b77f6:	4620      	mov	r0, r4
   b77f8:	f7ff ffde 	bl	b77b8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b77fc:	e9d4 0100 	ldrd	r0, r1, [r4]
   b7800:	2200      	movs	r2, #0
   b7802:	e7f3      	b.n	b77ec <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xa>

000b7804 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b7804:	b538      	push	{r3, r4, r5, lr}
   b7806:	4604      	mov	r4, r0
   b7808:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b780a:	f7ff ffa6 	bl	b775a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b780e:	2800      	cmp	r0, #0
   b7810:	db0a      	blt.n	b7828 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b7812:	4629      	mov	r1, r5
   b7814:	4620      	mov	r0, r4
   b7816:	f7ff ffe4 	bl	b77e2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b781a:	2800      	cmp	r0, #0
   b781c:	db04      	blt.n	b7828 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b781e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b7822:	2000      	movs	r0, #0
   b7824:	f7ff ba4c 	b.w	b6cc0 <hal_ble_gap_start_advertising>
}
   b7828:	bd38      	pop	{r3, r4, r5, pc}
	...

000b782c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
	}
    }

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
   b782c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b782e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b7830:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b7832:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7834:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b7836:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b7838:	f7fd f93b 	bl	b4ab2 <_Znwj>
   b783c:	b118      	cbz	r0, b7846 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b783e:	682b      	ldr	r3, [r5, #0]
   b7840:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b7842:	686b      	ldr	r3, [r5, #4]
   b7844:	6043      	str	r3, [r0, #4]
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   b7846:	4b03      	ldr	r3, [pc, #12]	; (b7854 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   b7848:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b784a:	4b03      	ldr	r3, [pc, #12]	; (b7858 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b784c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b784e:	60a3      	str	r3, [r4, #8]
	  }
      }
   b7850:	4620      	mov	r0, r4
   b7852:	bd38      	pop	{r3, r4, r5, pc}
   b7854:	000b7377 	.word	0x000b7377
   b7858:	000b7383 	.word	0x000b7383

000b785c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b785c:	680b      	ldr	r3, [r1, #0]
   b785e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b7860:	b113      	cbz	r3, b7868 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b7862:	685a      	ldr	r2, [r3, #4]
   b7864:	3201      	adds	r2, #1
   b7866:	605a      	str	r2, [r3, #4]
      }
   b7868:	4770      	bx	lr

000b786a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b786a:	b510      	push	{r4, lr}
   b786c:	f851 3b04 	ldr.w	r3, [r1], #4
   b7870:	4604      	mov	r4, r0
   b7872:	f840 3b04 	str.w	r3, [r0], #4
   b7876:	f7ff fff1 	bl	b785c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b787a:	4620      	mov	r0, r4
   b787c:	bd10      	pop	{r4, pc}

000b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b787e:	b510      	push	{r4, lr}
   b7880:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b7882:	6800      	ldr	r0, [r0, #0]
   b7884:	b108      	cbz	r0, b788a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b7886:	f7ff fda5 	bl	b73d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b788a:	4620      	mov	r0, r4
   b788c:	bd10      	pop	{r4, pc}

000b788e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b788e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b7890:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b7894:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b7896:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b789a:	42ae      	cmp	r6, r5
   b789c:	d004      	beq.n	b78a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   b789e:	1d28      	adds	r0, r5, #4
   b78a0:	f7ff ffed 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78a4:	3508      	adds	r5, #8
   b78a6:	e7f8      	b.n	b789a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b78a8:	6820      	ldr	r0, [r4, #0]
   b78aa:	f7ff fcf1 	bl	b7290 <free>
}
   b78ae:	4620      	mov	r0, r4
   b78b0:	bd70      	pop	{r4, r5, r6, pc}

000b78b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b78b2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b78b4:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b78b8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b78ba:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b78be:	42ae      	cmp	r6, r5
   b78c0:	d004      	beq.n	b78cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b78c2:	1d28      	adds	r0, r5, #4
   b78c4:	f7ff ffdb 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b78c8:	3508      	adds	r5, #8
   b78ca:	e7f8      	b.n	b78be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b78cc:	6820      	ldr	r0, [r4, #0]
   b78ce:	f7ff fcdf 	bl	b7290 <free>
}
   b78d2:	4620      	mov	r0, r4
   b78d4:	bd70      	pop	{r4, r5, r6, pc}

000b78d6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b78d6:	b510      	push	{r4, lr}
   b78d8:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b78da:	3024      	adds	r0, #36	; 0x24
   b78dc:	f7ff ffe9 	bl	b78b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b78e0:	f104 0018 	add.w	r0, r4, #24
   b78e4:	f7ff ffd3 	bl	b788e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b78e8:	bd10      	pop	{r4, pc}
	...

000b78ec <__tcf_0>:
    static BleLocalDevice instance;
   b78ec:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b78ee:	4b17      	ldr	r3, [pc, #92]	; (b794c <__tcf_0+0x60>)
   b78f0:	681c      	ldr	r4, [r3, #0]
   b78f2:	b354      	cbz	r4, b794a <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b78f4:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b78f8:	f7ff fd63 	bl	b73c2 <_ZNSt14_Function_baseD1Ev>
   b78fc:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7900:	f7ff fd5f 	bl	b73c2 <_ZNSt14_Function_baseD1Ev>
   b7904:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7908:	f7ff fd5b 	bl	b73c2 <_ZNSt14_Function_baseD1Ev>
   b790c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7910:	f7ff fd57 	bl	b73c2 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b7914:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b7918:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b791c:	42ae      	cmp	r6, r5
   b791e:	d004      	beq.n	b792a <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b7920:	1d28      	adds	r0, r5, #4
   b7922:	f7ff ffac 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7926:	3508      	adds	r5, #8
   b7928:	e7f8      	b.n	b791c <__tcf_0+0x30>
    ::free(ptr);
   b792a:	69a0      	ldr	r0, [r4, #24]
   b792c:	f7ff fcb0 	bl	b7290 <free>
    ~BleLocalDeviceImpl() = default;
   b7930:	f104 000c 	add.w	r0, r4, #12
   b7934:	f7ff ffbd 	bl	b78b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b7938:	4620      	mov	r0, r4
   b793a:	f7ff ffa8 	bl	b788e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b793e:	4620      	mov	r0, r4
   b7940:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b7942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b7946:	f7fd b8ba 	b.w	b4abe <_ZdlPvj>
   b794a:	bd70      	pop	{r4, r5, r6, pc}
   b794c:	2003e690 	.word	0x2003e690

000b7950 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b7950:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b7952:	b510      	push	{r4, lr}
      if (_M_empty())
   b7954:	b90a      	cbnz	r2, b795a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b7956:	f002 fe29 	bl	ba5ac <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    }
   b795a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b795e:	68c3      	ldr	r3, [r0, #12]
   b7960:	4718      	bx	r3

000b7962 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b7962:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b7964:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b7966:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b7968:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b796a:	dd03      	ble.n	b7974 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b796c:	f7ff fc98 	bl	b72a0 <realloc>
            if (!d) {
   b7970:	b918      	cbnz	r0, b797a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b7972:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b7974:	f7ff fc8c 	bl	b7290 <free>
        T* d = nullptr;
   b7978:	2000      	movs	r0, #0
        data_ = d;
   b797a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b797c:	60a5      	str	r5, [r4, #8]
        return true;
   b797e:	2001      	movs	r0, #1
   b7980:	e7f7      	b.n	b7972 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b7982 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b7982:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b7984:	6883      	ldr	r3, [r0, #8]
   b7986:	428b      	cmp	r3, r1
   b7988:	da02      	bge.n	b7990 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b798a:	f7ff ffea 	bl	b7962 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b798e:	bd08      	pop	{r3, pc}
    return true;
   b7990:	2001      	movs	r0, #1
   b7992:	e7fc      	b.n	b798e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b7994 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b7994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7998:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b799a:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b799c:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b799e:	4419      	add	r1, r3
   b79a0:	6883      	ldr	r3, [r0, #8]
   b79a2:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b79a4:	4604      	mov	r4, r0
   b79a6:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b79a8:	dc12      	bgt.n	b79d0 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b79aa:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b79ac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b79ae:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b79b0:	1bd2      	subs	r2, r2, r7
   b79b2:	4631      	mov	r1, r6
   b79b4:	1970      	adds	r0, r6, r5
   b79b6:	f002 ff3f 	bl	ba838 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b79ba:	462a      	mov	r2, r5
   b79bc:	4641      	mov	r1, r8
   b79be:	4630      	mov	r0, r6
   b79c0:	f002 ff2c 	bl	ba81c <memcpy>
    size_ += n;
   b79c4:	6863      	ldr	r3, [r4, #4]
   b79c6:	442b      	add	r3, r5
   b79c8:	6063      	str	r3, [r4, #4]
    return true;
   b79ca:	2001      	movs	r0, #1
}
   b79cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b79d0:	f7ff ffc7 	bl	b7962 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b79d4:	2800      	cmp	r0, #0
   b79d6:	d1e8      	bne.n	b79aa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b79d8:	e7f8      	b.n	b79cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b79da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b79da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79dc:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b79de:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b79e2:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b79e4:	4604      	mov	r4, r0
   b79e6:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b79e8:	da0b      	bge.n	b7a02 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b79ea:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b79ec:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b79ee:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b79f0:	1b52      	subs	r2, r2, r5
   b79f2:	1c48      	adds	r0, r1, #1
   b79f4:	f002 ff20 	bl	ba838 <memmove>
    new(p) T(std::move(value));
   b79f8:	557e      	strb	r6, [r7, r5]
    ++size_;
   b79fa:	6863      	ldr	r3, [r4, #4]
   b79fc:	3301      	adds	r3, #1
   b79fe:	6063      	str	r3, [r4, #4]
}
   b7a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7a02:	3101      	adds	r1, #1
   b7a04:	f7ff ffad 	bl	b7962 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b7a08:	2800      	cmp	r0, #0
   b7a0a:	d1ee      	bne.n	b79ea <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b7a0c:	e7f8      	b.n	b7a00 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b7a0e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7a0e:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b7a10:	6841      	ldr	r1, [r0, #4]
   b7a12:	f7ff bfe2 	b.w	b79da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b7a16 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7a16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b7a1a:	4604      	mov	r4, r0
   b7a1c:	461d      	mov	r5, r3
   b7a1e:	460f      	mov	r7, r1
   b7a20:	ab01      	add	r3, sp, #4
   b7a22:	4690      	mov	r8, r2
   b7a24:	460a      	mov	r2, r1
   b7a26:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7a2a:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b7a2e:	f7ff fc8d 	bl	b734c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b7a32:	1cae      	adds	r6, r5, #2
   b7a34:	6863      	ldr	r3, [r4, #4]
   b7a36:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b7a38:	f1b9 0f00 	cmp.w	r9, #0
   b7a3c:	d126      	bne.n	b7a8c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b7a3e:	b328      	cbz	r0, b7a8c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7a40:	4433      	add	r3, r6
   b7a42:	1a1b      	subs	r3, r3, r0
   b7a44:	2bff      	cmp	r3, #255	; 0xff
   b7a46:	d809      	bhi.n	b7a5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b7a48:	9901      	ldr	r1, [sp, #4]
   b7a4a:	4620      	mov	r0, r4
   b7a4c:	f7ff fea0 	bl	b7790 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7a50:	6861      	ldr	r1, [r4, #4]
   b7a52:	4620      	mov	r0, r4
   b7a54:	4431      	add	r1, r6
   b7a56:	f7ff ff94 	bl	b7982 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7a5a:	b918      	cbnz	r0, b7a64 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b7a5c:	6860      	ldr	r0, [r4, #4]
}
   b7a5e:	b003      	add	sp, #12
   b7a60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b7a64:	1c6a      	adds	r2, r5, #1
   b7a66:	9901      	ldr	r1, [sp, #4]
   b7a68:	b2d2      	uxtb	r2, r2
   b7a6a:	4620      	mov	r0, r4
   b7a6c:	f7ff ffb5 	bl	b79da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b7a70:	9901      	ldr	r1, [sp, #4]
   b7a72:	463a      	mov	r2, r7
   b7a74:	3101      	adds	r1, #1
   b7a76:	4620      	mov	r0, r4
   b7a78:	f7ff ffaf 	bl	b79da <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b7a7c:	9901      	ldr	r1, [sp, #4]
   b7a7e:	462b      	mov	r3, r5
   b7a80:	4642      	mov	r2, r8
   b7a82:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b7a84:	4620      	mov	r0, r4
   b7a86:	f7ff ff85 	bl	b7994 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b7a8a:	e7e7      	b.n	b7a5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b7a8c:	18f1      	adds	r1, r6, r3
   b7a8e:	29ff      	cmp	r1, #255	; 0xff
   b7a90:	d8e4      	bhi.n	b7a5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b7a92:	4620      	mov	r0, r4
   b7a94:	f7ff ff75 	bl	b7982 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b7a98:	2800      	cmp	r0, #0
   b7a9a:	d0df      	beq.n	b7a5c <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b7a9c:	1c69      	adds	r1, r5, #1
   b7a9e:	b2c9      	uxtb	r1, r1
   b7aa0:	4620      	mov	r0, r4
   b7aa2:	f7ff ffb4 	bl	b7a0e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b7aa6:	4639      	mov	r1, r7
   b7aa8:	4620      	mov	r0, r4
   b7aaa:	f7ff ffb0 	bl	b7a0e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b7aae:	6861      	ldr	r1, [r4, #4]
   b7ab0:	462b      	mov	r3, r5
   b7ab2:	4642      	mov	r2, r8
   b7ab4:	e7e6      	b.n	b7a84 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b7ab6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b7ab6:	b430      	push	{r4, r5}
   b7ab8:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b7abc:	b11a      	cbz	r2, b7ac6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b7abe:	9502      	str	r5, [sp, #8]
}
   b7ac0:	bc30      	pop	{r4, r5}
   b7ac2:	f7ff bfa8 	b.w	b7a16 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b7ac6:	6840      	ldr	r0, [r0, #4]
}
   b7ac8:	bc30      	pop	{r4, r5}
   b7aca:	4770      	bx	lr

000b7acc <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b7acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b7ace:	2300      	movs	r3, #0
   b7ad0:	e9c0 3300 	strd	r3, r3, [r0]
   b7ad4:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7ad6:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7ad8:	9300      	str	r3, [sp, #0]
   b7ada:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b7adc:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7ae0:	4619      	mov	r1, r3
   b7ae2:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b7ae6:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b7ae8:	f7ff ffe5 	bl	b7ab6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b7aec:	4620      	mov	r0, r4
   b7aee:	b004      	add	sp, #16
   b7af0:	bd10      	pop	{r4, pc}

000b7af2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b7af2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b7af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7af6:	4604      	mov	r4, r0
   b7af8:	460d      	mov	r5, r1
   b7afa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b7afc:	d914      	bls.n	b7b28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b7afe:	4290      	cmp	r0, r2
   b7b00:	d213      	bcs.n	b7b2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b7b02:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b7b06:	1a75      	subs	r5, r6, r1
   b7b08:	f1a1 0708 	sub.w	r7, r1, #8
   b7b0c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b7b0e:	42b7      	cmp	r7, r6
   b7b10:	d018      	beq.n	b7b44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b7b12:	b11c      	cbz	r4, b7b1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b7b14:	4631      	mov	r1, r6
   b7b16:	4620      	mov	r0, r4
   b7b18:	f7ff fea7 	bl	b786a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7b1c:	1d30      	adds	r0, r6, #4
   b7b1e:	f7ff feae 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b7b22:	3e08      	subs	r6, #8
   b7b24:	3c08      	subs	r4, #8
   b7b26:	e7f2      	b.n	b7b0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b7b28:	d00c      	beq.n	b7b44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b7b2a:	42b5      	cmp	r5, r6
   b7b2c:	d00a      	beq.n	b7b44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b7b2e:	b11c      	cbz	r4, b7b38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b7b30:	4629      	mov	r1, r5
   b7b32:	4620      	mov	r0, r4
   b7b34:	f7ff fe99 	bl	b786a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b7b38:	1d28      	adds	r0, r5, #4
   b7b3a:	f7ff fea0 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b7b3e:	3508      	adds	r5, #8
   b7b40:	3408      	adds	r4, #8
   b7b42:	e7f2      	b.n	b7b2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b7b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7b46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b7b46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7b48:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b7b4a:	6846      	ldr	r6, [r0, #4]
   b7b4c:	4668      	mov	r0, sp
   b7b4e:	f7ff fe8c 	bl	b786a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b7b52:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b7b56:	429f      	cmp	r7, r3
   b7b58:	db12      	blt.n	b7b80 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b7b5a:	3701      	adds	r7, #1
        if (n > 0) {
   b7b5c:	2f00      	cmp	r7, #0
   b7b5e:	dd29      	ble.n	b7bb4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b7b60:	00f8      	lsls	r0, r7, #3
   b7b62:	f7ff fb8d 	bl	b7280 <malloc>
            if (!d) {
   b7b66:	4605      	mov	r5, r0
   b7b68:	b1f0      	cbz	r0, b7ba8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b7b6a:	e9d4 1200 	ldrd	r1, r2, [r4]
   b7b6e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b7b72:	f7ff ffbe 	bl	b7af2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b7b76:	6820      	ldr	r0, [r4, #0]
   b7b78:	f7ff fb8a 	bl	b7290 <free>
        data_ = d;
   b7b7c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b7b7e:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b7b80:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b7b82:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b7b84:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b7b88:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7b8c:	4631      	mov	r1, r6
   b7b8e:	f106 0008 	add.w	r0, r6, #8
   b7b92:	f7ff ffae 	bl	b7af2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b7b96:	b11e      	cbz	r6, b7ba0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b7b98:	4669      	mov	r1, sp
   b7b9a:	4630      	mov	r0, r6
   b7b9c:	f7ff fe65 	bl	b786a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b7ba0:	6863      	ldr	r3, [r4, #4]
   b7ba2:	3301      	adds	r3, #1
   b7ba4:	6063      	str	r3, [r4, #4]
    return true;
   b7ba6:	2501      	movs	r5, #1
   b7ba8:	a801      	add	r0, sp, #4
   b7baa:	f7ff fe68 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b7bae:	4628      	mov	r0, r5
   b7bb0:	b003      	add	sp, #12
   b7bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b7bb4:	2500      	movs	r5, #0
   b7bb6:	e7de      	b.n	b7b76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b7bb8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b7bba:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b7bbe:	4605      	mov	r5, r0
   b7bc0:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b7bc2:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b7bc6:	42a6      	cmp	r6, r4
   b7bc8:	d005      	beq.n	b7bd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b7bca:	4639      	mov	r1, r7
   b7bcc:	4620      	mov	r0, r4
   b7bce:	f7ff fd4a 	bl	b7666 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b7bd2:	b108      	cbz	r0, b7bd8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b7bd4:	b914      	cbnz	r4, b7bdc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b7bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b7bd8:	3408      	adds	r4, #8
   b7bda:	e7f4      	b.n	b7bc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b7bdc:	1d20      	adds	r0, r4, #4
   b7bde:	f7ff fe4e 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b7be2:	e9d5 3200 	ldrd	r3, r2, [r5]
   b7be6:	f104 0108 	add.w	r1, r4, #8
   b7bea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b7bee:	4620      	mov	r0, r4
   b7bf0:	f7ff ff7f 	bl	b7af2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b7bf4:	686b      	ldr	r3, [r5, #4]
   b7bf6:	3b01      	subs	r3, #1
   b7bf8:	606b      	str	r3, [r5, #4]
    return true;
   b7bfa:	e7ec      	b.n	b7bd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b7bfc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7c00:	4605      	mov	r5, r0
   b7c02:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b7c04:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b7c06:	460c      	mov	r4, r1
        WiringBleLock lk;
   b7c08:	f7ff fc0e 	bl	b7428 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b7c0c:	682e      	ldr	r6, [r5, #0]
   b7c0e:	1ef3      	subs	r3, r6, #3
   b7c10:	2b0d      	cmp	r3, #13
   b7c12:	d83c      	bhi.n	b7c8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7c14:	e8df f013 	tbh	[pc, r3, lsl #1]
   b7c18:	0057000e 	.word	0x0057000e
   b7c1c:	00d3003b 	.word	0x00d3003b
   b7c20:	003b003b 	.word	0x003b003b
   b7c24:	003b003b 	.word	0x003b003b
   b7c28:	009d003b 	.word	0x009d003b
   b7c2c:	009d009d 	.word	0x009d009d
   b7c30:	009d009d 	.word	0x009d009d
                    BlePeerDevice peer;
   b7c34:	a804      	add	r0, sp, #16
   b7c36:	f7ff fce1 	bl	b75fc <_ZN8particle13BlePeerDeviceC1Ev>
                    peer.impl()->connHandle() = event->conn_handle;
   b7c3a:	9b04      	ldr	r3, [sp, #16]
   b7c3c:	89aa      	ldrh	r2, [r5, #12]
   b7c3e:	801a      	strh	r2, [r3, #0]
                    peer.impl()->address() = event->params.connected.info->address;
   b7c40:	6869      	ldr	r1, [r5, #4]
   b7c42:	9804      	ldr	r0, [sp, #16]
   b7c44:	3108      	adds	r1, #8
   b7c46:	3002      	adds	r0, #2
   b7c48:	f7ff fc08 	bl	b745c <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b7c4c:	a904      	add	r1, sp, #16
   b7c4e:	a806      	add	r0, sp, #24
   b7c50:	f7ff fe0b 	bl	b786a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                    if (!impl->peers_.append(peer)) {
   b7c54:	a906      	add	r1, sp, #24
   b7c56:	f104 0018 	add.w	r0, r4, #24
   b7c5a:	f7ff ff74 	bl	b7b46 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b7c5e:	4605      	mov	r5, r0
   b7c60:	a807      	add	r0, sp, #28
   b7c62:	f7ff fe0c 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7c66:	b9c5      	cbnz	r5, b7c9a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                        LOG(TRACE, "Failed to append peer Central device.");
   b7c68:	2320      	movs	r3, #32
   b7c6a:	e9cd 3506 	strd	r3, r5, [sp, #24]
   b7c6e:	4b5e      	ldr	r3, [pc, #376]	; (b7de8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b7c70:	495e      	ldr	r1, [pc, #376]	; (b7dec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7c72:	9300      	str	r3, [sp, #0]
   b7c74:	aa06      	add	r2, sp, #24
   b7c76:	462b      	mov	r3, r5
   b7c78:	2001      	movs	r0, #1
   b7c7a:	f7ff fa45 	bl	b7108 <log_message>
                        hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b7c7e:	9b04      	ldr	r3, [sp, #16]
   b7c80:	4629      	mov	r1, r5
   b7c82:	8818      	ldrh	r0, [r3, #0]
   b7c84:	f7ff f824 	bl	b6cd0 <hal_ble_gap_disconnect>
   b7c88:	a805      	add	r0, sp, #20
   b7c8a:	f7ff fdf8 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b7c8e:	a803      	add	r0, sp, #12
   b7c90:	f7ff fbd8 	bl	b7444 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b7c94:	b00e      	add	sp, #56	; 0x38
   b7c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if (impl->connectedCallback_) {
   b7c9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b7c9c:	b123      	cbz	r3, b7ca8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
                        impl->connectedCallback_(peer);
   b7c9e:	a904      	add	r1, sp, #16
   b7ca0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b7ca4:	f7ff fe54 	bl	b7950 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b7ca8:	a805      	add	r0, sp, #20
   b7caa:	f7ff fde8 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                LOG(TRACE, "Connected");
   b7cae:	2120      	movs	r1, #32
   b7cb0:	2300      	movs	r3, #0
   b7cb2:	e9cd 1306 	strd	r1, r3, [sp, #24]
   b7cb6:	4a4e      	ldr	r2, [pc, #312]	; (b7df0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
                    LOG(TRACE, "Disconnected");
   b7cb8:	9200      	str	r2, [sp, #0]
   b7cba:	494c      	ldr	r1, [pc, #304]	; (b7dec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b7cbc:	aa06      	add	r2, sp, #24
   b7cbe:	2001      	movs	r0, #1
   b7cc0:	f7ff fa22 	bl	b7108 <log_message>
   b7cc4:	e7e3      	b.n	b7c8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7cc6:	89a9      	ldrh	r1, [r5, #12]
   b7cc8:	4620      	mov	r0, r4
   b7cca:	f7ff fc85 	bl	b75d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7cce:	4606      	mov	r6, r0
   b7cd0:	2800      	cmp	r0, #0
   b7cd2:	d0dc      	beq.n	b7c8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b7cd4:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b7cd6:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b7cda:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7cde:	8029      	strh	r1, [r5, #0]
   b7ce0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b7ce4:	429a      	cmp	r2, r3
   b7ce6:	d003      	beq.n	b7cf0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
   b7ce8:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7cec:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b7cee:	e7f9      	b.n	b7ce4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe8>
    destruct(data_, data_ + size_);
   b7cf0:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b7cf4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7cf8:	45b8      	cmp	r8, r7
   b7cfa:	d004      	beq.n	b7d06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10a>
      ~__shared_ptr() = default;
   b7cfc:	1d38      	adds	r0, r7, #4
   b7cfe:	f7ff fdbe 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7d02:	3708      	adds	r7, #8
   b7d04:	e7f8      	b.n	b7cf8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfc>
    size_ = 0;
   b7d06:	2300      	movs	r3, #0
   b7d08:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b7d0a:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b7d0e:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b7d12:	45b8      	cmp	r8, r7
   b7d14:	d004      	beq.n	b7d20 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
   b7d16:	1d38      	adds	r0, r7, #4
   b7d18:	f7ff fdb1 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b7d1c:	3708      	adds	r7, #8
   b7d1e:	e7f8      	b.n	b7d12 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
    size_ = 0;
   b7d20:	2300      	movs	r3, #0
   b7d22:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b7d24:	72ab      	strb	r3, [r5, #10]
                        if (impl->disconnectedCallback_) {
   b7d26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b7d28:	b123      	cbz	r3, b7d34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>
                            impl->disconnectedCallback_(*peer);
   b7d2a:	4631      	mov	r1, r6
   b7d2c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b7d30:	f7ff fe0e 	bl	b7950 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
      { return _M_ptr; }
   b7d34:	6833      	ldr	r3, [r6, #0]
                        peer->impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b7d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b7d3a:	801a      	strh	r2, [r3, #0]
                        impl->peers_.removeOne(*peer);
   b7d3c:	4631      	mov	r1, r6
   b7d3e:	f104 0018 	add.w	r0, r4, #24
   b7d42:	f7ff ff39 	bl	b7bb8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
                    LOG(TRACE, "Disconnected");
   b7d46:	2220      	movs	r2, #32
   b7d48:	2300      	movs	r3, #0
   b7d4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b7d4e:	4a29      	ldr	r2, [pc, #164]	; (b7df4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f8>)
   b7d50:	e7b2      	b.n	b7cb8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbc>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7d52:	89a9      	ldrh	r1, [r5, #12]
   b7d54:	4620      	mov	r0, r4
   b7d56:	f7ff fc3f 	bl	b75d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b7d5a:	2800      	cmp	r0, #0
   b7d5c:	d097      	beq.n	b7c8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b7d5e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b7d60:	2b00      	cmp	r3, #0
   b7d62:	d094      	beq.n	b7c8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b7d64:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7d66:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b7d68:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b7d6c:	d001      	beq.n	b7d72 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x176>
   b7d6e:	2e10      	cmp	r6, #16
   b7d70:	d117      	bne.n	b7da2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a6>
                        BlePairingEventPayload payload = {};
   b7d72:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b7d74:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b7d76:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b7d78:	2506      	movs	r5, #6
                        };
   b7d7a:	f88d 3015 	strb.w	r3, [sp, #21]
   b7d7e:	9104      	str	r1, [sp, #16]
   b7d80:	f88d 2014 	strb.w	r2, [sp, #20]
   b7d84:	9006      	str	r0, [sp, #24]
   b7d86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b7d8a:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b7d8c:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b7d90:	9508      	str	r5, [sp, #32]
   b7d92:	e883 0003 	stmia.w	r3, {r0, r1}
   b7d96:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b7d98:	a906      	add	r1, sp, #24
   b7d9a:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b7d9e:	4798      	blx	r3
   b7da0:	e775      	b.n	b7c8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b7da2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7da4:	bf01      	itttt	eq
   b7da6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b7da8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b7daa:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b7dae:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b7db0:	bf0f      	iteee	eq
   b7db2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b7db6:	461a      	movne	r2, r3
   b7db8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b7dba:	461d      	movne	r5, r3
   b7dbc:	e7dd      	b.n	b7d7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b7dbe:	89a9      	ldrh	r1, [r5, #12]
   b7dc0:	4620      	mov	r0, r4
   b7dc2:	f7ff fc09 	bl	b75d8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b7dc6:	4601      	mov	r1, r0
   b7dc8:	2800      	cmp	r0, #0
   b7dca:	f43f af60 	beq.w	b7c8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7dce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b7dd0:	2b00      	cmp	r3, #0
   b7dd2:	f43f af5c 	beq.w	b7c8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b7dd6:	686b      	ldr	r3, [r5, #4]
   b7dd8:	9306      	str	r3, [sp, #24]
   b7dda:	aa06      	add	r2, sp, #24
   b7ddc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b7dde:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b7de2:	4798      	blx	r3
   b7de4:	e753      	b.n	b7c8e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b7de6:	bf00      	nop
   b7de8:	000bd594 	.word	0x000bd594
   b7dec:	000bd52b 	.word	0x000bd52b
   b7df0:	000bd5ba 	.word	0x000bd5ba
   b7df4:	000bd5c4 	.word	0x000bd5c4

000b7df8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b7df8:	b513      	push	{r0, r1, r4, lr}
   b7dfa:	460b      	mov	r3, r1
   b7dfc:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7dfe:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7e02:	466c      	mov	r4, sp
   b7e04:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b7e08:	e893 0003 	ldmia.w	r3, {r0, r1}
   b7e0c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b7e10:	e894 0003 	ldmia.w	r4, {r0, r1}
   b7e14:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b7e18:	b002      	add	sp, #8
   b7e1a:	bd10      	pop	{r4, pc}

000b7e1c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   b7e1c:	b538      	push	{r3, r4, r5, lr}
   b7e1e:	4605      	mov	r5, r0
   b7e20:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b7e22:	f7ff ffe9 	bl	b7df8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e26:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b7e28:	68a2      	ldr	r2, [r4, #8]
   b7e2a:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b7e2c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b7e2e:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b7e30:	68e2      	ldr	r2, [r4, #12]
   b7e32:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b7e34:	60e3      	str	r3, [r4, #12]
      }
   b7e36:	bd38      	pop	{r3, r4, r5, pc}

000b7e38 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7e38:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7e3a:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   b7e3c:	b08a      	sub	sp, #40	; 0x28
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   b7e3e:	3434      	adds	r4, #52	; 0x34
   b7e40:	b1b9      	cbz	r1, b7e72 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7e42:	e9cd 1200 	strd	r1, r2, [sp]
   b7e46:	a802      	add	r0, sp, #8
   b7e48:	4669      	mov	r1, sp
   b7e4a:	f7ff fcef 	bl	b782c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7e4e:	2300      	movs	r3, #0
	__x.swap(*this);
   b7e50:	a906      	add	r1, sp, #24
   b7e52:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7e54:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7e56:	f7ff ffe1 	bl	b7e1c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7e5a:	4621      	mov	r1, r4
   b7e5c:	a806      	add	r0, sp, #24
   b7e5e:	f7ff ffdd 	bl	b7e1c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7e62:	a806      	add	r0, sp, #24
   b7e64:	f7ff faad 	bl	b73c2 <_ZNSt14_Function_baseD1Ev>
   b7e68:	a802      	add	r0, sp, #8
   b7e6a:	f7ff faaa 	bl	b73c2 <_ZNSt14_Function_baseD1Ev>
}
   b7e6e:	b00a      	add	sp, #40	; 0x28
   b7e70:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7e72:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7e74:	e7eb      	b.n	b7e4e <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7e76 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7e76:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7e78:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   b7e7a:	b08a      	sub	sp, #40	; 0x28
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   b7e7c:	3424      	adds	r4, #36	; 0x24
   b7e7e:	b1b9      	cbz	r1, b7eb0 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x3a>
   b7e80:	e9cd 1200 	strd	r1, r2, [sp]
   b7e84:	a802      	add	r0, sp, #8
   b7e86:	4669      	mov	r1, sp
   b7e88:	f7ff fcd0 	bl	b782c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b7e8c:	2300      	movs	r3, #0
	__x.swap(*this);
   b7e8e:	a906      	add	r1, sp, #24
   b7e90:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b7e92:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b7e94:	f7ff ffc2 	bl	b7e1c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   b7e98:	4621      	mov	r1, r4
   b7e9a:	a806      	add	r0, sp, #24
   b7e9c:	f7ff ffbe 	bl	b7e1c <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   b7ea0:	a806      	add	r0, sp, #24
   b7ea2:	f7ff fa8e 	bl	b73c2 <_ZNSt14_Function_baseD1Ev>
   b7ea6:	a802      	add	r0, sp, #8
   b7ea8:	f7ff fa8b 	bl	b73c2 <_ZNSt14_Function_baseD1Ev>
}
   b7eac:	b00a      	add	sp, #40	; 0x28
   b7eae:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b7eb0:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b7eb2:	e7eb      	b.n	b7e8c <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000b7eb4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b7eb4:	4802      	ldr	r0, [pc, #8]	; (b7ec0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b7eb6:	2300      	movs	r3, #0
   b7eb8:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b7eba:	f7fe bf3d 	b.w	b6d38 <os_mutex_recursive_create>
   b7ebe:	bf00      	nop
   b7ec0:	2003e68c 	.word	0x2003e68c

000b7ec4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b7ec4:	2200      	movs	r2, #0
   b7ec6:	6840      	ldr	r0, [r0, #4]
   b7ec8:	4611      	mov	r1, r2
   b7eca:	f7ff b9b1 	b.w	b7230 <network_listening>

000b7ece <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7ece:	2200      	movs	r2, #0
   b7ed0:	6840      	ldr	r0, [r0, #4]
   b7ed2:	4611      	mov	r1, r2
   b7ed4:	f7ff b9bc 	b.w	b7250 <network_get_listen_timeout>

000b7ed8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7ed8:	6840      	ldr	r0, [r0, #4]
   b7eda:	2200      	movs	r2, #0
   b7edc:	f7ff b9b0 	b.w	b7240 <network_set_listen_timeout>

000b7ee0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7ee0:	6840      	ldr	r0, [r0, #4]
   b7ee2:	2200      	movs	r2, #0
   b7ee4:	f081 0101 	eor.w	r1, r1, #1
   b7ee8:	f7ff b99a 	b.w	b7220 <network_listen>

000b7eec <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7eec:	2300      	movs	r3, #0
   b7eee:	6840      	ldr	r0, [r0, #4]
   b7ef0:	461a      	mov	r2, r3
   b7ef2:	4619      	mov	r1, r3
   b7ef4:	f7ff b98c 	b.w	b7210 <network_off>

000b7ef8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7ef8:	2300      	movs	r3, #0
   b7efa:	6840      	ldr	r0, [r0, #4]
   b7efc:	461a      	mov	r2, r3
   b7efe:	4619      	mov	r1, r3
   b7f00:	f7ff b97e 	b.w	b7200 <network_on>

000b7f04 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7f04:	2200      	movs	r2, #0
   b7f06:	6840      	ldr	r0, [r0, #4]
   b7f08:	4611      	mov	r1, r2
   b7f0a:	f7ff b971 	b.w	b71f0 <network_ready>

000b7f0e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7f0e:	2200      	movs	r2, #0
   b7f10:	6840      	ldr	r0, [r0, #4]
   b7f12:	4611      	mov	r1, r2
   b7f14:	f7ff b95c 	b.w	b71d0 <network_connecting>

000b7f18 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7f18:	6840      	ldr	r0, [r0, #4]
   b7f1a:	2200      	movs	r2, #0
   b7f1c:	2102      	movs	r1, #2
   b7f1e:	f7ff b95f 	b.w	b71e0 <network_disconnect>

000b7f22 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7f22:	2300      	movs	r3, #0
   b7f24:	6840      	ldr	r0, [r0, #4]
   b7f26:	461a      	mov	r2, r3
   b7f28:	f7ff b94a 	b.w	b71c0 <network_connect>

000b7f2c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7f2c:	4b02      	ldr	r3, [pc, #8]	; (b7f38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7f2e:	2203      	movs	r2, #3
   b7f30:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b7f32:	4a02      	ldr	r2, [pc, #8]	; (b7f3c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7f34:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7f36:	4770      	bx	lr
   b7f38:	2003e694 	.word	0x2003e694
   b7f3c:	000bd600 	.word	0x000bd600

000b7f40 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7f40:	4770      	bx	lr

000b7f42 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b7f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f44:	4606      	mov	r6, r0
   b7f46:	4615      	mov	r5, r2
   b7f48:	460c      	mov	r4, r1
   b7f4a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7f4c:	42bc      	cmp	r4, r7
   b7f4e:	d006      	beq.n	b7f5e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7f50:	6833      	ldr	r3, [r6, #0]
   b7f52:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7f56:	689b      	ldr	r3, [r3, #8]
   b7f58:	4630      	mov	r0, r6
   b7f5a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7f5c:	e7f6      	b.n	b7f4c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7f5e:	4628      	mov	r0, r5
   b7f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7f62 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b7f62:	7c00      	ldrb	r0, [r0, #16]
   b7f64:	2200      	movs	r2, #0
   b7f66:	f7fe bf5f 	b.w	b6e28 <hal_i2c_write>

000b7f6a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7f6a:	7c00      	ldrb	r0, [r0, #16]
   b7f6c:	2100      	movs	r1, #0
   b7f6e:	f7fe bf63 	b.w	b6e38 <hal_i2c_available>

000b7f72 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b7f72:	7c00      	ldrb	r0, [r0, #16]
   b7f74:	2100      	movs	r1, #0
   b7f76:	f7fe bf67 	b.w	b6e48 <hal_i2c_read>

000b7f7a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7f7a:	7c00      	ldrb	r0, [r0, #16]
   b7f7c:	2100      	movs	r1, #0
   b7f7e:	f7fe bf6b 	b.w	b6e58 <hal_i2c_peek>

000b7f82 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b7f82:	7c00      	ldrb	r0, [r0, #16]
   b7f84:	2100      	movs	r1, #0
   b7f86:	f7fe bf6f 	b.w	b6e68 <hal_i2c_flush>

000b7f8a <_ZN7TwoWireD0Ev>:
   b7f8a:	b510      	push	{r4, lr}
   b7f8c:	2114      	movs	r1, #20
   b7f8e:	4604      	mov	r4, r0
   b7f90:	f7fc fd95 	bl	b4abe <_ZdlPvj>
   b7f94:	4620      	mov	r0, r4
   b7f96:	bd10      	pop	{r4, pc}

000b7f98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7f98:	b538      	push	{r3, r4, r5, lr}
   b7f9a:	4604      	mov	r4, r0
   b7f9c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7fa2:	2200      	movs	r2, #0
   b7fa4:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7fa8:	4b09      	ldr	r3, [pc, #36]	; (b7fd0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7faa:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7fac:	4608      	mov	r0, r1
   b7fae:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7fb0:	4629      	mov	r1, r5
   b7fb2:	f7fe ff69 	bl	b6e88 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7fb6:	30bf      	adds	r0, #191	; 0xbf
   b7fb8:	d108      	bne.n	b7fcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b7fba:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7fbc:	07db      	lsls	r3, r3, #31
   b7fbe:	d505      	bpl.n	b7fcc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7fc0:	6868      	ldr	r0, [r5, #4]
   b7fc2:	f7ff f965 	bl	b7290 <free>
    free(conf.tx_buffer);
   b7fc6:	68e8      	ldr	r0, [r5, #12]
   b7fc8:	f7ff f962 	bl	b7290 <free>
}
   b7fcc:	4620      	mov	r0, r4
   b7fce:	bd38      	pop	{r3, r4, r5, pc}
   b7fd0:	000bd63c 	.word	0x000bd63c

000b7fd4 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b7fd4:	7c00      	ldrb	r0, [r0, #16]
   b7fd6:	2200      	movs	r2, #0
   b7fd8:	f7fe bf06 	b.w	b6de8 <hal_i2c_set_speed>

000b7fdc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7fdc:	2300      	movs	r3, #0
   b7fde:	7c00      	ldrb	r0, [r0, #16]
   b7fe0:	461a      	mov	r2, r3
   b7fe2:	4619      	mov	r1, r3
   b7fe4:	f7fe bf08 	b.w	b6df8 <hal_i2c_begin>

000b7fe8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7fe8:	7c00      	ldrb	r0, [r0, #16]
   b7fea:	2200      	movs	r2, #0
   b7fec:	f7fe bf0c 	b.w	b6e08 <hal_i2c_begin_transmission>

000b7ff0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7ff0:	b2c9      	uxtb	r1, r1
   b7ff2:	f7ff bff9 	b.w	b7fe8 <_ZN7TwoWire17beginTransmissionEh>

000b7ff6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7ff6:	7c00      	ldrb	r0, [r0, #16]
   b7ff8:	2200      	movs	r2, #0
   b7ffa:	f7fe bf0d 	b.w	b6e18 <hal_i2c_end_transmission>

000b7ffe <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7ffe:	2101      	movs	r1, #1
   b8000:	f7ff bff9 	b.w	b7ff6 <_ZN7TwoWire15endTransmissionEh>

000b8004 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b8004:	4770      	bx	lr

000b8006 <_ZN9IPAddressD0Ev>:
   b8006:	b510      	push	{r4, lr}
   b8008:	2118      	movs	r1, #24
   b800a:	4604      	mov	r4, r0
   b800c:	f7fc fd57 	bl	b4abe <_ZdlPvj>
   b8010:	4620      	mov	r0, r4
   b8012:	bd10      	pop	{r4, pc}

000b8014 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b8014:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b8016:	7d03      	ldrb	r3, [r0, #20]
   b8018:	2b06      	cmp	r3, #6
{
   b801a:	b08d      	sub	sp, #52	; 0x34
   b801c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b801e:	f100 0704 	add.w	r7, r0, #4
   b8022:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b8026:	d012      	beq.n	b804e <_ZNK9IPAddress7printToER5Print+0x3a>
   b8028:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b802c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b8030:	220a      	movs	r2, #10
   b8032:	4630      	mov	r0, r6
   b8034:	f001 fafd 	bl	b9632 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b8038:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b803a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b803c:	d019      	beq.n	b8072 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b803e:	2c00      	cmp	r4, #0
   b8040:	d0f4      	beq.n	b802c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b8042:	212e      	movs	r1, #46	; 0x2e
   b8044:	4630      	mov	r0, r6
   b8046:	f001 fadb 	bl	b9600 <_ZN5Print5printEc>
   b804a:	4404      	add	r4, r0
   b804c:	e7ee      	b.n	b802c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b804e:	232f      	movs	r3, #47	; 0x2f
   b8050:	466a      	mov	r2, sp
   b8052:	4639      	mov	r1, r7
   b8054:	200a      	movs	r0, #10
		buf[0] = 0;
   b8056:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b805a:	f7fe ff25 	bl	b6ea8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b805e:	4668      	mov	r0, sp
   b8060:	f7fc fccc 	bl	b49fc <strlen>
   b8064:	6833      	ldr	r3, [r6, #0]
   b8066:	4602      	mov	r2, r0
   b8068:	68db      	ldr	r3, [r3, #12]
   b806a:	4669      	mov	r1, sp
   b806c:	4630      	mov	r0, r6
   b806e:	4798      	blx	r3
   b8070:	4604      	mov	r4, r0
    }
    return n;
}
   b8072:	4620      	mov	r0, r4
   b8074:	b00d      	add	sp, #52	; 0x34
   b8076:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8078 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b8078:	b510      	push	{r4, lr}
   b807a:	4b05      	ldr	r3, [pc, #20]	; (b8090 <_ZN9IPAddressC1Ev+0x18>)
   b807c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b807e:	2211      	movs	r2, #17
   b8080:	f840 3b04 	str.w	r3, [r0], #4
   b8084:	2100      	movs	r1, #0
   b8086:	f002 fbf1 	bl	ba86c <memset>
}
   b808a:	4620      	mov	r0, r4
   b808c:	bd10      	pop	{r4, pc}
   b808e:	bf00      	nop
   b8090:	000bd664 	.word	0x000bd664

000b8094 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b8094:	4603      	mov	r3, r0
   b8096:	4a07      	ldr	r2, [pc, #28]	; (b80b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b8098:	b510      	push	{r4, lr}
   b809a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b809e:	f101 0210 	add.w	r2, r1, #16
   b80a2:	f851 4b04 	ldr.w	r4, [r1], #4
   b80a6:	f843 4b04 	str.w	r4, [r3], #4
   b80aa:	4291      	cmp	r1, r2
   b80ac:	d1f9      	bne.n	b80a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b80ae:	780a      	ldrb	r2, [r1, #0]
   b80b0:	701a      	strb	r2, [r3, #0]
}
   b80b2:	bd10      	pop	{r4, pc}
   b80b4:	000bd664 	.word	0x000bd664

000b80b8 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b80b8:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b80ba:	2b04      	cmp	r3, #4
   b80bc:	d104      	bne.n	b80c8 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b80be:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b80c0:	3800      	subs	r0, #0
   b80c2:	bf18      	it	ne
   b80c4:	2001      	movne	r0, #1
   b80c6:	4770      	bx	lr
    } else if (version() == 6) {
   b80c8:	2b06      	cmp	r3, #6
   b80ca:	d107      	bne.n	b80dc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b80cc:	6843      	ldr	r3, [r0, #4]
   b80ce:	b93b      	cbnz	r3, b80e0 <_ZNK9IPAddresscvbEv+0x28>
   b80d0:	6883      	ldr	r3, [r0, #8]
   b80d2:	b92b      	cbnz	r3, b80e0 <_ZNK9IPAddresscvbEv+0x28>
   b80d4:	68c3      	ldr	r3, [r0, #12]
   b80d6:	b91b      	cbnz	r3, b80e0 <_ZNK9IPAddresscvbEv+0x28>
   b80d8:	6900      	ldr	r0, [r0, #16]
   b80da:	e7f1      	b.n	b80c0 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b80dc:	2000      	movs	r0, #0
   b80de:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b80e0:	2001      	movs	r0, #1
}
   b80e2:	4770      	bx	lr

000b80e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b80e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b80e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b80ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b80ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b80f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b80f6:	2304      	movs	r3, #4
   b80f8:	6041      	str	r1, [r0, #4]
   b80fa:	7503      	strb	r3, [r0, #20]
}
   b80fc:	bd10      	pop	{r4, pc}
	...

000b8100 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b8100:	b507      	push	{r0, r1, r2, lr}
   b8102:	4b06      	ldr	r3, [pc, #24]	; (b811c <_ZN9IPAddressC1EPKh+0x1c>)
   b8104:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b8106:	78cb      	ldrb	r3, [r1, #3]
   b8108:	9300      	str	r3, [sp, #0]
   b810a:	788b      	ldrb	r3, [r1, #2]
   b810c:	784a      	ldrb	r2, [r1, #1]
   b810e:	7809      	ldrb	r1, [r1, #0]
   b8110:	f7ff ffe8 	bl	b80e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b8114:	b003      	add	sp, #12
   b8116:	f85d fb04 	ldr.w	pc, [sp], #4
   b811a:	bf00      	nop
   b811c:	000bd664 	.word	0x000bd664

000b8120 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   b8120:	f100 0310 	add.w	r3, r0, #16
   b8124:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   b8126:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   b812a:	2901      	cmp	r1, #1
   b812c:	4618      	mov	r0, r3
   b812e:	d108      	bne.n	b8142 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   b8130:	f853 1c04 	ldr.w	r1, [r3, #-4]
   b8134:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   b8138:	3a01      	subs	r2, #1
   b813a:	f103 0310 	add.w	r3, r3, #16
   b813e:	d1f2      	bne.n	b8126 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   b8140:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   b8142:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   b8144:	bf04      	itt	eq
   b8146:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   b814a:	1852      	addeq	r2, r2, r1
   b814c:	e7f4      	b.n	b8138 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000b814e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   b814e:	b40e      	push	{r1, r2, r3}
   b8150:	b5f0      	push	{r4, r5, r6, r7, lr}
   b8152:	b088      	sub	sp, #32
   b8154:	af00      	add	r7, sp, #0
   b8156:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b815a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   b815c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8160:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   b8162:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8164:	462b      	mov	r3, r5
   b8166:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   b8168:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b816a:	f7ff f8a1 	bl	b72b0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   b816e:	280f      	cmp	r0, #15
   b8170:	687a      	ldr	r2, [r7, #4]
   b8172:	d91a      	bls.n	b81aa <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   b8174:	f100 0308 	add.w	r3, r0, #8
   b8178:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   b817c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   b817e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8182:	1c41      	adds	r1, r0, #1
   b8184:	462b      	mov	r3, r5
   b8186:	4668      	mov	r0, sp
        va_start(args, fmt);
   b8188:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b818a:	f7ff f891 	bl	b72b0 <vsnprintf>
        if (n > 0) {
   b818e:	1e02      	subs	r2, r0, #0
   b8190:	dd04      	ble.n	b819c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   b8192:	6823      	ldr	r3, [r4, #0]
   b8194:	4669      	mov	r1, sp
   b8196:	689b      	ldr	r3, [r3, #8]
   b8198:	4620      	mov	r0, r4
   b819a:	4798      	blx	r3
   b819c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   b819e:	3720      	adds	r7, #32
   b81a0:	46bd      	mov	sp, r7
   b81a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b81a6:	b003      	add	sp, #12
   b81a8:	4770      	bx	lr
    } else if (n > 0) {
   b81aa:	2800      	cmp	r0, #0
   b81ac:	d0f7      	beq.n	b819e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   b81ae:	6823      	ldr	r3, [r4, #0]
   b81b0:	4602      	mov	r2, r0
   b81b2:	689b      	ldr	r3, [r3, #8]
   b81b4:	f107 0110 	add.w	r1, r7, #16
   b81b8:	4620      	mov	r0, r4
   b81ba:	4798      	blx	r3
}
   b81bc:	e7ef      	b.n	b819e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000b81be <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b81be:	b538      	push	{r3, r4, r5, lr}
   b81c0:	680b      	ldr	r3, [r1, #0]
   b81c2:	6003      	str	r3, [r0, #0]
   b81c4:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   b81c6:	6843      	ldr	r3, [r0, #4]
   b81c8:	429d      	cmp	r5, r3
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b81ca:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   b81cc:	d008      	beq.n	b81e0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
   b81ce:	b115      	cbz	r5, b81d6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
   b81d0:	686b      	ldr	r3, [r5, #4]
   b81d2:	3301      	adds	r3, #1
   b81d4:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   b81d6:	6860      	ldr	r0, [r4, #4]
   b81d8:	b108      	cbz	r0, b81de <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
   b81da:	f7ff f8fb 	bl	b73d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b81de:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b81e0:	bd38      	pop	{r3, r4, r5, pc}

000b81e2 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   b81e2:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b81e4:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   b81e6:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b81ea:	689b      	ldr	r3, [r3, #8]
   b81ec:	2201      	movs	r2, #1
   b81ee:	f10d 0107 	add.w	r1, sp, #7
   b81f2:	4798      	blx	r3
}
   b81f4:	b003      	add	sp, #12
   b81f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b81fa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   b81fa:	460b      	mov	r3, r1
   b81fc:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   b81fe:	2200      	movs	r2, #0
   b8200:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   b8202:	e9c0 2200 	strd	r2, r2, [r0]
   b8206:	4604      	mov	r4, r0
        t_ = t;
   b8208:	6083      	str	r3, [r0, #8]
    if (t) {
   b820a:	b90b      	cbnz	r3, b8210 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   b820c:	4620      	mov	r0, r4
   b820e:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
   b8210:	f7ff ffd5 	bl	b81be <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
   b8214:	e7fa      	b.n	b820c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000b8216 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   b8216:	6883      	ldr	r3, [r0, #8]
   b8218:	b1eb      	cbz	r3, b8256 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   b821a:	781a      	ldrb	r2, [r3, #0]
   b821c:	2a03      	cmp	r2, #3
   b821e:	d81a      	bhi.n	b8256 <_ZNK5spark9JSONValue4typeEv+0x40>
   b8220:	e8df f002 	tbb	[pc, r2]
   b8224:	1b021704 	.word	0x1b021704
   b8228:	2005      	movs	r0, #5
   b822a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   b822c:	6802      	ldr	r2, [r0, #0]
   b822e:	685b      	ldr	r3, [r3, #4]
   b8230:	6852      	ldr	r2, [r2, #4]
   b8232:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   b8234:	282d      	cmp	r0, #45	; 0x2d
   b8236:	d012      	beq.n	b825e <_ZNK5spark9JSONValue4typeEv+0x48>
   b8238:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b823c:	2b09      	cmp	r3, #9
   b823e:	d90e      	bls.n	b825e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   b8240:	2874      	cmp	r0, #116	; 0x74
   b8242:	d00e      	beq.n	b8262 <_ZNK5spark9JSONValue4typeEv+0x4c>
   b8244:	2866      	cmp	r0, #102	; 0x66
   b8246:	d00c      	beq.n	b8262 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   b8248:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   b824c:	4258      	negs	r0, r3
   b824e:	4158      	adcs	r0, r3
   b8250:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   b8252:	2006      	movs	r0, #6
   b8254:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   b8256:	2000      	movs	r0, #0
   b8258:	4770      	bx	lr
        return JSON_TYPE_STRING;
   b825a:	2004      	movs	r0, #4
   b825c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   b825e:	2003      	movs	r0, #3
   b8260:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   b8262:	2002      	movs	r0, #2
}
   b8264:	4770      	bx	lr

000b8266 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   b8266:	b510      	push	{r4, lr}
   b8268:	4604      	mov	r4, r0
    switch (type()) {
   b826a:	f7ff ffd4 	bl	b8216 <_ZNK5spark9JSONValue4typeEv>
   b826e:	2802      	cmp	r0, #2
   b8270:	d00e      	beq.n	b8290 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   b8272:	1ec3      	subs	r3, r0, #3
   b8274:	b2db      	uxtb	r3, r3
   b8276:	2b01      	cmp	r3, #1
   b8278:	d814      	bhi.n	b82a4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   b827a:	6822      	ldr	r2, [r4, #0]
   b827c:	68a3      	ldr	r3, [r4, #8]
   b827e:	6850      	ldr	r0, [r2, #4]
   b8280:	685b      	ldr	r3, [r3, #4]
}
   b8282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   b8286:	220a      	movs	r2, #10
   b8288:	2100      	movs	r1, #0
   b828a:	4418      	add	r0, r3
   b828c:	f003 ba28 	b.w	bb6e0 <strtol>
        const char* const s = d_->json + t_->start;
   b8290:	6822      	ldr	r2, [r4, #0]
   b8292:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   b8294:	6852      	ldr	r2, [r2, #4]
   b8296:	685b      	ldr	r3, [r3, #4]
   b8298:	5cd0      	ldrb	r0, [r2, r3]
   b829a:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   b829e:	4258      	negs	r0, r3
   b82a0:	4158      	adcs	r0, r3
}
   b82a2:	bd10      	pop	{r4, pc}
    switch (type()) {
   b82a4:	2000      	movs	r0, #0
   b82a6:	e7fc      	b.n	b82a2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000b82a8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   b82a8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b82aa:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b82ac:	e9c0 3300 	strd	r3, r3, [r0]
   b82b0:	4604      	mov	r4, r0
        n_(0) {
   b82b2:	480e      	ldr	r0, [pc, #56]	; (b82ec <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   b82b4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   b82b8:	b1a9      	cbz	r1, b82e6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   b82ba:	780b      	ldrb	r3, [r1, #0]
   b82bc:	2b03      	cmp	r3, #3
   b82be:	d006      	beq.n	b82ce <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   b82c0:	b98b      	cbnz	r3, b82e6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   b82c2:	6813      	ldr	r3, [r2, #0]
   b82c4:	6858      	ldr	r0, [r3, #4]
   b82c6:	684b      	ldr	r3, [r1, #4]
   b82c8:	5cc3      	ldrb	r3, [r0, r3]
   b82ca:	2b6e      	cmp	r3, #110	; 0x6e
   b82cc:	d007      	beq.n	b82de <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   b82ce:	6813      	ldr	r3, [r2, #0]
   b82d0:	684d      	ldr	r5, [r1, #4]
   b82d2:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   b82d4:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   b82d6:	4428      	add	r0, r5
            n_ = t->end - t->start;
   b82d8:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   b82da:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   b82dc:	60e3      	str	r3, [r4, #12]
   b82de:	4611      	mov	r1, r2
   b82e0:	4620      	mov	r0, r4
   b82e2:	f7ff ff6c 	bl	b81be <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b82e6:	4620      	mov	r0, r4
   b82e8:	bd38      	pop	{r3, r4, r5, pc}
   b82ea:	bf00      	nop
   b82ec:	000bd6d3 	.word	0x000bd6d3

000b82f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   b82f0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   b82f2:	2500      	movs	r5, #0
   b82f4:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   b82f6:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   b82fa:	e9c0 5502 	strd	r5, r5, [r0, #8]
   b82fe:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b8302:	4604      	mov	r4, r0
   b8304:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   b8306:	b14b      	cbz	r3, b831c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   b8308:	781a      	ldrb	r2, [r3, #0]
   b830a:	2a01      	cmp	r2, #1
   b830c:	d106      	bne.n	b831c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   b830e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   b8312:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   b8314:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   b8316:	6143      	str	r3, [r0, #20]
   b8318:	f7ff ff51 	bl	b81be <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
   b831c:	4620      	mov	r0, r4
   b831e:	bd38      	pop	{r3, r4, r5, pc}

000b8320 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   b8320:	b510      	push	{r4, lr}
    if (!n_) {
   b8322:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   b8324:	4604      	mov	r4, r0
    if (!n_) {
   b8326:	b163      	cbz	r3, b8342 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   b8328:	6880      	ldr	r0, [r0, #8]
   b832a:	60e0      	str	r0, [r4, #12]
    --n_;
   b832c:	3b01      	subs	r3, #1
    ++t_;
   b832e:	3010      	adds	r0, #16
   b8330:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   b8332:	6120      	str	r0, [r4, #16]
    --n_;
   b8334:	6163      	str	r3, [r4, #20]
    if (n_) {
   b8336:	b113      	cbz	r3, b833e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   b8338:	f7ff fef2 	bl	b8120 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   b833c:	60a0      	str	r0, [r4, #8]
    return true;
   b833e:	2001      	movs	r0, #1
   b8340:	e000      	b.n	b8344 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   b8342:	4618      	mov	r0, r3
}
   b8344:	bd10      	pop	{r4, pc}

000b8346 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   b8346:	b510      	push	{r4, lr}
    write('}');
   b8348:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   b834a:	4604      	mov	r4, r0
    write('}');
   b834c:	f7ff ff49 	bl	b81e2 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   b8350:	2301      	movs	r3, #1
   b8352:	7123      	strb	r3, [r4, #4]
}
   b8354:	4620      	mov	r0, r4
   b8356:	bd10      	pop	{r4, pc}

000b8358 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   b8358:	b508      	push	{r3, lr}
    switch (state_) {
   b835a:	7903      	ldrb	r3, [r0, #4]
   b835c:	2b01      	cmp	r3, #1
   b835e:	d002      	beq.n	b8366 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   b8360:	2b02      	cmp	r3, #2
   b8362:	d004      	beq.n	b836e <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   b8364:	bd08      	pop	{r3, pc}
        write(',');
   b8366:	212c      	movs	r1, #44	; 0x2c
        write(':');
   b8368:	f7ff ff3b 	bl	b81e2 <_ZN5spark10JSONWriter5writeEc>
}
   b836c:	e7fa      	b.n	b8364 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   b836e:	213a      	movs	r1, #58	; 0x3a
   b8370:	e7fa      	b.n	b8368 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000b8372 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   b8372:	b510      	push	{r4, lr}
   b8374:	4604      	mov	r4, r0
    writeSeparator();
   b8376:	f7ff ffef 	bl	b8358 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   b837a:	4620      	mov	r0, r4
   b837c:	217b      	movs	r1, #123	; 0x7b
   b837e:	f7ff ff30 	bl	b81e2 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   b8382:	2300      	movs	r3, #0
   b8384:	7123      	strb	r3, [r4, #4]
}
   b8386:	4620      	mov	r0, r4
   b8388:	bd10      	pop	{r4, pc}
	...

000b838c <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   b838c:	b513      	push	{r0, r1, r4, lr}
   b838e:	4604      	mov	r4, r0
   b8390:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b8392:	f7ff ffe1 	bl	b8358 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   b8396:	6823      	ldr	r3, [r4, #0]
   b8398:	9a01      	ldr	r2, [sp, #4]
   b839a:	68db      	ldr	r3, [r3, #12]
   b839c:	4903      	ldr	r1, [pc, #12]	; (b83ac <_ZN5spark10JSONWriter5valueEi+0x20>)
   b839e:	4620      	mov	r0, r4
   b83a0:	4798      	blx	r3
    state_ = NEXT;
   b83a2:	2301      	movs	r3, #1
}
   b83a4:	4620      	mov	r0, r4
    state_ = NEXT;
   b83a6:	7123      	strb	r3, [r4, #4]
}
   b83a8:	b002      	add	sp, #8
   b83aa:	bd10      	pop	{r4, pc}
   b83ac:	000bd7b8 	.word	0x000bd7b8

000b83b0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   b83b0:	b513      	push	{r0, r1, r4, lr}
   b83b2:	4604      	mov	r4, r0
   b83b4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   b83b6:	f7ff ffcf 	bl	b8358 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   b83ba:	6823      	ldr	r3, [r4, #0]
   b83bc:	9a01      	ldr	r2, [sp, #4]
   b83be:	68db      	ldr	r3, [r3, #12]
   b83c0:	4903      	ldr	r1, [pc, #12]	; (b83d0 <_ZN5spark10JSONWriter5valueEj+0x20>)
   b83c2:	4620      	mov	r0, r4
   b83c4:	4798      	blx	r3
    state_ = NEXT;
   b83c6:	2301      	movs	r3, #1
}
   b83c8:	4620      	mov	r0, r4
    state_ = NEXT;
   b83ca:	7123      	strb	r3, [r4, #4]
}
   b83cc:	b002      	add	sp, #8
   b83ce:	bd10      	pop	{r4, pc}
   b83d0:	000bd670 	.word	0x000bd670

000b83d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b83d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b83d8:	460d      	mov	r5, r1
    write('"');
   b83da:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   b83dc:	4690      	mov	r8, r2
   b83de:	4604      	mov	r4, r0
    write('"');
   b83e0:	f7ff feff 	bl	b81e2 <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   b83e4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b848c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
   b83e8:	44a8      	add	r8, r5
    const char *s = str;
   b83ea:	462f      	mov	r7, r5
    while (s != end) {
   b83ec:	4547      	cmp	r7, r8
   b83ee:	46ba      	mov	sl, r7
   b83f0:	d03d      	beq.n	b846e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
   b83f2:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
   b83f6:	2e22      	cmp	r6, #34	; 0x22
   b83f8:	d006      	beq.n	b8408 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b83fa:	2e5c      	cmp	r6, #92	; 0x5c
   b83fc:	d004      	beq.n	b8408 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
   b83fe:	4630      	mov	r0, r6
   b8400:	f002 f9f4 	bl	ba7ec <isprint>
   b8404:	2800      	cmp	r0, #0
   b8406:	d1f1      	bne.n	b83ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   b8408:	6823      	ldr	r3, [r4, #0]
   b840a:	ebaa 0205 	sub.w	r2, sl, r5
   b840e:	689b      	ldr	r3, [r3, #8]
   b8410:	4629      	mov	r1, r5
   b8412:	4620      	mov	r0, r4
   b8414:	4798      	blx	r3
            write('\\');
   b8416:	215c      	movs	r1, #92	; 0x5c
   b8418:	4620      	mov	r0, r4
   b841a:	f7ff fee2 	bl	b81e2 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   b841e:	2e0d      	cmp	r6, #13
   b8420:	d80a      	bhi.n	b8438 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
   b8422:	2e07      	cmp	r6, #7
   b8424:	d91c      	bls.n	b8460 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b8426:	f1a6 0308 	sub.w	r3, r6, #8
   b842a:	2b05      	cmp	r3, #5
   b842c:	d818      	bhi.n	b8460 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
   b842e:	e8df f003 	tbb	[pc, r3]
   b8432:	0f0d      	.short	0x0f0d
   b8434:	15131711 	.word	0x15131711
   b8438:	2e22      	cmp	r6, #34	; 0x22
   b843a:	d001      	beq.n	b8440 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
   b843c:	2e5c      	cmp	r6, #92	; 0x5c
   b843e:	d10f      	bne.n	b8460 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
   b8440:	4631      	mov	r1, r6
                write('b');
   b8442:	4620      	mov	r0, r4
   b8444:	f7ff fecd 	bl	b81e2 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   b8448:	463d      	mov	r5, r7
    while (s != end) {
   b844a:	e7cf      	b.n	b83ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   b844c:	2162      	movs	r1, #98	; 0x62
   b844e:	e7f8      	b.n	b8442 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
   b8450:	2174      	movs	r1, #116	; 0x74
   b8452:	e7f6      	b.n	b8442 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
   b8454:	216e      	movs	r1, #110	; 0x6e
   b8456:	e7f4      	b.n	b8442 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
   b8458:	2166      	movs	r1, #102	; 0x66
   b845a:	e7f2      	b.n	b8442 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
   b845c:	2172      	movs	r1, #114	; 0x72
   b845e:	e7f0      	b.n	b8442 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
   b8460:	6823      	ldr	r3, [r4, #0]
   b8462:	4632      	mov	r2, r6
   b8464:	68db      	ldr	r3, [r3, #12]
   b8466:	4649      	mov	r1, r9
   b8468:	4620      	mov	r0, r4
   b846a:	4798      	blx	r3
                break;
   b846c:	e7ec      	b.n	b8448 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
   b846e:	42bd      	cmp	r5, r7
   b8470:	d005      	beq.n	b847e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
   b8472:	6823      	ldr	r3, [r4, #0]
   b8474:	1b7a      	subs	r2, r7, r5
   b8476:	689b      	ldr	r3, [r3, #8]
   b8478:	4629      	mov	r1, r5
   b847a:	4620      	mov	r0, r4
   b847c:	4798      	blx	r3
    }
    write('"');
   b847e:	2122      	movs	r1, #34	; 0x22
   b8480:	4620      	mov	r0, r4
   b8482:	f7ff feae 	bl	b81e2 <_ZN5spark10JSONWriter5writeEc>
}
   b8486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b848a:	bf00      	nop
   b848c:	000bd673 	.word	0x000bd673

000b8490 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   b8490:	b513      	push	{r0, r1, r4, lr}
   b8492:	4604      	mov	r4, r0
   b8494:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b8498:	f7ff ff5e 	bl	b8358 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   b849c:	4620      	mov	r0, r4
   b849e:	e9dd 2100 	ldrd	r2, r1, [sp]
   b84a2:	f7ff ff97 	bl	b83d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   b84a6:	2302      	movs	r3, #2
}
   b84a8:	4620      	mov	r0, r4
    state_ = VALUE;
   b84aa:	7123      	strb	r3, [r4, #4]
}
   b84ac:	b002      	add	sp, #8
   b84ae:	bd10      	pop	{r4, pc}

000b84b0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   b84b0:	b513      	push	{r0, r1, r4, lr}
   b84b2:	4604      	mov	r4, r0
   b84b4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   b84b8:	f7ff ff4e 	bl	b8358 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   b84bc:	4620      	mov	r0, r4
   b84be:	e9dd 2100 	ldrd	r2, r1, [sp]
   b84c2:	f7ff ff87 	bl	b83d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   b84c6:	2301      	movs	r3, #1
}
   b84c8:	4620      	mov	r0, r4
    state_ = NEXT;
   b84ca:	7123      	strb	r3, [r4, #4]
}
   b84cc:	b002      	add	sp, #8
   b84ce:	bd10      	pop	{r4, pc}

000b84d0 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   b84d0:	6880      	ldr	r0, [r0, #8]
   b84d2:	6803      	ldr	r3, [r0, #0]
   b84d4:	68db      	ldr	r3, [r3, #12]
   b84d6:	4718      	bx	r3

000b84d8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   b84d8:	4770      	bx	lr

000b84da <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   b84da:	4608      	mov	r0, r1
   b84dc:	b111      	cbz	r1, b84e4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   b84de:	680b      	ldr	r3, [r1, #0]
   b84e0:	685b      	ldr	r3, [r3, #4]
   b84e2:	4718      	bx	r3
}
   b84e4:	4770      	bx	lr

000b84e6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   b84e6:	4770      	bx	lr

000b84e8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b84e8:	4770      	bx	lr

000b84ea <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   b84ea:	4770      	bx	lr

000b84ec <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   b84ec:	4770      	bx	lr

000b84ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   b84ee:	b538      	push	{r3, r4, r5, lr}
   b84f0:	4604      	mov	r4, r0
   b84f2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   b84f4:	6800      	ldr	r0, [r0, #0]
   b84f6:	212e      	movs	r1, #46	; 0x2e
   b84f8:	f002 f9fb 	bl	ba8f2 <strchrnul>
    size = s - category;
   b84fc:	6823      	ldr	r3, [r4, #0]
   b84fe:	1ac3      	subs	r3, r0, r3
   b8500:	602b      	str	r3, [r5, #0]
    if (size) {
   b8502:	b123      	cbz	r3, b850e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   b8504:	7803      	ldrb	r3, [r0, #0]
   b8506:	b103      	cbz	r3, b850a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   b8508:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
   b850a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b850c:	6020      	str	r0, [r4, #0]
}
   b850e:	4618      	mov	r0, r3
   b8510:	bd38      	pop	{r3, r4, r5, pc}

000b8512 <_ZN5spark16JSONStreamWriterD0Ev>:
   b8512:	b510      	push	{r4, lr}
   b8514:	210c      	movs	r1, #12
   b8516:	4604      	mov	r4, r0
   b8518:	f7fc fad1 	bl	b4abe <_ZdlPvj>
   b851c:	4620      	mov	r0, r4
   b851e:	bd10      	pop	{r4, pc}

000b8520 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   b8520:	b510      	push	{r4, lr}
   b8522:	2104      	movs	r1, #4
   b8524:	4604      	mov	r4, r0
   b8526:	f7fc faca 	bl	b4abe <_ZdlPvj>
   b852a:	4620      	mov	r0, r4
   b852c:	bd10      	pop	{r4, pc}

000b852e <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   b852e:	b510      	push	{r4, lr}
   b8530:	2104      	movs	r1, #4
   b8532:	4604      	mov	r4, r0
   b8534:	f7fc fac3 	bl	b4abe <_ZdlPvj>
   b8538:	4620      	mov	r0, r4
   b853a:	bd10      	pop	{r4, pc}

000b853c <_ZN14RecursiveMutex4lockEv.isra.0>:
    void lock() { os_mutex_recursive_lock(handle_); }
   b853c:	f7fe bc0c 	b.w	b6d58 <os_mutex_recursive_lock>

000b8540 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   b8540:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   b8542:	f7fc fa51 	bl	b49e8 <strcmp>
}
   b8546:	fab0 f080 	clz	r0, r0
   b854a:	0940      	lsrs	r0, r0, #5
   b854c:	bd08      	pop	{r3, pc}

000b854e <__tcf_1>:
   b854e:	4770      	bx	lr

000b8550 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   b8550:	b510      	push	{r4, lr}
   b8552:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
   b8554:	f001 fe2c 	bl	ba1b0 <_Z16_fetch_usbserialv>
   b8558:	4284      	cmp	r4, r0
   b855a:	d010      	beq.n	b857e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   b855c:	f001 fffe 	bl	ba55c <_Z22__fetch_global_Serial1v>
   b8560:	4284      	cmp	r4, r0
   b8562:	d105      	bne.n	b8570 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   b8564:	f001 fffa 	bl	ba55c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
   b8568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   b856c:	f001 bdbb 	b.w	ba0e6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   b8570:	b12c      	cbz	r4, b857e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   b8572:	6823      	ldr	r3, [r4, #0]
   b8574:	4620      	mov	r0, r4
   b8576:	685b      	ldr	r3, [r3, #4]
}
   b8578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b857c:	4718      	bx	r3
   b857e:	bd10      	pop	{r4, pc}

000b8580 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8580:	680b      	ldr	r3, [r1, #0]
   b8582:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b8584:	684b      	ldr	r3, [r1, #4]
   b8586:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b8588:	b113      	cbz	r3, b8590 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
   b858a:	685a      	ldr	r2, [r3, #4]
   b858c:	3201      	adds	r2, #1
   b858e:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8590:	4770      	bx	lr

000b8592 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   b8592:	b513      	push	{r0, r1, r4, lr}
   b8594:	4604      	mov	r4, r0
    return value(val, strlen(val));
   b8596:	4608      	mov	r0, r1
   b8598:	9101      	str	r1, [sp, #4]
   b859a:	f7fc fa2f 	bl	b49fc <strlen>
   b859e:	9901      	ldr	r1, [sp, #4]
   b85a0:	4602      	mov	r2, r0
   b85a2:	4620      	mov	r0, r4
}
   b85a4:	b002      	add	sp, #8
   b85a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   b85aa:	f7ff bf81 	b.w	b84b0 <_ZN5spark10JSONWriter5valueEPKcj>

000b85ae <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   b85ae:	b513      	push	{r0, r1, r4, lr}
   b85b0:	4604      	mov	r4, r0
    write(str, strlen(str));
   b85b2:	4608      	mov	r0, r1
   b85b4:	9101      	str	r1, [sp, #4]
   b85b6:	f7fc fa21 	bl	b49fc <strlen>
   b85ba:	6823      	ldr	r3, [r4, #0]
   b85bc:	9901      	ldr	r1, [sp, #4]
   b85be:	68db      	ldr	r3, [r3, #12]
   b85c0:	4602      	mov	r2, r0
   b85c2:	4620      	mov	r0, r4
}
   b85c4:	b002      	add	sp, #8
   b85c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   b85ca:	4718      	bx	r3

000b85cc <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   b85cc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   b85ce:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   b85d0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   b85d4:	68db      	ldr	r3, [r3, #12]
   b85d6:	2201      	movs	r2, #1
   b85d8:	f10d 0107 	add.w	r1, sp, #7
   b85dc:	4798      	blx	r3
}
   b85de:	b003      	add	sp, #12
   b85e0:	f85d fb04 	ldr.w	pc, [sp], #4

000b85e4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
   b85e4:	680a      	ldr	r2, [r1, #0]
   b85e6:	6002      	str	r2, [r0, #0]
   b85e8:	684a      	ldr	r2, [r1, #4]
   b85ea:	6042      	str	r2, [r0, #4]
        capacity_(0) {
   b85ec:	2200      	movs	r2, #0
   b85ee:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b85f2:	b510      	push	{r4, lr}
   b85f4:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
   b85f6:	688c      	ldr	r4, [r1, #8]
   b85f8:	6084      	str	r4, [r0, #8]
   b85fa:	68cc      	ldr	r4, [r1, #12]
   b85fc:	60c4      	str	r4, [r0, #12]
   b85fe:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b8600:	608a      	str	r2, [r1, #8]
   b8602:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8604:	6104      	str	r4, [r0, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   b8606:	610a      	str	r2, [r1, #16]
   b8608:	bd10      	pop	{r4, pc}
	...

000b860c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b860c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   b8610:	e9d0 8400 	ldrd	r8, r4, [r0]
   b8614:	f04f 0a14 	mov.w	sl, #20
   b8618:	9300      	str	r3, [sp, #0]
   b861a:	fb0a f404 	mul.w	r4, sl, r4
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   b861e:	4b18      	ldr	r3, [pc, #96]	; (b8680 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b8620:	10a4      	asrs	r4, r4, #2
   b8622:	4617      	mov	r7, r2
   b8624:	435c      	muls	r4, r3
   b8626:	4645      	mov	r5, r8
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   b8628:	2c00      	cmp	r4, #0
   b862a:	dd21      	ble.n	b8670 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
   b862c:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   b862e:	fb0a f006 	mul.w	r0, sl, r6
   b8632:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   b8636:	463a      	mov	r2, r7
   b8638:	f8b9 b004 	ldrh.w	fp, [r9, #4]
   b863c:	5828      	ldr	r0, [r5, r0]
   b863e:	9101      	str	r1, [sp, #4]
   b8640:	455f      	cmp	r7, fp
   b8642:	bf28      	it	cs
   b8644:	465a      	movcs	r2, fp
   b8646:	f002 f966 	bl	ba916 <strncmp>
                if (cmp == 0) {
   b864a:	2800      	cmp	r0, #0
   b864c:	9901      	ldr	r1, [sp, #4]
   b864e:	f04f 0301 	mov.w	r3, #1
   b8652:	d10b      	bne.n	b866c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
   b8654:	455f      	cmp	r7, fp
   b8656:	d103      	bne.n	b8660 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   b8658:	9a00      	ldr	r2, [sp, #0]
   b865a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   b865c:	4634      	mov	r4, r6
   b865e:	e7e3      	b.n	b8628 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   b8660:	d9fc      	bls.n	b865c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   b8662:	1ba6      	subs	r6, r4, r6
	      ++__first;
   b8664:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
   b8668:	3e01      	subs	r6, #1
   b866a:	e7f7      	b.n	b865c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
   b866c:	dbf9      	blt.n	b8662 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
   b866e:	e7f5      	b.n	b865c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
   b8670:	eba5 0508 	sub.w	r5, r5, r8
}
   b8674:	4802      	ldr	r0, [pc, #8]	; (b8680 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
   b8676:	10ad      	asrs	r5, r5, #2
   b8678:	4368      	muls	r0, r5
   b867a:	b003      	add	sp, #12
   b867c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8680:	cccccccd 	.word	0xcccccccd

000b8684 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b8684:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   b8686:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   b8688:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   b868a:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   b868c:	b303      	cbz	r3, b86d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
   b868e:	b1f9      	cbz	r1, b86d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
   b8690:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   b8692:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   b8696:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   b8698:	a903      	add	r1, sp, #12
   b869a:	a801      	add	r0, sp, #4
   b869c:	f7ff ff27 	bl	b84ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b86a0:	4601      	mov	r1, r0
   b86a2:	b1a8      	cbz	r0, b86d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
   b86a4:	f10d 030b 	add.w	r3, sp, #11
   b86a8:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   b86aa:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   b86ae:	4620      	mov	r0, r4
   b86b0:	f7ff ffac 	bl	b860c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   b86b4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   b86b8:	b153      	cbz	r3, b86d0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
   b86ba:	6823      	ldr	r3, [r4, #0]
   b86bc:	2414      	movs	r4, #20
   b86be:	fb04 3400 	mla	r4, r4, r0, r3
            pNodes = &node.nodes;
   b86c2:	3408      	adds	r4, #8
            if (node.level >= 0) {
   b86c4:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   b86c8:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   b86ca:	bfa8      	it	ge
   b86cc:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
   b86ce:	e7e3      	b.n	b8698 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   b86d0:	4628      	mov	r0, r5
   b86d2:	b004      	add	sp, #16
   b86d4:	bd70      	pop	{r4, r5, r6, pc}

000b86d6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
   b86d6:	b40e      	push	{r1, r2, r3}
   b86d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b86da:	b08c      	sub	sp, #48	; 0x30
   b86dc:	af00      	add	r7, sp, #0
   b86de:	f107 0544 	add.w	r5, r7, #68	; 0x44
   b86e2:	4604      	mov	r4, r0
   b86e4:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b86e8:	607a      	str	r2, [r7, #4]
   b86ea:	462b      	mov	r3, r5
   b86ec:	2120      	movs	r1, #32
   b86ee:	f107 0010 	add.w	r0, r7, #16
    va_start(args, fmt);
   b86f2:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   b86f4:	f7fe fddc 	bl	b72b0 <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
   b86f8:	281f      	cmp	r0, #31
   b86fa:	687a      	ldr	r2, [r7, #4]
   b86fc:	d91a      	bls.n	b8734 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
   b86fe:	f100 0308 	add.w	r3, r0, #8
   b8702:	f023 0307 	bic.w	r3, r3, #7
        }
   b8706:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
   b8708:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b870c:	1c41      	adds	r1, r0, #1
   b870e:	462b      	mov	r3, r5
   b8710:	4668      	mov	r0, sp
        va_start(args, fmt);
   b8712:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   b8714:	f7fe fdcc 	bl	b72b0 <vsnprintf>
        if (n > 0) {
   b8718:	1e02      	subs	r2, r0, #0
   b871a:	dd04      	ble.n	b8726 <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
   b871c:	6823      	ldr	r3, [r4, #0]
   b871e:	4669      	mov	r1, sp
   b8720:	68db      	ldr	r3, [r3, #12]
   b8722:	4620      	mov	r0, r4
   b8724:	4798      	blx	r3
   b8726:	46b5      	mov	sp, r6
}
   b8728:	3730      	adds	r7, #48	; 0x30
   b872a:	46bd      	mov	sp, r7
   b872c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8730:	b003      	add	sp, #12
   b8732:	4770      	bx	lr
    } else if (n > 0) {
   b8734:	2800      	cmp	r0, #0
   b8736:	d0f7      	beq.n	b8728 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
   b8738:	6823      	ldr	r3, [r4, #0]
   b873a:	4602      	mov	r2, r0
   b873c:	68db      	ldr	r3, [r3, #12]
   b873e:	f107 0110 	add.w	r1, r7, #16
   b8742:	4620      	mov	r0, r4
   b8744:	4798      	blx	r3
}
   b8746:	e7ef      	b.n	b8728 <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

000b8748 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   b8748:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   b874a:	4c09      	ldr	r4, [pc, #36]	; (b8770 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   b874c:	7823      	ldrb	r3, [r4, #0]
   b874e:	f3bf 8f5b 	dmb	ish
   b8752:	07db      	lsls	r3, r3, #31
   b8754:	d409      	bmi.n	b876a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b8756:	4620      	mov	r0, r4
   b8758:	f7fc f9c0 	bl	b4adc <__cxa_guard_acquire>
   b875c:	b128      	cbz	r0, b876a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   b875e:	4620      	mov	r0, r4
   b8760:	f7fc f9c1 	bl	b4ae6 <__cxa_guard_release>
   b8764:	4803      	ldr	r0, [pc, #12]	; (b8774 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   b8766:	f002 f837 	bl	ba7d8 <atexit>
}
   b876a:	4803      	ldr	r0, [pc, #12]	; (b8778 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   b876c:	bd10      	pop	{r4, pc}
   b876e:	bf00      	nop
   b8770:	2003e6a0 	.word	0x2003e6a0
   b8774:	000b84e7 	.word	0x000b84e7
   b8778:	2003e348 	.word	0x2003e348

000b877c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   b877c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   b877e:	4c09      	ldr	r4, [pc, #36]	; (b87a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   b8780:	7823      	ldrb	r3, [r4, #0]
   b8782:	f3bf 8f5b 	dmb	ish
   b8786:	07db      	lsls	r3, r3, #31
   b8788:	d409      	bmi.n	b879e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b878a:	4620      	mov	r0, r4
   b878c:	f7fc f9a6 	bl	b4adc <__cxa_guard_acquire>
   b8790:	b128      	cbz	r0, b879e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   b8792:	4620      	mov	r0, r4
   b8794:	f7fc f9a7 	bl	b4ae6 <__cxa_guard_release>
   b8798:	4803      	ldr	r0, [pc, #12]	; (b87a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   b879a:	f002 f81d 	bl	ba7d8 <atexit>
    return &factory;
}
   b879e:	4803      	ldr	r0, [pc, #12]	; (b87ac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   b87a0:	bd10      	pop	{r4, pc}
   b87a2:	bf00      	nop
   b87a4:	2003e6a4 	.word	0x2003e6a4
   b87a8:	000b854f 	.word	0x000b854f
   b87ac:	2003e34c 	.word	0x2003e34c

000b87b0 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   b87b0:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b87b2:	2500      	movs	r5, #0
   b87b4:	4604      	mov	r4, r0
   b87b6:	e9c0 5500 	strd	r5, r5, [r0]
   b87ba:	e9c0 5504 	strd	r5, r5, [r0, #16]
   b87be:	6085      	str	r5, [r0, #8]
   b87c0:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   b87c2:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   b87c6:	f7fe fab7 	bl	b6d38 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   b87ca:	f7ff ffbd 	bl	b8748 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   b87ce:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b87d0:	f7ff ffd4 	bl	b877c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   b87d4:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   b87d6:	6220      	str	r0, [r4, #32]
}
   b87d8:	4620      	mov	r0, r4
   b87da:	bd38      	pop	{r3, r4, r5, pc}

000b87dc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   b87dc:	b510      	push	{r4, lr}
    static LogManager mgr;
   b87de:	4c0a      	ldr	r4, [pc, #40]	; (b8808 <_ZN5spark10LogManager8instanceEv+0x2c>)
   b87e0:	7823      	ldrb	r3, [r4, #0]
   b87e2:	f3bf 8f5b 	dmb	ish
   b87e6:	07db      	lsls	r3, r3, #31
   b87e8:	d40c      	bmi.n	b8804 <_ZN5spark10LogManager8instanceEv+0x28>
   b87ea:	4620      	mov	r0, r4
   b87ec:	f7fc f976 	bl	b4adc <__cxa_guard_acquire>
   b87f0:	b140      	cbz	r0, b8804 <_ZN5spark10LogManager8instanceEv+0x28>
   b87f2:	4806      	ldr	r0, [pc, #24]	; (b880c <_ZN5spark10LogManager8instanceEv+0x30>)
   b87f4:	f7ff ffdc 	bl	b87b0 <_ZN5spark10LogManagerC1Ev>
   b87f8:	4620      	mov	r0, r4
   b87fa:	f7fc f974 	bl	b4ae6 <__cxa_guard_release>
   b87fe:	4804      	ldr	r0, [pc, #16]	; (b8810 <_ZN5spark10LogManager8instanceEv+0x34>)
   b8800:	f001 ffea 	bl	ba7d8 <atexit>
    return &mgr;
}
   b8804:	4801      	ldr	r0, [pc, #4]	; (b880c <_ZN5spark10LogManager8instanceEv+0x30>)
   b8806:	bd10      	pop	{r4, pc}
   b8808:	2003e69c 	.word	0x2003e69c
   b880c:	2003e6ac 	.word	0x2003e6ac
   b8810:	000b8d31 	.word	0x000b8d31

000b8814 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   b8814:	4a02      	ldr	r2, [pc, #8]	; (b8820 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   b8816:	4903      	ldr	r1, [pc, #12]	; (b8824 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   b8818:	4803      	ldr	r0, [pc, #12]	; (b8828 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   b881a:	2300      	movs	r3, #0
   b881c:	f7fe bc8c 	b.w	b7138 <log_set_callbacks>
   b8820:	000b8b15 	.word	0x000b8b15
   b8824:	000b8aa1 	.word	0x000b8aa1
   b8828:	000b8a21 	.word	0x000b8a21

000b882c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   b882c:	2300      	movs	r3, #0
   b882e:	461a      	mov	r2, r3
   b8830:	4619      	mov	r1, r3
   b8832:	4618      	mov	r0, r3
   b8834:	f7fe bc80 	b.w	b7138 <log_set_callbacks>

000b8838 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b8838:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   b883a:	688d      	ldr	r5, [r1, #8]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   b883c:	4604      	mov	r4, r0
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b883e:	4668      	mov	r0, sp
   b8840:	f7ff fe9e 	bl	b8580 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
        JSONObjectIterator(value.t_, value.d_) {
   b8844:	466a      	mov	r2, sp
   b8846:	4629      	mov	r1, r5
   b8848:	4620      	mov	r0, r4
   b884a:	f7ff fd51 	bl	b82f0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   b884e:	a801      	add	r0, sp, #4
   b8850:	f7ff f815 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8854:	4620      	mov	r0, r4
   b8856:	b003      	add	sp, #12
   b8858:	bd30      	pop	{r4, r5, pc}

000b885a <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b885a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   b885c:	68cd      	ldr	r5, [r1, #12]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   b885e:	4604      	mov	r4, r0
   b8860:	4668      	mov	r0, sp
   b8862:	f7ff fe8d 	bl	b8580 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONString(k_, d_);
   b8866:	466a      	mov	r2, sp
   b8868:	4629      	mov	r1, r5
   b886a:	4620      	mov	r0, r4
   b886c:	f7ff fd1c 	bl	b82a8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8870:	a801      	add	r0, sp, #4
   b8872:	f7ff f804 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8876:	4620      	mov	r0, r4
   b8878:	b003      	add	sp, #12
   b887a:	bd30      	pop	{r4, r5, pc}

000b887c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b887c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   b887e:	690d      	ldr	r5, [r1, #16]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   b8880:	4604      	mov	r4, r0
   b8882:	4668      	mov	r0, sp
   b8884:	f7ff fe7c 	bl	b8580 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
    return JSONValue(v_, d_);
   b8888:	466a      	mov	r2, sp
   b888a:	4629      	mov	r1, r5
   b888c:	4620      	mov	r0, r4
   b888e:	f7ff fcb4 	bl	b81fa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
   b8892:	a801      	add	r0, sp, #4
   b8894:	f7fe fff3 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b8898:	4620      	mov	r0, r4
   b889a:	b003      	add	sp, #12
   b889c:	bd30      	pop	{r4, r5, pc}
	...

000b88a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   b88a0:	b570      	push	{r4, r5, r6, lr}
   b88a2:	b08a      	sub	sp, #40	; 0x28
   b88a4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   b88a6:	4601      	mov	r1, r0
   b88a8:	a804      	add	r0, sp, #16
   b88aa:	f7ff ffc5 	bl	b8838 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   b88ae:	4e14      	ldr	r6, [pc, #80]	; (b8900 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   b88b0:	a804      	add	r0, sp, #16
   b88b2:	f7ff fd35 	bl	b8320 <_ZN5spark18JSONObjectIterator4nextEv>
   b88b6:	b1e8      	cbz	r0, b88f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   b88b8:	a904      	add	r1, sp, #16
   b88ba:	4668      	mov	r0, sp
   b88bc:	f7ff ffcd 	bl	b885a <_ZNK5spark18JSONObjectIterator4nameEv>
   b88c0:	9802      	ldr	r0, [sp, #8]
   b88c2:	4631      	mov	r1, r6
   b88c4:	f7ff fe3c 	bl	b8540 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   b88c8:	4604      	mov	r4, r0
   b88ca:	b110      	cbz	r0, b88d2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   b88cc:	1e2c      	subs	r4, r5, #0
   b88ce:	bf18      	it	ne
   b88d0:	2401      	movne	r4, #1
   b88d2:	a801      	add	r0, sp, #4
   b88d4:	f7fe ffd3 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b88d8:	2c00      	cmp	r4, #0
   b88da:	d0e9      	beq.n	b88b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   b88dc:	a904      	add	r1, sp, #16
   b88de:	4668      	mov	r0, sp
   b88e0:	f7ff ffcc 	bl	b887c <_ZNK5spark18JSONObjectIterator5valueEv>
   b88e4:	4668      	mov	r0, sp
   b88e6:	f7ff fcbe 	bl	b8266 <_ZNK5spark9JSONValue5toIntEv>
   b88ea:	6028      	str	r0, [r5, #0]
   b88ec:	a801      	add	r0, sp, #4
   b88ee:	f7fe ffc6 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b88f2:	e7dd      	b.n	b88b0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   b88f4:	a805      	add	r0, sp, #20
   b88f6:	f7fe ffc2 	bl	b787e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b88fa:	b00a      	add	sp, #40	; 0x28
   b88fc:	bd70      	pop	{r4, r5, r6, pc}
   b88fe:	bf00      	nop
   b8900:	000bd679 	.word	0x000bd679

000b8904 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b8904:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b8906:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   b8908:	4620      	mov	r0, r4
   b890a:	4913      	ldr	r1, [pc, #76]	; (b8958 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   b890c:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   b890e:	f7fc f86b 	bl	b49e8 <strcmp>
   b8912:	b950      	cbnz	r0, b892a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
   b8914:	f001 fc4c 	bl	ba1b0 <_Z16_fetch_usbserialv>
   b8918:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b891c:	f001 fc38 	bl	ba190 <_ZN9USBSerial5beginEl>
}
   b8920:	b003      	add	sp, #12
   b8922:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
   b8926:	f001 bc43 	b.w	ba1b0 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
   b892a:	490c      	ldr	r1, [pc, #48]	; (b895c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   b892c:	4620      	mov	r0, r4
   b892e:	f7fc f85b 	bl	b49e8 <strcmp>
   b8932:	b978      	cbnz	r0, b8954 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
   b8934:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   b8938:	a901      	add	r1, sp, #4
   b893a:	4628      	mov	r0, r5
        int baud = 9600;
   b893c:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   b893e:	f7ff ffaf 	bl	b88a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   b8942:	f001 fe0b 	bl	ba55c <_Z22__fetch_global_Serial1v>
   b8946:	9901      	ldr	r1, [sp, #4]
   b8948:	f001 fbca 	bl	ba0e0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   b894c:	f001 fe06 	bl	ba55c <_Z22__fetch_global_Serial1v>
}
   b8950:	b003      	add	sp, #12
   b8952:	bd30      	pop	{r4, r5, pc}
    return nullptr;
   b8954:	2000      	movs	r0, #0
   b8956:	e7fb      	b.n	b8950 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
   b8958:	000bd67e 	.word	0x000bd67e
   b895c:	000bd685 	.word	0x000bd685

000b8960 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8960:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8962:	e9d0 5300 	ldrd	r5, r3, [r0]
   b8966:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8968:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b896a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b896e:	42ae      	cmp	r6, r5
   b8970:	d005      	beq.n	b897e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   b8972:	f105 0008 	add.w	r0, r5, #8
   b8976:	f7ff fff3 	bl	b8960 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b897a:	3514      	adds	r5, #20
   b897c:	e7f7      	b.n	b896e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   b897e:	6820      	ldr	r0, [r4, #0]
   b8980:	f7fe fc86 	bl	b7290 <free>
}
   b8984:	4620      	mov	r0, r4
   b8986:	bd70      	pop	{r4, r5, r6, pc}

000b8988 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   b8988:	b510      	push	{r4, lr}
   b898a:	4604      	mov	r4, r0
   b898c:	300c      	adds	r0, #12
   b898e:	f7ff ffe7 	bl	b8960 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8992:	4620      	mov	r0, r4
   b8994:	f7fe feea 	bl	b776c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b8998:	4620      	mov	r0, r4
   b899a:	bd10      	pop	{r4, pc}

000b899c <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   b899c:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   b899e:	4b04      	ldr	r3, [pc, #16]	; (b89b0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   b89a0:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   b89a2:	f840 3b04 	str.w	r3, [r0], #4
   b89a6:	f7ff ffef 	bl	b8988 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   b89aa:	4620      	mov	r0, r4
   b89ac:	bd10      	pop	{r4, pc}
   b89ae:	bf00      	nop
   b89b0:	000bc9c0 	.word	0x000bc9c0

000b89b4 <_ZN5spark16StreamLogHandlerD0Ev>:
   b89b4:	b510      	push	{r4, lr}
   b89b6:	4604      	mov	r4, r0
   b89b8:	f7ff fff0 	bl	b899c <_ZN5spark16StreamLogHandlerD1Ev>
   b89bc:	4620      	mov	r0, r4
   b89be:	2124      	movs	r1, #36	; 0x24
   b89c0:	f7fc f87d 	bl	b4abe <_ZdlPvj>
   b89c4:	4620      	mov	r0, r4
   b89c6:	bd10      	pop	{r4, pc}

000b89c8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   b89c8:	b510      	push	{r4, lr}
   b89ca:	4b03      	ldr	r3, [pc, #12]	; (b89d8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   b89cc:	6003      	str	r3, [r0, #0]
   b89ce:	4604      	mov	r4, r0
   b89d0:	f7ff ffe4 	bl	b899c <_ZN5spark16StreamLogHandlerD1Ev>
   b89d4:	4620      	mov	r0, r4
   b89d6:	bd10      	pop	{r4, pc}
   b89d8:	000bd720 	.word	0x000bd720

000b89dc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   b89dc:	b510      	push	{r4, lr}
   b89de:	4604      	mov	r4, r0
   b89e0:	f7ff fff2 	bl	b89c8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   b89e4:	4620      	mov	r0, r4
   b89e6:	2124      	movs	r1, #36	; 0x24
   b89e8:	f7fc f869 	bl	b4abe <_ZdlPvj>
   b89ec:	4620      	mov	r0, r4
   b89ee:	bd10      	pop	{r4, pc}

000b89f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   b89f0:	2200      	movs	r2, #0
   b89f2:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   b89f6:	b510      	push	{r4, lr}
        capacity_(0) {
   b89f8:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   b89fa:	680c      	ldr	r4, [r1, #0]
   b89fc:	6004      	str	r4, [r0, #0]
   b89fe:	684c      	ldr	r4, [r1, #4]
   b8a00:	6044      	str	r4, [r0, #4]
   b8a02:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a04:	600a      	str	r2, [r1, #0]
   b8a06:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8a08:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8a0a:	608a      	str	r2, [r1, #8]
}
   b8a0c:	bd10      	pop	{r4, pc}

000b8a0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   b8a0e:	b510      	push	{r4, lr}
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b8a10:	6803      	ldr	r3, [r0, #0]
   b8a12:	4604      	mov	r4, r0
   b8a14:	6818      	ldr	r0, [r3, #0]
   b8a16:	f7fe f9a7 	bl	b6d68 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   b8a1a:	4620      	mov	r0, r4
   b8a1c:	bd10      	pop	{r4, pc}
	...

000b8a20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   b8a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8a24:	b087      	sub	sp, #28
   b8a26:	4680      	mov	r8, r0
   b8a28:	9303      	str	r3, [sp, #12]
    #endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)

static inline bool hal_interrupt_is_isr() {
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   b8a2a:	4b1c      	ldr	r3, [pc, #112]	; (b8a9c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   b8a2c:	685b      	ldr	r3, [r3, #4]
   b8a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8a32:	4689      	mov	r9, r1
   b8a34:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
   b8a36:	b96b      	cbnz	r3, b8a54 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   b8a38:	f7ff fed0 	bl	b87dc <_ZN5spark10LogManager8instanceEv>
   b8a3c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8a3e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
   b8a42:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8a44:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
   b8a46:	f7ff fd79 	bl	b853c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
   b8a4a:	7b23      	ldrb	r3, [r4, #12]
   b8a4c:	b12b      	cbz	r3, b8a5a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   b8a4e:	a805      	add	r0, sp, #20
   b8a50:	f7ff ffdd 	bl	b8a0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   b8a54:	b007      	add	sp, #28
   b8a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   b8a5a:	2301      	movs	r3, #1
   b8a5c:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   b8a5e:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   b8a62:	fa5f f989 	uxtb.w	r9, r9
   b8a66:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8a6a:	45aa      	cmp	sl, r5
   b8a6c:	d012      	beq.n	b8a94 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   b8a6e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   b8a72:	4631      	mov	r1, r6
   b8a74:	1d38      	adds	r0, r7, #4
   b8a76:	f7ff fe05 	bl	b8684 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b8a7a:	4581      	cmp	r9, r0
   b8a7c:	d3f5      	bcc.n	b8a6a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   b8a7e:	683b      	ldr	r3, [r7, #0]
   b8a80:	9a03      	ldr	r2, [sp, #12]
   b8a82:	9200      	str	r2, [sp, #0]
   b8a84:	f8d3 b008 	ldr.w	fp, [r3, #8]
   b8a88:	464a      	mov	r2, r9
   b8a8a:	4633      	mov	r3, r6
   b8a8c:	4641      	mov	r1, r8
   b8a8e:	4638      	mov	r0, r7
   b8a90:	47d8      	blx	fp
   b8a92:	e7ea      	b.n	b8a6a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   b8a94:	2300      	movs	r3, #0
   b8a96:	7323      	strb	r3, [r4, #12]
   b8a98:	e7d9      	b.n	b8a4e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   b8a9a:	bf00      	nop
   b8a9c:	e000ed00 	.word	0xe000ed00

000b8aa0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   b8aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8aa4:	469b      	mov	fp, r3
   b8aa6:	4b1a      	ldr	r3, [pc, #104]	; (b8b10 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   b8aa8:	685b      	ldr	r3, [r3, #4]
   b8aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8aae:	4680      	mov	r8, r0
   b8ab0:	4689      	mov	r9, r1
   b8ab2:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
   b8ab4:	b96b      	cbnz	r3, b8ad2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   b8ab6:	f7ff fe91 	bl	b87dc <_ZN5spark10LogManager8instanceEv>
   b8aba:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   b8abc:	f100 0324 	add.w	r3, r0, #36	; 0x24
   b8ac0:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8ac2:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8ac4:	f7ff fd3a 	bl	b853c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
   b8ac8:	7b23      	ldrb	r3, [r4, #12]
   b8aca:	b12b      	cbz	r3, b8ad8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   b8acc:	a801      	add	r0, sp, #4
   b8ace:	f7ff ff9e 	bl	b8a0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b8ad2:	b003      	add	sp, #12
   b8ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   b8ad8:	2301      	movs	r3, #1
   b8ada:	7323      	strb	r3, [r4, #12]
   b8adc:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   b8ae0:	b2f6      	uxtb	r6, r6
   b8ae2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8ae6:	4555      	cmp	r5, sl
   b8ae8:	d00e      	beq.n	b8b08 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   b8aea:	f855 7b04 	ldr.w	r7, [r5], #4
   b8aee:	4659      	mov	r1, fp
   b8af0:	1d38      	adds	r0, r7, #4
   b8af2:	f7ff fdc7 	bl	b8684 <_ZNK5spark6detail9LogFilter5levelEPKc>
   b8af6:	4286      	cmp	r6, r0
   b8af8:	d3f5      	bcc.n	b8ae6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   b8afa:	683b      	ldr	r3, [r7, #0]
   b8afc:	464a      	mov	r2, r9
   b8afe:	68db      	ldr	r3, [r3, #12]
   b8b00:	4641      	mov	r1, r8
   b8b02:	4638      	mov	r0, r7
   b8b04:	4798      	blx	r3
   b8b06:	e7ee      	b.n	b8ae6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   b8b08:	2300      	movs	r3, #0
   b8b0a:	7323      	strb	r3, [r4, #12]
   b8b0c:	e7de      	b.n	b8acc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   b8b0e:	bf00      	nop
   b8b10:	e000ed00 	.word	0xe000ed00

000b8b14 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   b8b14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b8b18:	4b16      	ldr	r3, [pc, #88]	; (b8b74 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   b8b1a:	685b      	ldr	r3, [r3, #4]
   b8b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   b8b20:	4605      	mov	r5, r0
   b8b22:	460f      	mov	r7, r1
    if (hal_interrupt_is_isr()) {
   b8b24:	bb1b      	cbnz	r3, b8b6e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   b8b26:	f7ff fe59 	bl	b87dc <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   b8b2a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   b8b2e:	4604      	mov	r4, r0
   b8b30:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8b32:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8b34:	f7ff fd02 	bl	b853c <_ZN14RecursiveMutex4lockEv.isra.0>
   b8b38:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   b8b3c:	2446      	movs	r4, #70	; 0x46
   b8b3e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   b8b42:	45b0      	cmp	r8, r6
   b8b44:	d109      	bne.n	b8b5a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   b8b46:	a801      	add	r0, sp, #4
   b8b48:	f7ff ff61 	bl	b8a0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   b8b4c:	42a5      	cmp	r5, r4
   b8b4e:	bfb4      	ite	lt
   b8b50:	2000      	movlt	r0, #0
   b8b52:	2001      	movge	r0, #1
}
   b8b54:	b002      	add	sp, #8
   b8b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   b8b5a:	f856 0b04 	ldr.w	r0, [r6], #4
   b8b5e:	4639      	mov	r1, r7
   b8b60:	3004      	adds	r0, #4
   b8b62:	f7ff fd8f 	bl	b8684 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   b8b66:	4284      	cmp	r4, r0
   b8b68:	bfa8      	it	ge
   b8b6a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   b8b6c:	e7e9      	b.n	b8b42 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   b8b6e:	2000      	movs	r0, #0
   b8b70:	e7f0      	b.n	b8b54 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   b8b72:	bf00      	nop
   b8b74:	e000ed00 	.word	0xe000ed00

000b8b78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b7a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   b8b7e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8b80:	4604      	mov	r4, r0
   b8b82:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8b84:	db0d      	blt.n	b8ba2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
   b8b86:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
   b8b88:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8b8a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8b8c:	dd04      	ble.n	b8b98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
   b8b8e:	00b9      	lsls	r1, r7, #2
   b8b90:	f7fe fb86 	bl	b72a0 <realloc>
            if (!d) {
   b8b94:	b918      	cbnz	r0, b8b9e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
   b8b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   b8b98:	f7fe fb7a 	bl	b7290 <free>
        T* d = nullptr;
   b8b9c:	2000      	movs	r0, #0
        data_ = d;
   b8b9e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8ba0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b8ba2:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
   b8ba4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8ba6:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
   b8baa:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8bac:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
   b8bb0:	1d08      	adds	r0, r1, #4
   b8bb2:	f001 fe41 	bl	ba838 <memmove>
    new(p) T(std::move(value));
   b8bb6:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
   b8bba:	6863      	ldr	r3, [r4, #4]
   b8bbc:	3301      	adds	r3, #1
   b8bbe:	6063      	str	r3, [r4, #4]
    return true;
   b8bc0:	2001      	movs	r0, #1
   b8bc2:	e7e8      	b.n	b8b96 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

000b8bc4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   b8bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   b8bc6:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   b8bca:	4604      	mov	r4, r0
   b8bcc:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8bce:	9301      	str	r3, [sp, #4]
   b8bd0:	460d      	mov	r5, r1
      { _M_device.lock(); }
   b8bd2:	f7ff fcb3 	bl	b853c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
   b8bd6:	e9d4 3200 	ldrd	r3, r2, [r4]
   b8bda:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
   b8bde:	4293      	cmp	r3, r2
   b8be0:	4619      	mov	r1, r3
   b8be2:	d00b      	beq.n	b8bfc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   b8be4:	6809      	ldr	r1, [r1, #0]
   b8be6:	42a9      	cmp	r1, r5
   b8be8:	f103 0304 	add.w	r3, r3, #4
   b8bec:	d1f7      	bne.n	b8bde <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
   b8bee:	a801      	add	r0, sp, #4
   b8bf0:	f7ff ff0d 	bl	b8a0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b8bf4:	2500      	movs	r5, #0
}
   b8bf6:	4628      	mov	r0, r5
   b8bf8:	b003      	add	sp, #12
   b8bfa:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   b8bfc:	4629      	mov	r1, r5
   b8bfe:	4620      	mov	r0, r4
   b8c00:	f7ff ffba 	bl	b8b78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
   b8c04:	4605      	mov	r5, r0
   b8c06:	2800      	cmp	r0, #0
   b8c08:	d0f1      	beq.n	b8bee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   b8c0a:	6863      	ldr	r3, [r4, #4]
   b8c0c:	2b01      	cmp	r3, #1
   b8c0e:	d101      	bne.n	b8c14 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   b8c10:	f7ff fe00 	bl	b8814 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8c14:	a801      	add	r0, sp, #4
   b8c16:	f7ff fefa 	bl	b8a0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   b8c1a:	e7ec      	b.n	b8bf6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000b8c1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8c1c:	b570      	push	{r4, r5, r6, lr}
   b8c1e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   b8c20:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b8c24:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   b8c26:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   b8c2a:	4282      	cmp	r2, r0
   b8c2c:	d00f      	beq.n	b8c4e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
   b8c2e:	4601      	mov	r1, r0
            if (*p == value) {
   b8c30:	681d      	ldr	r5, [r3, #0]
   b8c32:	f851 6b04 	ldr.w	r6, [r1], #4
   b8c36:	42ae      	cmp	r6, r5
   b8c38:	d107      	bne.n	b8c4a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c3a:	1a52      	subs	r2, r2, r1
   b8c3c:	f001 fdfc 	bl	ba838 <memmove>
    --size_;
   b8c40:	6863      	ldr	r3, [r4, #4]
   b8c42:	3b01      	subs	r3, #1
   b8c44:	6063      	str	r3, [r4, #4]
    return true;
   b8c46:	2001      	movs	r0, #1
}
   b8c48:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
   b8c4a:	4608      	mov	r0, r1
   b8c4c:	e7ed      	b.n	b8c2a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   b8c4e:	2000      	movs	r0, #0
   b8c50:	e7fa      	b.n	b8c48 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

000b8c52 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   b8c52:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   b8c54:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   b8c58:	4604      	mov	r4, r0
   b8c5a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   b8c5c:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8c5e:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
   b8c60:	f7ff fc6c 	bl	b853c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   b8c64:	a901      	add	r1, sp, #4
   b8c66:	4620      	mov	r0, r4
   b8c68:	f7ff ffd8 	bl	b8c1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   b8c6c:	b118      	cbz	r0, b8c76 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   b8c6e:	6863      	ldr	r3, [r4, #4]
   b8c70:	b90b      	cbnz	r3, b8c76 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   b8c72:	f7ff fddb 	bl	b882c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8c76:	a803      	add	r0, sp, #12
   b8c78:	f7ff fec9 	bl	b8a0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   b8c7c:	b004      	add	sp, #16
   b8c7e:	bd10      	pop	{r4, pc}

000b8c80 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   b8c80:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   b8c82:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   b8c86:	2318      	movs	r3, #24
   b8c88:	4604      	mov	r4, r0
   b8c8a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   b8c8e:	42ae      	cmp	r6, r5
   b8c90:	d015      	beq.n	b8cbe <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   b8c92:	f105 0110 	add.w	r1, r5, #16
   b8c96:	4620      	mov	r0, r4
   b8c98:	f7ff ffc0 	bl	b8c1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   b8c9c:	6863      	ldr	r3, [r4, #4]
   b8c9e:	b90b      	cbnz	r3, b8ca4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   b8ca0:	f7ff fdc4 	bl	b882c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   b8ca4:	69e0      	ldr	r0, [r4, #28]
   b8ca6:	6929      	ldr	r1, [r5, #16]
   b8ca8:	6803      	ldr	r3, [r0, #0]
   b8caa:	68db      	ldr	r3, [r3, #12]
   b8cac:	4798      	blx	r3
        if (h.stream) {
   b8cae:	6969      	ldr	r1, [r5, #20]
   b8cb0:	b119      	cbz	r1, b8cba <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   b8cb2:	6a20      	ldr	r0, [r4, #32]
   b8cb4:	6803      	ldr	r3, [r0, #0]
   b8cb6:	68db      	ldr	r3, [r3, #12]
   b8cb8:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   b8cba:	3518      	adds	r5, #24
   b8cbc:	e7e7      	b.n	b8c8e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   b8cbe:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b8cc2:	2618      	movs	r6, #24
   b8cc4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8cc8:	42ae      	cmp	r6, r5
   b8cca:	d004      	beq.n	b8cd6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   b8ccc:	4628      	mov	r0, r5
   b8cce:	f000 fdcb 	bl	b9868 <_ZN6StringD1Ev>
   b8cd2:	3518      	adds	r5, #24
   b8cd4:	e7f8      	b.n	b8cc8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   b8cd6:	2300      	movs	r3, #0
   b8cd8:	6163      	str	r3, [r4, #20]
}
   b8cda:	bd70      	pop	{r4, r5, r6, pc}

000b8cdc <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   b8cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8cde:	4604      	mov	r4, r0
    resetSystemCallbacks();
   b8ce0:	f7ff fda4 	bl	b882c <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   b8ce4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   b8ce8:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   b8cea:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
   b8cec:	f7ff fc26 	bl	b853c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
   b8cf0:	4620      	mov	r0, r4
   b8cf2:	f7ff ffc5 	bl	b8c80 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   b8cf6:	a801      	add	r0, sp, #4
   b8cf8:	f7ff fe89 	bl	b8a0e <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   b8cfc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8cfe:	b108      	cbz	r0, b8d04 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   b8d00:	f7fe f822 	bl	b6d48 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   b8d04:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   b8d08:	2618      	movs	r6, #24
   b8d0a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b8d0e:	42ae      	cmp	r6, r5
   b8d10:	d004      	beq.n	b8d1c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   b8d12:	4628      	mov	r0, r5
   b8d14:	f000 fda8 	bl	b9868 <_ZN6StringD1Ev>
   b8d18:	3518      	adds	r5, #24
   b8d1a:	e7f8      	b.n	b8d0e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   b8d1c:	6920      	ldr	r0, [r4, #16]
   b8d1e:	f7fe fab7 	bl	b7290 <free>
   b8d22:	6820      	ldr	r0, [r4, #0]
   b8d24:	f7fe fab4 	bl	b7290 <free>
}
   b8d28:	4620      	mov	r0, r4
   b8d2a:	b002      	add	sp, #8
   b8d2c:	bd70      	pop	{r4, r5, r6, pc}
	...

000b8d30 <__tcf_2>:
    static LogManager mgr;
   b8d30:	4801      	ldr	r0, [pc, #4]	; (b8d38 <__tcf_2+0x8>)
   b8d32:	f7ff bfd3 	b.w	b8cdc <_ZN5spark10LogManagerD1Ev>
   b8d36:	bf00      	nop
   b8d38:	2003e6ac 	.word	0x2003e6ac

000b8d3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   b8d3c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8d40:	4604      	mov	r4, r0
   b8d42:	460d      	mov	r5, r1
   b8d44:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8d46:	d915      	bls.n	b8d74 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
   b8d48:	4290      	cmp	r0, r2
   b8d4a:	d214      	bcs.n	b8d76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
   b8d4c:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   b8d50:	1a75      	subs	r5, r6, r1
   b8d52:	f1a1 0714 	sub.w	r7, r1, #20
   b8d56:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8d58:	42b7      	cmp	r7, r6
   b8d5a:	d01a      	beq.n	b8d92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
   b8d5c:	b11c      	cbz	r4, b8d66 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
   b8d5e:	4631      	mov	r1, r6
   b8d60:	4620      	mov	r0, r4
   b8d62:	f7ff fc3f 	bl	b85e4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
   b8d66:	f106 0008 	add.w	r0, r6, #8
   b8d6a:	f7ff fdf9 	bl	b8960 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   b8d6e:	3e14      	subs	r6, #20
   b8d70:	3c14      	subs	r4, #20
   b8d72:	e7f1      	b.n	b8d58 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
   b8d74:	d00d      	beq.n	b8d92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
   b8d76:	42b5      	cmp	r5, r6
   b8d78:	d00b      	beq.n	b8d92 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
   b8d7a:	b11c      	cbz	r4, b8d84 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
   b8d7c:	4629      	mov	r1, r5
   b8d7e:	4620      	mov	r0, r4
   b8d80:	f7ff fc30 	bl	b85e4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
   b8d84:	f105 0008 	add.w	r0, r5, #8
   b8d88:	f7ff fdea 	bl	b8960 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   b8d8c:	3514      	adds	r5, #20
   b8d8e:	3414      	adds	r4, #20
   b8d90:	e7f1      	b.n	b8d76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
   b8d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8d94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   b8d94:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8d98:	4604      	mov	r4, r0
   b8d9a:	460d      	mov	r5, r1
   b8d9c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b8d9e:	d914      	bls.n	b8dca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   b8da0:	4290      	cmp	r0, r2
   b8da2:	d213      	bcs.n	b8dcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   b8da4:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   b8da8:	1a75      	subs	r5, r6, r1
   b8daa:	f1a1 0710 	sub.w	r7, r1, #16
   b8dae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8db0:	42b7      	cmp	r7, r6
   b8db2:	d018      	beq.n	b8de6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   b8db4:	b11c      	cbz	r4, b8dbe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   b8db6:	4631      	mov	r1, r6
   b8db8:	4620      	mov	r0, r4
   b8dba:	f000 fdd1 	bl	b9960 <_ZN6StringC1EOS_>
                end->~T();
   b8dbe:	4630      	mov	r0, r6
   b8dc0:	f000 fd52 	bl	b9868 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b8dc4:	3e10      	subs	r6, #16
   b8dc6:	3c10      	subs	r4, #16
   b8dc8:	e7f2      	b.n	b8db0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   b8dca:	d00c      	beq.n	b8de6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   b8dcc:	42b5      	cmp	r5, r6
   b8dce:	d00a      	beq.n	b8de6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   b8dd0:	b11c      	cbz	r4, b8dda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   b8dd2:	4629      	mov	r1, r5
   b8dd4:	4620      	mov	r0, r4
   b8dd6:	f000 fdc3 	bl	b9960 <_ZN6StringC1EOS_>
                p->~T();
   b8dda:	4628      	mov	r0, r5
   b8ddc:	f000 fd44 	bl	b9868 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b8de0:	3510      	adds	r5, #16
   b8de2:	3410      	adds	r4, #16
   b8de4:	e7f2      	b.n	b8dcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   b8de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8de8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   b8de8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b8dea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b8dec:	4605      	mov	r5, r0
        if (n > 0) {
   b8dee:	dd11      	ble.n	b8e14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   b8df0:	0130      	lsls	r0, r6, #4
   b8df2:	f7fe fa45 	bl	b7280 <malloc>
            if (!d) {
   b8df6:	4604      	mov	r4, r0
   b8df8:	b158      	cbz	r0, b8e12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b8dfa:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8dfe:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   b8e02:	f7ff ffc7 	bl	b8d94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   b8e06:	6828      	ldr	r0, [r5, #0]
   b8e08:	f7fe fa42 	bl	b7290 <free>
        data_ = d;
   b8e0c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b8e0e:	60ae      	str	r6, [r5, #8]
        return true;
   b8e10:	2001      	movs	r0, #1
    }
   b8e12:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b8e14:	2400      	movs	r4, #0
   b8e16:	e7f6      	b.n	b8e06 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000b8e18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8e1c:	4690      	mov	r8, r2
   b8e1e:	b095      	sub	sp, #84	; 0x54
        capacity_(0) {
   b8e20:	2300      	movs	r3, #0
   b8e22:	9103      	str	r1, [sp, #12]
    return size_;
   b8e24:	f8d8 1004 	ldr.w	r1, [r8, #4]
        capacity_(0) {
   b8e28:	930a      	str	r3, [sp, #40]	; 0x28
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8e2a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   b8e2c:	4299      	cmp	r1, r3
        capacity_(0) {
   b8e2e:	e9c0 3300 	strd	r3, r3, [r0]
   b8e32:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b8e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b8e3a:	e9cd 3308 	strd	r3, r3, [sp, #32]
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   b8e3e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   b8e40:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   b8e42:	dc23      	bgt.n	b8e8c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   b8e44:	e9d8 5700 	ldrd	r5, r7, [r8]
   b8e48:	2314      	movs	r3, #20
   b8e4a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   b8e4e:	42af      	cmp	r7, r5
   b8e50:	d03b      	beq.n	b8eca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   b8e52:	4629      	mov	r1, r5
   b8e54:	a80b      	add	r0, sp, #44	; 0x2c
   b8e56:	f000 fd83 	bl	b9960 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   b8e5a:	a90b      	add	r1, sp, #44	; 0x2c
   b8e5c:	a80f      	add	r0, sp, #60	; 0x3c
   b8e5e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   b8e60:	f000 fd7e 	bl	b9960 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8e64:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
   b8e68:	4299      	cmp	r1, r3
   b8e6a:	da1b      	bge.n	b8ea4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   b8e6c:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   b8e6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
   b8e70:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   b8e74:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   b8e78:	4631      	mov	r1, r6
   b8e7a:	f106 0010 	add.w	r0, r6, #16
   b8e7e:	f7ff ff89 	bl	b8d94 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   b8e82:	b9ee      	cbnz	r6, b8ec0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   b8e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b8e86:	3301      	adds	r3, #1
   b8e88:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
   b8e8a:	e011      	b.n	b8eb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   b8e8c:	a808      	add	r0, sp, #32
   b8e8e:	f7ff ffab 	bl	b8de8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8e92:	2800      	cmp	r0, #0
   b8e94:	d1d6      	bne.n	b8e44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
   b8e96:	a808      	add	r0, sp, #32
   b8e98:	f7fe fc68 	bl	b776c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   b8e9c:	4620      	mov	r0, r4
   b8e9e:	b015      	add	sp, #84	; 0x54
   b8ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8ea4:	3101      	adds	r1, #1
   b8ea6:	a808      	add	r0, sp, #32
   b8ea8:	f7ff ff9e 	bl	b8de8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   b8eac:	2800      	cmp	r0, #0
   b8eae:	d1dd      	bne.n	b8e6c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   b8eb0:	a80f      	add	r0, sp, #60	; 0x3c
   b8eb2:	f000 fcd9 	bl	b9868 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   b8eb6:	a80b      	add	r0, sp, #44	; 0x2c
   b8eb8:	f000 fcd6 	bl	b9868 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   b8ebc:	3514      	adds	r5, #20
   b8ebe:	e7c6      	b.n	b8e4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   b8ec0:	a90f      	add	r1, sp, #60	; 0x3c
   b8ec2:	4630      	mov	r0, r6
   b8ec4:	f000 fd4c 	bl	b9960 <_ZN6StringC1EOS_>
   b8ec8:	e7dc      	b.n	b8e84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   b8eca:	2600      	movs	r6, #0
   b8ecc:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
   b8ed0:	960d      	str	r6, [sp, #52]	; 0x34
    for (int i = 0; i < cats.size(); ++i) {
   b8ed2:	f04f 0914 	mov.w	r9, #20
    return data_[i];
   b8ed6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   b8eda:	429e      	cmp	r6, r3
   b8edc:	da7c      	bge.n	b8fd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
	const char * c_str() const { return buffer; }
   b8ede:	0133      	lsls	r3, r6, #4
   b8ee0:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   b8ee2:	9306      	str	r3, [sp, #24]
        if (!category) {
   b8ee4:	b90b      	cbnz	r3, b8eea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
   b8ee6:	3601      	adds	r6, #1
   b8ee8:	e7f5      	b.n	b8ed6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
   b8eea:	2300      	movs	r3, #0
   b8eec:	9307      	str	r3, [sp, #28]
   b8eee:	fb09 f306 	mul.w	r3, r9, r6
   b8ef2:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   b8ef4:	ad0b      	add	r5, sp, #44	; 0x2c
        while ((name = nextSubcategoryName(category, size))) {
   b8ef6:	a907      	add	r1, sp, #28
   b8ef8:	a806      	add	r0, sp, #24
   b8efa:	f7ff faf8 	bl	b84ee <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   b8efe:	4682      	mov	sl, r0
   b8f00:	2800      	cmp	r0, #0
   b8f02:	d0f0      	beq.n	b8ee6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
   b8f04:	f04f 0300 	mov.w	r3, #0
   b8f08:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8f0c:	4601      	mov	r1, r0
   b8f0e:	9a07      	ldr	r2, [sp, #28]
   b8f10:	f10d 0317 	add.w	r3, sp, #23
   b8f14:	4628      	mov	r0, r5
   b8f16:	f7ff fb79 	bl	b860c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8f1a:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
   b8f1e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8f20:	2f00      	cmp	r7, #0
   b8f22:	d14a      	bne.n	b8fba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
   b8f24:	f8bd 301c 	ldrh.w	r3, [sp, #28]
            level(-1) {
   b8f28:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        capacity_(0) {
   b8f2c:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
   b8f30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b8f34:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   b8f38:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   b8f3c:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8f3e:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   b8f42:	4293      	cmp	r3, r2
   b8f44:	db17      	blt.n	b8f76 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
   b8f46:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
   b8f4a:	f1ba 0f00 	cmp.w	sl, #0
   b8f4e:	dd30      	ble.n	b8fb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
   b8f50:	fb09 f00a 	mul.w	r0, r9, sl
   b8f54:	f7fe f994 	bl	b7280 <malloc>
            if (!d) {
   b8f58:	4683      	mov	fp, r0
   b8f5a:	b360      	cbz	r0, b8fb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
   b8f5c:	e9d5 1200 	ldrd	r1, r2, [r5]
   b8f60:	fb09 1202 	mla	r2, r9, r2, r1
   b8f64:	f7ff feea 	bl	b8d3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
   b8f68:	6828      	ldr	r0, [r5, #0]
   b8f6a:	f7fe f991 	bl	b7290 <free>
        data_ = d;
   b8f6e:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
   b8f72:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
   b8f76:	682b      	ldr	r3, [r5, #0]
   b8f78:	9a01      	ldr	r2, [sp, #4]
   b8f7a:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
   b8f7e:	686a      	ldr	r2, [r5, #4]
   b8f80:	4651      	mov	r1, sl
   b8f82:	fb09 3202 	mla	r2, r9, r2, r3
   b8f86:	f10a 0014 	add.w	r0, sl, #20
   b8f8a:	f7ff fed7 	bl	b8d3c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   b8f8e:	f1ba 0f00 	cmp.w	sl, #0
   b8f92:	d003      	beq.n	b8f9c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
   b8f94:	a90f      	add	r1, sp, #60	; 0x3c
   b8f96:	4650      	mov	r0, sl
   b8f98:	f7ff fb24 	bl	b85e4 <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
   b8f9c:	686b      	ldr	r3, [r5, #4]
   b8f9e:	3301      	adds	r3, #1
   b8fa0:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
   b8fa2:	a811      	add	r0, sp, #68	; 0x44
   b8fa4:	f7ff fcdc 	bl	b8960 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8fa8:	b13f      	cbz	r7, b8fba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
   b8faa:	a80b      	add	r0, sp, #44	; 0x2c
   b8fac:	f7ff fcd8 	bl	b8960 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   b8fb0:	e771      	b.n	b8e96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   b8fb2:	46bb      	mov	fp, r7
   b8fb4:	e7d8      	b.n	b8f68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   b8fb6:	2701      	movs	r7, #1
   b8fb8:	e7f3      	b.n	b8fa2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
   b8fba:	9b01      	ldr	r3, [sp, #4]
   b8fbc:	682d      	ldr	r5, [r5, #0]
   b8fbe:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
   b8fc2:	9b06      	ldr	r3, [sp, #24]
   b8fc4:	781b      	ldrb	r3, [r3, #0]
   b8fc6:	b92b      	cbnz	r3, b8fd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
   b8fc8:	f8d8 3000 	ldr.w	r3, [r8]
   b8fcc:	9a02      	ldr	r2, [sp, #8]
   b8fce:	4413      	add	r3, r2
   b8fd0:	7c1b      	ldrb	r3, [r3, #16]
   b8fd2:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   b8fd4:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   b8fd6:	e78e      	b.n	b8ef6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8fd8:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8fda:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8fdc:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b8fde:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8fe0:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8fe2:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
   b8fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
   b8fe6:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8fe8:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8fea:	60a2      	str	r2, [r4, #8]
   b8fec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
   b8fee:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8ff0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   b8ff2:	60e2      	str	r2, [r4, #12]
   b8ff4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   b8ff6:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8ff8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   b8ffa:	6122      	str	r2, [r4, #16]
   b8ffc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   b8ffe:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
   b9000:	9b03      	ldr	r3, [sp, #12]
   b9002:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
   b9004:	6162      	str	r2, [r4, #20]
   b9006:	7623      	strb	r3, [r4, #24]
   b9008:	e7cf      	b.n	b8faa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

000b900c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b900c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b900e:	4604      	mov	r4, r0
   b9010:	b087      	sub	sp, #28
   b9012:	460d      	mov	r5, r1
        filter_(level, filters) {
   b9014:	4626      	mov	r6, r4
        stream_(&stream) {
   b9016:	4619      	mov	r1, r3
   b9018:	4668      	mov	r0, sp
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
   b901a:	4617      	mov	r7, r2
        stream_(&stream) {
   b901c:	f7fb ff45 	bl	b4eaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   b9020:	4b0b      	ldr	r3, [pc, #44]	; (b9050 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
   b9022:	f846 3b04 	str.w	r3, [r6], #4
   b9026:	4669      	mov	r1, sp
   b9028:	a803      	add	r0, sp, #12
   b902a:	f7fb ff3e 	bl	b4eaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   b902e:	aa03      	add	r2, sp, #12
   b9030:	4639      	mov	r1, r7
   b9032:	4630      	mov	r0, r6
   b9034:	f7ff fef0 	bl	b8e18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b9038:	a803      	add	r0, sp, #12
   b903a:	f7fb fef5 	bl	b4e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   b903e:	4668      	mov	r0, sp
   b9040:	f7fb fef2 	bl	b4e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b9044:	4b03      	ldr	r3, [pc, #12]	; (b9054 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
   b9046:	6023      	str	r3, [r4, #0]
}
   b9048:	4620      	mov	r0, r4
        stream_(&stream) {
   b904a:	6225      	str	r5, [r4, #32]
}
   b904c:	b007      	add	sp, #28
   b904e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9050:	000bc9c0 	.word	0x000bc9c0
   b9054:	000bd708 	.word	0x000bd708

000b9058 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   b9058:	b5f0      	push	{r4, r5, r6, r7, lr}
   b905a:	460f      	mov	r7, r1
   b905c:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b905e:	491d      	ldr	r1, [pc, #116]	; (b90d4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
   b9060:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9062:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   b9064:	4616      	mov	r6, r2
   b9066:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   b9068:	f7fb fcbe 	bl	b49e8 <strcmp>
   b906c:	b9c0      	cbnz	r0, b90a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
   b906e:	b1a4      	cbz	r4, b909a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   b9070:	4629      	mov	r1, r5
   b9072:	a801      	add	r0, sp, #4
   b9074:	f7ff fcbc 	bl	b89f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b9078:	4917      	ldr	r1, [pc, #92]	; (b90d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b907a:	2024      	movs	r0, #36	; 0x24
   b907c:	f001 fa92 	bl	ba5a4 <_ZnwjRKSt9nothrow_t>
   b9080:	4605      	mov	r5, r0
   b9082:	b130      	cbz	r0, b9092 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
   b9084:	ab01      	add	r3, sp, #4
   b9086:	4632      	mov	r2, r6
   b9088:	4621      	mov	r1, r4
   b908a:	f7ff ffbf 	bl	b900c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b908e:	4b13      	ldr	r3, [pc, #76]	; (b90dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
   b9090:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b9092:	a801      	add	r0, sp, #4
   b9094:	f7fb fec8 	bl	b4e28 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   b9098:	462c      	mov	r4, r5
}
   b909a:	4620      	mov	r0, r4
   b909c:	b005      	add	sp, #20
   b909e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   b90a0:	490f      	ldr	r1, [pc, #60]	; (b90e0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
   b90a2:	4638      	mov	r0, r7
   b90a4:	f7fb fca0 	bl	b49e8 <strcmp>
   b90a8:	b990      	cbnz	r0, b90d0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
   b90aa:	2c00      	cmp	r4, #0
   b90ac:	d0f5      	beq.n	b909a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   b90ae:	4629      	mov	r1, r5
   b90b0:	a801      	add	r0, sp, #4
   b90b2:	f7ff fc9d 	bl	b89f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   b90b6:	4908      	ldr	r1, [pc, #32]	; (b90d8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
   b90b8:	2024      	movs	r0, #36	; 0x24
   b90ba:	f001 fa73 	bl	ba5a4 <_ZnwjRKSt9nothrow_t>
   b90be:	4605      	mov	r5, r0
   b90c0:	2800      	cmp	r0, #0
   b90c2:	d0e6      	beq.n	b9092 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
   b90c4:	ab01      	add	r3, sp, #4
   b90c6:	4632      	mov	r2, r6
   b90c8:	4621      	mov	r1, r4
   b90ca:	f7ff ff9f 	bl	b900c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   b90ce:	e7e0      	b.n	b9092 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
   b90d0:	2400      	movs	r4, #0
   b90d2:	e7e2      	b.n	b909a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
   b90d4:	000bd68d 	.word	0x000bd68d
   b90d8:	000bd8dc 	.word	0x000bd8dc
   b90dc:	000bd720 	.word	0x000bd720
   b90e0:	000bd691 	.word	0x000bd691

000b90e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   b90e4:	4b01      	ldr	r3, [pc, #4]	; (b90ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b90e6:	4a02      	ldr	r2, [pc, #8]	; (b90f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b90e8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b90ea:	4770      	bx	lr
   b90ec:	2003e6a8 	.word	0x2003e6a8
   b90f0:	000bd6a2 	.word	0x000bd6a2

000b90f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b90f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b90f8:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   b90fa:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b90fe:	4604      	mov	r4, r0
   b9100:	460e      	mov	r6, r1
   b9102:	4617      	mov	r7, r2
   b9104:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   b9106:	f001 f853 	bl	ba1b0 <_Z16_fetch_usbserialv>
   b910a:	4581      	cmp	r9, r0
   b910c:	d04c      	beq.n	b91a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   b910e:	792b      	ldrb	r3, [r5, #4]
   b9110:	0719      	lsls	r1, r3, #28
   b9112:	d504      	bpl.n	b911e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   b9114:	696a      	ldr	r2, [r5, #20]
   b9116:	4954      	ldr	r1, [pc, #336]	; (b9268 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   b9118:	4620      	mov	r0, r4
   b911a:	f7ff fadc 	bl	b86d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   b911e:	f1b8 0f00 	cmp.w	r8, #0
   b9122:	d00d      	beq.n	b9140 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   b9124:	215b      	movs	r1, #91	; 0x5b
   b9126:	4620      	mov	r0, r4
   b9128:	f7ff fa50 	bl	b85cc <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   b912c:	4641      	mov	r1, r8
   b912e:	4620      	mov	r0, r4
   b9130:	f7ff fa3d 	bl	b85ae <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   b9134:	6823      	ldr	r3, [r4, #0]
   b9136:	494d      	ldr	r1, [pc, #308]	; (b926c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   b9138:	68db      	ldr	r3, [r3, #12]
   b913a:	2202      	movs	r2, #2
   b913c:	4620      	mov	r0, r4
   b913e:	4798      	blx	r3
    if (attr.has_file) {
   b9140:	792b      	ldrb	r3, [r5, #4]
   b9142:	07da      	lsls	r2, r3, #31
   b9144:	d523      	bpl.n	b918e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   b9146:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   b914a:	212f      	movs	r1, #47	; 0x2f
   b914c:	4640      	mov	r0, r8
   b914e:	f001 fc02 	bl	ba956 <strrchr>
    if (s1) {
   b9152:	b108      	cbz	r0, b9158 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   b9154:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   b9158:	4641      	mov	r1, r8
   b915a:	4620      	mov	r0, r4
   b915c:	f7ff fa27 	bl	b85ae <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   b9160:	792b      	ldrb	r3, [r5, #4]
   b9162:	079b      	lsls	r3, r3, #30
   b9164:	d508      	bpl.n	b9178 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   b9166:	213a      	movs	r1, #58	; 0x3a
   b9168:	4620      	mov	r0, r4
   b916a:	f7ff fa2f 	bl	b85cc <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   b916e:	68ea      	ldr	r2, [r5, #12]
   b9170:	493f      	ldr	r1, [pc, #252]	; (b9270 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   b9172:	4620      	mov	r0, r4
   b9174:	f7ff faaf 	bl	b86d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   b9178:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
   b917a:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
   b917c:	f012 0f04 	tst.w	r2, #4
            write(", ", 2);
   b9180:	68db      	ldr	r3, [r3, #12]
   b9182:	bf14      	ite	ne
   b9184:	493b      	ldrne	r1, [pc, #236]	; (b9274 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   b9186:	493c      	ldreq	r1, [pc, #240]	; (b9278 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   b9188:	2202      	movs	r2, #2
            write(": ", 2);
   b918a:	4620      	mov	r0, r4
   b918c:	4798      	blx	r3
    if (attr.has_function) {
   b918e:	792b      	ldrb	r3, [r5, #4]
   b9190:	0758      	lsls	r0, r3, #29
   b9192:	d51d      	bpl.n	b91d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b9194:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b9196:	460b      	mov	r3, r1
   b9198:	461a      	mov	r2, r3
    for (; *s; ++s) {
   b919a:	f813 0b01 	ldrb.w	r0, [r3], #1
   b919e:	b160      	cbz	r0, b91ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   b91a0:	2820      	cmp	r0, #32
   b91a2:	d108      	bne.n	b91b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   b91a4:	4619      	mov	r1, r3
   b91a6:	e7f7      	b.n	b9198 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   b91a8:	4834      	ldr	r0, [pc, #208]	; (b927c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   b91aa:	f000 f982 	bl	b94b2 <_ZN5spark12NetworkClass9listeningEv>
   b91ae:	2800      	cmp	r0, #0
   b91b0:	d0ad      	beq.n	b910e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   b91b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   b91b6:	2828      	cmp	r0, #40	; 0x28
   b91b8:	d1ee      	bne.n	b9198 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   b91ba:	6823      	ldr	r3, [r4, #0]
   b91bc:	1a52      	subs	r2, r2, r1
   b91be:	68db      	ldr	r3, [r3, #12]
   b91c0:	4620      	mov	r0, r4
   b91c2:	4798      	blx	r3
        write("(): ", 4);
   b91c4:	6823      	ldr	r3, [r4, #0]
   b91c6:	492e      	ldr	r1, [pc, #184]	; (b9280 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   b91c8:	68db      	ldr	r3, [r3, #12]
   b91ca:	2204      	movs	r2, #4
   b91cc:	4620      	mov	r0, r4
   b91ce:	4798      	blx	r3
    return log_level_name(level, nullptr);
   b91d0:	2100      	movs	r1, #0
   b91d2:	4638      	mov	r0, r7
   b91d4:	f7fd ffa8 	bl	b7128 <log_level_name>
   b91d8:	4601      	mov	r1, r0
    write(s);
   b91da:	4620      	mov	r0, r4
   b91dc:	f7ff f9e7 	bl	b85ae <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   b91e0:	6823      	ldr	r3, [r4, #0]
   b91e2:	4925      	ldr	r1, [pc, #148]	; (b9278 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   b91e4:	68db      	ldr	r3, [r3, #12]
   b91e6:	2202      	movs	r2, #2
   b91e8:	4620      	mov	r0, r4
   b91ea:	4798      	blx	r3
    if (msg) {
   b91ec:	b11e      	cbz	r6, b91f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   b91ee:	4631      	mov	r1, r6
   b91f0:	4620      	mov	r0, r4
   b91f2:	f7ff f9dc 	bl	b85ae <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   b91f6:	792b      	ldrb	r3, [r5, #4]
   b91f8:	f013 0f30 	tst.w	r3, #48	; 0x30
   b91fc:	d02c      	beq.n	b9258 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   b91fe:	6823      	ldr	r3, [r4, #0]
   b9200:	4920      	ldr	r1, [pc, #128]	; (b9284 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   b9202:	68db      	ldr	r3, [r3, #12]
   b9204:	2202      	movs	r2, #2
   b9206:	4620      	mov	r0, r4
   b9208:	4798      	blx	r3
        if (attr.has_code) {
   b920a:	792b      	ldrb	r3, [r5, #4]
   b920c:	06d9      	lsls	r1, r3, #27
   b920e:	d50a      	bpl.n	b9226 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   b9210:	6823      	ldr	r3, [r4, #0]
   b9212:	491d      	ldr	r1, [pc, #116]	; (b9288 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   b9214:	68db      	ldr	r3, [r3, #12]
   b9216:	2207      	movs	r2, #7
   b9218:	4620      	mov	r0, r4
   b921a:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   b921c:	69aa      	ldr	r2, [r5, #24]
   b921e:	491b      	ldr	r1, [pc, #108]	; (b928c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   b9220:	4620      	mov	r0, r4
   b9222:	f7ff fa58 	bl	b86d6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   b9226:	792b      	ldrb	r3, [r5, #4]
   b9228:	069a      	lsls	r2, r3, #26
   b922a:	d511      	bpl.n	b9250 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   b922c:	06db      	lsls	r3, r3, #27
   b922e:	d505      	bpl.n	b923c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   b9230:	6823      	ldr	r3, [r4, #0]
   b9232:	4910      	ldr	r1, [pc, #64]	; (b9274 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   b9234:	68db      	ldr	r3, [r3, #12]
   b9236:	2202      	movs	r2, #2
   b9238:	4620      	mov	r0, r4
   b923a:	4798      	blx	r3
            write("details = ", 10);
   b923c:	6823      	ldr	r3, [r4, #0]
   b923e:	4914      	ldr	r1, [pc, #80]	; (b9290 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   b9240:	68db      	ldr	r3, [r3, #12]
   b9242:	4620      	mov	r0, r4
   b9244:	220a      	movs	r2, #10
   b9246:	4798      	blx	r3
            write(attr.details);
   b9248:	69e9      	ldr	r1, [r5, #28]
   b924a:	4620      	mov	r0, r4
   b924c:	f7ff f9af 	bl	b85ae <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   b9250:	215d      	movs	r1, #93	; 0x5d
   b9252:	4620      	mov	r0, r4
   b9254:	f7ff f9ba 	bl	b85cc <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   b9258:	6823      	ldr	r3, [r4, #0]
   b925a:	490e      	ldr	r1, [pc, #56]	; (b9294 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   b925c:	68db      	ldr	r3, [r3, #12]
   b925e:	4620      	mov	r0, r4
   b9260:	2202      	movs	r2, #2
}
   b9262:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   b9266:	4718      	bx	r3
   b9268:	000bd6a6 	.word	0x000bd6a6
   b926c:	000bd6ad 	.word	0x000bd6ad
   b9270:	000bd7b8 	.word	0x000bd7b8
   b9274:	000bd6b0 	.word	0x000bd6b0
   b9278:	000bd6b5 	.word	0x000bd6b5
   b927c:	2003e6d4 	.word	0x2003e6d4
   b9280:	000bd6b3 	.word	0x000bd6b3
   b9284:	000bd6b8 	.word	0x000bd6b8
   b9288:	000bd6bb 	.word	0x000bd6bb
   b928c:	000bd6c3 	.word	0x000bd6c3
   b9290:	000bd6c6 	.word	0x000bd6c6
   b9294:	000bd6d1 	.word	0x000bd6d1

000b9298 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b9298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b929c:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
   b929e:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
   b92a0:	460d      	mov	r5, r1
   b92a2:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
   b92a4:	f000 ff84 	bl	ba1b0 <_Z16_fetch_usbserialv>
   b92a8:	4287      	cmp	r7, r0
   b92aa:	d007      	beq.n	b92bc <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
   b92ac:	6a20      	ldr	r0, [r4, #32]
   b92ae:	6803      	ldr	r3, [r0, #0]
   b92b0:	4632      	mov	r2, r6
   b92b2:	4629      	mov	r1, r5
   b92b4:	68db      	ldr	r3, [r3, #12]
}
   b92b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
   b92ba:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
   b92bc:	4803      	ldr	r0, [pc, #12]	; (b92cc <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
   b92be:	f000 f8f8 	bl	b94b2 <_ZN5spark12NetworkClass9listeningEv>
   b92c2:	2800      	cmp	r0, #0
   b92c4:	d0f2      	beq.n	b92ac <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
   b92c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b92ca:	bf00      	nop
   b92cc:	2003e6d4 	.word	0x2003e6d4

000b92d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   b92d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b92d4:	b085      	sub	sp, #20
    return stream_;
   b92d6:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b92da:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   b92dc:	4605      	mov	r5, r0
   b92de:	460f      	mov	r7, r1
   b92e0:	4690      	mov	r8, r2
   b92e2:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   b92e4:	f000 ff64 	bl	ba1b0 <_Z16_fetch_usbserialv>
   b92e8:	4581      	cmp	r9, r0
   b92ea:	d105      	bne.n	b92f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   b92ec:	4849      	ldr	r0, [pc, #292]	; (b9414 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   b92ee:	f000 f8e0 	bl	b94b2 <_ZN5spark12NetworkClass9listeningEv>
   b92f2:	2800      	cmp	r0, #0
   b92f4:	f040 808a 	bne.w	b940c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
   b92f8:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   b92fa:	4a47      	ldr	r2, [pc, #284]	; (b9418 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   b92fc:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   b92fe:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   b9302:	a801      	add	r0, sp, #4
        strm_(stream) {
   b9304:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   b9306:	f88d 9008 	strb.w	r9, [sp, #8]
   b930a:	f7ff f832 	bl	b8372 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
   b930e:	4649      	mov	r1, r9
   b9310:	4640      	mov	r0, r8
   b9312:	f7fd ff09 	bl	b7128 <log_level_name>
    json.name("l", 1).value(s);
   b9316:	4941      	ldr	r1, [pc, #260]	; (b941c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   b9318:	4680      	mov	r8, r0
   b931a:	2201      	movs	r2, #1
   b931c:	a801      	add	r0, sp, #4
   b931e:	f7ff f8b7 	bl	b8490 <_ZN5spark10JSONWriter4nameEPKcj>
   b9322:	4641      	mov	r1, r8
   b9324:	f7ff f935 	bl	b8592 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   b9328:	b13f      	cbz	r7, b933a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   b932a:	493d      	ldr	r1, [pc, #244]	; (b9420 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   b932c:	2201      	movs	r2, #1
   b932e:	a801      	add	r0, sp, #4
   b9330:	f7ff f8ae 	bl	b8490 <_ZN5spark10JSONWriter4nameEPKcj>
   b9334:	4639      	mov	r1, r7
   b9336:	f7ff f92c 	bl	b8592 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   b933a:	b13e      	cbz	r6, b934c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   b933c:	4939      	ldr	r1, [pc, #228]	; (b9424 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   b933e:	2201      	movs	r2, #1
   b9340:	a801      	add	r0, sp, #4
   b9342:	f7ff f8a5 	bl	b8490 <_ZN5spark10JSONWriter4nameEPKcj>
   b9346:	4631      	mov	r1, r6
   b9348:	f7ff f923 	bl	b8592 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   b934c:	7923      	ldrb	r3, [r4, #4]
   b934e:	07df      	lsls	r7, r3, #31
   b9350:	d50e      	bpl.n	b9370 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   b9352:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   b9354:	212f      	movs	r1, #47	; 0x2f
   b9356:	4630      	mov	r0, r6
   b9358:	f001 fafd 	bl	ba956 <strrchr>
    if (s1) {
   b935c:	b100      	cbz	r0, b9360 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   b935e:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   b9360:	4931      	ldr	r1, [pc, #196]	; (b9428 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   b9362:	2201      	movs	r2, #1
   b9364:	a801      	add	r0, sp, #4
   b9366:	f7ff f893 	bl	b8490 <_ZN5spark10JSONWriter4nameEPKcj>
   b936a:	4631      	mov	r1, r6
   b936c:	f7ff f911 	bl	b8592 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   b9370:	7923      	ldrb	r3, [r4, #4]
   b9372:	079e      	lsls	r6, r3, #30
   b9374:	d507      	bpl.n	b9386 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   b9376:	492d      	ldr	r1, [pc, #180]	; (b942c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   b9378:	2202      	movs	r2, #2
   b937a:	a801      	add	r0, sp, #4
   b937c:	f7ff f888 	bl	b8490 <_ZN5spark10JSONWriter4nameEPKcj>
   b9380:	68e1      	ldr	r1, [r4, #12]
   b9382:	f7ff f803 	bl	b838c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   b9386:	7923      	ldrb	r3, [r4, #4]
   b9388:	0758      	lsls	r0, r3, #29
   b938a:	d514      	bpl.n	b93b6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   b938c:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   b938e:	4633      	mov	r3, r6
   b9390:	461f      	mov	r7, r3
    for (; *s; ++s) {
   b9392:	f813 2b01 	ldrb.w	r2, [r3], #1
   b9396:	b12a      	cbz	r2, b93a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   b9398:	2a20      	cmp	r2, #32
   b939a:	d101      	bne.n	b93a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   b939c:	461e      	mov	r6, r3
   b939e:	e7f7      	b.n	b9390 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   b93a0:	2a28      	cmp	r2, #40	; 0x28
   b93a2:	d1f5      	bne.n	b9390 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   b93a4:	4922      	ldr	r1, [pc, #136]	; (b9430 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   b93a6:	2202      	movs	r2, #2
   b93a8:	a801      	add	r0, sp, #4
   b93aa:	f7ff f871 	bl	b8490 <_ZN5spark10JSONWriter4nameEPKcj>
   b93ae:	1bba      	subs	r2, r7, r6
   b93b0:	4631      	mov	r1, r6
   b93b2:	f7ff f87d 	bl	b84b0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   b93b6:	7923      	ldrb	r3, [r4, #4]
   b93b8:	0719      	lsls	r1, r3, #28
   b93ba:	d507      	bpl.n	b93cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   b93bc:	491d      	ldr	r1, [pc, #116]	; (b9434 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   b93be:	2201      	movs	r2, #1
   b93c0:	a801      	add	r0, sp, #4
   b93c2:	f7ff f865 	bl	b8490 <_ZN5spark10JSONWriter4nameEPKcj>
   b93c6:	6961      	ldr	r1, [r4, #20]
   b93c8:	f7fe fff2 	bl	b83b0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   b93cc:	7923      	ldrb	r3, [r4, #4]
   b93ce:	06da      	lsls	r2, r3, #27
   b93d0:	d508      	bpl.n	b93e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   b93d2:	2204      	movs	r2, #4
   b93d4:	4918      	ldr	r1, [pc, #96]	; (b9438 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   b93d6:	eb0d 0002 	add.w	r0, sp, r2
   b93da:	f7ff f859 	bl	b8490 <_ZN5spark10JSONWriter4nameEPKcj>
   b93de:	69a1      	ldr	r1, [r4, #24]
   b93e0:	f7fe ffd4 	bl	b838c <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   b93e4:	7923      	ldrb	r3, [r4, #4]
   b93e6:	069b      	lsls	r3, r3, #26
   b93e8:	d507      	bpl.n	b93fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   b93ea:	4914      	ldr	r1, [pc, #80]	; (b943c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   b93ec:	2206      	movs	r2, #6
   b93ee:	a801      	add	r0, sp, #4
   b93f0:	f7ff f84e 	bl	b8490 <_ZN5spark10JSONWriter4nameEPKcj>
   b93f4:	69e1      	ldr	r1, [r4, #28]
   b93f6:	f7ff f8cc 	bl	b8592 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   b93fa:	a801      	add	r0, sp, #4
   b93fc:	f7fe ffa3 	bl	b8346 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
   b9400:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   b9402:	490f      	ldr	r1, [pc, #60]	; (b9440 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   b9404:	6803      	ldr	r3, [r0, #0]
   b9406:	2202      	movs	r2, #2
   b9408:	68db      	ldr	r3, [r3, #12]
   b940a:	4798      	blx	r3
}
   b940c:	b005      	add	sp, #20
   b940e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b9412:	bf00      	nop
   b9414:	2003e6d4 	.word	0x2003e6d4
   b9418:	000bd6f0 	.word	0x000bd6f0
   b941c:	000bd683 	.word	0x000bd683
   b9420:	000bc95b 	.word	0x000bc95b
   b9424:	000bdc80 	.word	0x000bdc80
   b9428:	000bda42 	.word	0x000bda42
   b942c:	000bd6d4 	.word	0x000bd6d4
   b9430:	000bd6d7 	.word	0x000bd6d7
   b9434:	000bc946 	.word	0x000bc946
   b9438:	000bd6da 	.word	0x000bd6da
   b943c:	000bd6df 	.word	0x000bd6df
   b9440:	000bd6d1 	.word	0x000bd6d1

000b9444 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b9444:	2300      	movs	r3, #0
   b9446:	6840      	ldr	r0, [r0, #4]
   b9448:	461a      	mov	r2, r3
   b944a:	f7fd beb9 	b.w	b71c0 <network_connect>

000b944e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b944e:	6840      	ldr	r0, [r0, #4]
   b9450:	2200      	movs	r2, #0
   b9452:	2102      	movs	r1, #2
   b9454:	f7fd bec4 	b.w	b71e0 <network_disconnect>

000b9458 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b9458:	2200      	movs	r2, #0
   b945a:	6840      	ldr	r0, [r0, #4]
   b945c:	4611      	mov	r1, r2
   b945e:	f7fd beb7 	b.w	b71d0 <network_connecting>

000b9462 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b9462:	2200      	movs	r2, #0
   b9464:	6840      	ldr	r0, [r0, #4]
   b9466:	4611      	mov	r1, r2
   b9468:	f7fd bec2 	b.w	b71f0 <network_ready>

000b946c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b946c:	2300      	movs	r3, #0
   b946e:	6840      	ldr	r0, [r0, #4]
   b9470:	461a      	mov	r2, r3
   b9472:	4619      	mov	r1, r3
   b9474:	f7fd bec4 	b.w	b7200 <network_on>

000b9478 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b9478:	2300      	movs	r3, #0
   b947a:	6840      	ldr	r0, [r0, #4]
   b947c:	461a      	mov	r2, r3
   b947e:	4619      	mov	r1, r3
   b9480:	f7fd bec6 	b.w	b7210 <network_off>

000b9484 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b9484:	6840      	ldr	r0, [r0, #4]
   b9486:	2100      	movs	r1, #0
   b9488:	f7fd beea 	b.w	b7260 <network_is_on>

000b948c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b948c:	6840      	ldr	r0, [r0, #4]
   b948e:	2100      	movs	r1, #0
   b9490:	f7fd beee 	b.w	b7270 <network_is_off>

000b9494 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b9494:	6840      	ldr	r0, [r0, #4]
   b9496:	2200      	movs	r2, #0
   b9498:	f081 0101 	eor.w	r1, r1, #1
   b949c:	f7fd bec0 	b.w	b7220 <network_listen>

000b94a0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b94a0:	6840      	ldr	r0, [r0, #4]
   b94a2:	2200      	movs	r2, #0
   b94a4:	f7fd becc 	b.w	b7240 <network_set_listen_timeout>

000b94a8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b94a8:	2200      	movs	r2, #0
   b94aa:	6840      	ldr	r0, [r0, #4]
   b94ac:	4611      	mov	r1, r2
   b94ae:	f7fd becf 	b.w	b7250 <network_get_listen_timeout>

000b94b2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b94b2:	2200      	movs	r2, #0
   b94b4:	6840      	ldr	r0, [r0, #4]
   b94b6:	4611      	mov	r1, r2
   b94b8:	f7fd beba 	b.w	b7230 <network_listening>

000b94bc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b94bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b94c0:	b095      	sub	sp, #84	; 0x54
   b94c2:	4614      	mov	r4, r2
   b94c4:	460d      	mov	r5, r1
   b94c6:	4607      	mov	r7, r0
    IPAddress addr;
   b94c8:	f7fe fdd6 	bl	b8078 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b94cc:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b94ce:	221c      	movs	r2, #28
   b94d0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b94d2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b94d4:	f001 f9ca 	bl	ba86c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b94d8:	2340      	movs	r3, #64	; 0x40
   b94da:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b94dc:	4620      	mov	r0, r4
   b94de:	466b      	mov	r3, sp
   b94e0:	aa0c      	add	r2, sp, #48	; 0x30
   b94e2:	2100      	movs	r1, #0
   b94e4:	f7fd fd00 	bl	b6ee8 <netdb_getaddrinfo>
    if (!r) {
   b94e8:	4604      	mov	r4, r0
   b94ea:	2800      	cmp	r0, #0
   b94ec:	d14b      	bne.n	b9586 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b94ee:	4602      	mov	r2, r0
   b94f0:	2101      	movs	r1, #1
   b94f2:	6868      	ldr	r0, [r5, #4]
   b94f4:	f7fd fe7c 	bl	b71f0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b94f8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b94fa:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b94fc:	4622      	mov	r2, r4
   b94fe:	6868      	ldr	r0, [r5, #4]
   b9500:	f7fd fe76 	bl	b71f0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b9504:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b9506:	4681      	mov	r9, r0
        bool ok = false;
   b9508:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b950a:	2e00      	cmp	r6, #0
   b950c:	d03b      	beq.n	b9586 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b950e:	2900      	cmp	r1, #0
   b9510:	d139      	bne.n	b9586 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b9512:	6873      	ldr	r3, [r6, #4]
   b9514:	2b02      	cmp	r3, #2
   b9516:	d003      	beq.n	b9520 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b9518:	2b0a      	cmp	r3, #10
   b951a:	d011      	beq.n	b9540 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b951c:	69f6      	ldr	r6, [r6, #28]
   b951e:	e7f4      	b.n	b950a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b9520:	f1b8 0f00 	cmp.w	r8, #0
   b9524:	d0fa      	beq.n	b951c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b9526:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b9528:	a806      	add	r0, sp, #24
   b952a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b952c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b952e:	f7fe fde7 	bl	b8100 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9534:	1d3c      	adds	r4, r7, #4
   b9536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9538:	682b      	ldr	r3, [r5, #0]
   b953a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b953c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b953e:	e7ed      	b.n	b951c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b9540:	f1b9 0f00 	cmp.w	r9, #0
   b9544:	d0ea      	beq.n	b951c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b9546:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b9548:	2210      	movs	r2, #16
   b954a:	a801      	add	r0, sp, #4
   b954c:	f001 f98e 	bl	ba86c <memset>
                    a.v = 6;
   b9550:	2306      	movs	r3, #6
   b9552:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9556:	ad01      	add	r5, sp, #4
   b9558:	f104 0308 	add.w	r3, r4, #8
   b955c:	3418      	adds	r4, #24
   b955e:	6818      	ldr	r0, [r3, #0]
   b9560:	6859      	ldr	r1, [r3, #4]
   b9562:	462a      	mov	r2, r5
   b9564:	c203      	stmia	r2!, {r0, r1}
   b9566:	3308      	adds	r3, #8
   b9568:	42a3      	cmp	r3, r4
   b956a:	4615      	mov	r5, r2
   b956c:	d1f7      	bne.n	b955e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b956e:	a901      	add	r1, sp, #4
   b9570:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b9572:	ad07      	add	r5, sp, #28
   b9574:	f7fe fd8e 	bl	b8094 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b957a:	1d3c      	adds	r4, r7, #4
   b957c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b957e:	682b      	ldr	r3, [r5, #0]
   b9580:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b9582:	4649      	mov	r1, r9
   b9584:	e7ca      	b.n	b951c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b9586:	9800      	ldr	r0, [sp, #0]
   b9588:	f7fd fca6 	bl	b6ed8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b958c:	4638      	mov	r0, r7
   b958e:	b015      	add	sp, #84	; 0x54
   b9590:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b9594 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b9594:	4b02      	ldr	r3, [pc, #8]	; (b95a0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b9596:	4a03      	ldr	r2, [pc, #12]	; (b95a4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b9598:	601a      	str	r2, [r3, #0]
   b959a:	2200      	movs	r2, #0
   b959c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b959e:	4770      	bx	lr
   b95a0:	2003e6d4 	.word	0x2003e6d4
   b95a4:	000bd768 	.word	0x000bd768

000b95a8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b95a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b95aa:	4606      	mov	r6, r0
   b95ac:	460d      	mov	r5, r1
  size_t n = 0;
   b95ae:	188f      	adds	r7, r1, r2
   b95b0:	2400      	movs	r4, #0
  while (size--) {
   b95b2:	42bd      	cmp	r5, r7
   b95b4:	d00c      	beq.n	b95d0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b95b6:	6833      	ldr	r3, [r6, #0]
   b95b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b95bc:	689b      	ldr	r3, [r3, #8]
   b95be:	4630      	mov	r0, r6
   b95c0:	4798      	blx	r3
     if (chunk>=0)
   b95c2:	1e03      	subs	r3, r0, #0
   b95c4:	db01      	blt.n	b95ca <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b95c6:	441c      	add	r4, r3
  while (size--) {
   b95c8:	e7f3      	b.n	b95b2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b95ca:	2c00      	cmp	r4, #0
   b95cc:	bf08      	it	eq
   b95ce:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b95d0:	4620      	mov	r0, r4
   b95d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b95d4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b95d4:	b513      	push	{r0, r1, r4, lr}
   b95d6:	4604      	mov	r4, r0
    }
   b95d8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b95da:	b159      	cbz	r1, b95f4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b95dc:	9101      	str	r1, [sp, #4]
   b95de:	f7fb fa0d 	bl	b49fc <strlen>
   b95e2:	6823      	ldr	r3, [r4, #0]
   b95e4:	9901      	ldr	r1, [sp, #4]
   b95e6:	68db      	ldr	r3, [r3, #12]
   b95e8:	4602      	mov	r2, r0
   b95ea:	4620      	mov	r0, r4
    }
   b95ec:	b002      	add	sp, #8
   b95ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b95f2:	4718      	bx	r3
    }
   b95f4:	b002      	add	sp, #8
   b95f6:	bd10      	pop	{r4, pc}

000b95f8 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b95f8:	b508      	push	{r3, lr}
  return write(str);
   b95fa:	f7ff ffeb 	bl	b95d4 <_ZN5Print5writeEPKc>
}
   b95fe:	bd08      	pop	{r3, pc}

000b9600 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b9600:	6803      	ldr	r3, [r0, #0]
   b9602:	689b      	ldr	r3, [r3, #8]
   b9604:	4718      	bx	r3

000b9606 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b9606:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b9608:	210d      	movs	r1, #13
{
   b960a:	4605      	mov	r5, r0
  size_t n = print('\r');
   b960c:	f7ff fff8 	bl	b9600 <_ZN5Print5printEc>
  n += print('\n');
   b9610:	210a      	movs	r1, #10
  size_t n = print('\r');
   b9612:	4604      	mov	r4, r0
  n += print('\n');
   b9614:	4628      	mov	r0, r5
   b9616:	f7ff fff3 	bl	b9600 <_ZN5Print5printEc>
  return n;
}
   b961a:	4420      	add	r0, r4
   b961c:	bd38      	pop	{r3, r4, r5, pc}

000b961e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b961e:	b538      	push	{r3, r4, r5, lr}
   b9620:	4605      	mov	r5, r0
  return write(str);
   b9622:	f7ff ffd7 	bl	b95d4 <_ZN5Print5writeEPKc>
   b9626:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b9628:	4628      	mov	r0, r5
   b962a:	f7ff ffec 	bl	b9606 <_ZN5Print7printlnEv>
  return n;
}
   b962e:	4420      	add	r0, r4
   b9630:	bd38      	pop	{r3, r4, r5, pc}

000b9632 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b9632:	b530      	push	{r4, r5, lr}
   b9634:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b9636:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b9638:	2a01      	cmp	r2, #1
  *str = '\0';
   b963a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b963e:	bf98      	it	ls
   b9640:	220a      	movls	r2, #10
   b9642:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b9644:	460d      	mov	r5, r1
   b9646:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b964a:	fb01 5312 	mls	r3, r1, r2, r5
   b964e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b9652:	2b09      	cmp	r3, #9
   b9654:	bf94      	ite	ls
   b9656:	3330      	addls	r3, #48	; 0x30
   b9658:	3337      	addhi	r3, #55	; 0x37
   b965a:	b2db      	uxtb	r3, r3
  } while(n);
   b965c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b965e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b9662:	d9ef      	bls.n	b9644 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b9664:	4621      	mov	r1, r4
   b9666:	f7ff ffb5 	bl	b95d4 <_ZN5Print5writeEPKc>
}
   b966a:	b00b      	add	sp, #44	; 0x2c
   b966c:	bd30      	pop	{r4, r5, pc}

000b966e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b966e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9672:	b086      	sub	sp, #24
   b9674:	af00      	add	r7, sp, #0
   b9676:	4605      	mov	r5, r0
   b9678:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b967a:	1d38      	adds	r0, r7, #4
   b967c:	2114      	movs	r1, #20
{
   b967e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b9680:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b9682:	f7fd fe15 	bl	b72b0 <vsnprintf>

    if (n<bufsize)
   b9686:	2813      	cmp	r0, #19
   b9688:	d80e      	bhi.n	b96a8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b968a:	1d39      	adds	r1, r7, #4
   b968c:	4628      	mov	r0, r5
   b968e:	f7ff ffa1 	bl	b95d4 <_ZN5Print5writeEPKc>
   b9692:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b9694:	b11e      	cbz	r6, b969e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b9696:	4628      	mov	r0, r5
   b9698:	f7ff ffb5 	bl	b9606 <_ZN5Print7printlnEv>
   b969c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b969e:	4620      	mov	r0, r4
   b96a0:	3718      	adds	r7, #24
   b96a2:	46bd      	mov	sp, r7
   b96a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b96a8:	f100 0308 	add.w	r3, r0, #8
   b96ac:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b96b0:	46e8      	mov	r8, sp
        char bigger[n+1];
   b96b2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b96b6:	4622      	mov	r2, r4
   b96b8:	1c41      	adds	r1, r0, #1
   b96ba:	683b      	ldr	r3, [r7, #0]
   b96bc:	4668      	mov	r0, sp
   b96be:	f7fd fdf7 	bl	b72b0 <vsnprintf>
  return write(str);
   b96c2:	4669      	mov	r1, sp
   b96c4:	4628      	mov	r0, r5
   b96c6:	f7ff ff85 	bl	b95d4 <_ZN5Print5writeEPKc>
   b96ca:	4604      	mov	r4, r0
   b96cc:	46c5      	mov	sp, r8
   b96ce:	e7e1      	b.n	b9694 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b96d0 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b96d0:	4b01      	ldr	r3, [pc, #4]	; (b96d8 <_GLOBAL__sub_I_RGB+0x8>)
   b96d2:	2200      	movs	r2, #0
   b96d4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b96d6:	4770      	bx	lr
   b96d8:	2003e6dc 	.word	0x2003e6dc

000b96dc <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b96dc:	2100      	movs	r1, #0
   b96de:	f7fd bc73 	b.w	b6fc8 <hal_spi_release>

000b96e2 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b96e2:	2100      	movs	r1, #0
   b96e4:	f7fd bc68 	b.w	b6fb8 <hal_spi_acquire>

000b96e8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b96e8:	b510      	push	{r4, lr}
   b96ea:	4604      	mov	r4, r0
   b96ec:	4608      	mov	r0, r1
{
    _spi = spi;
   b96ee:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b96f0:	f7fd fc42 	bl	b6f78 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b96f4:	2300      	movs	r3, #0
   b96f6:	6063      	str	r3, [r4, #4]
}
   b96f8:	4620      	mov	r0, r4
   b96fa:	bd10      	pop	{r4, pc}

000b96fc <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b96fc:	b513      	push	{r0, r1, r4, lr}
   b96fe:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b9700:	7800      	ldrb	r0, [r0, #0]
   b9702:	f7ff ffee 	bl	b96e2 <_ZN8SPIClass4lockEv.isra.0>
   b9706:	b958      	cbnz	r0, b9720 <_ZN8SPIClass5beginEv+0x24>
   b9708:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b970a:	9001      	str	r0, [sp, #4]
   b970c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9710:	f7fd fc22 	bl	b6f58 <hal_spi_begin>
        unlock();
   b9714:	9801      	ldr	r0, [sp, #4]
    }
}
   b9716:	b002      	add	sp, #8
   b9718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b971c:	f7ff bfde 	b.w	b96dc <_ZN8SPIClass6unlockEv.isra.0>
   b9720:	b002      	add	sp, #8
   b9722:	bd10      	pop	{r4, pc}

000b9724 <_ZN8SPIClass5beginEt>:

void SPIClass::begin(uint16_t ss_pin)
{
   b9724:	b513      	push	{r0, r1, r4, lr}
   b9726:	4604      	mov	r4, r0
    if (!lock())
   b9728:	7800      	ldrb	r0, [r0, #0]
{
   b972a:	9101      	str	r1, [sp, #4]
    if (!lock())
   b972c:	f7ff ffd9 	bl	b96e2 <_ZN8SPIClass4lockEv.isra.0>
   b9730:	9901      	ldr	r1, [sp, #4]
   b9732:	b948      	cbnz	r0, b9748 <_ZN8SPIClass5beginEt+0x24>
   b9734:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, ss_pin);
   b9736:	9001      	str	r0, [sp, #4]
   b9738:	f7fd fc0e 	bl	b6f58 <hal_spi_begin>
        unlock();
   b973c:	9801      	ldr	r0, [sp, #4]
    }
}
   b973e:	b002      	add	sp, #8
   b9740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b9744:	f7ff bfca 	b.w	b96dc <_ZN8SPIClass6unlockEv.isra.0>
   b9748:	b002      	add	sp, #8
   b974a:	bd10      	pop	{r4, pc}

000b974c <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b974c:	7800      	ldrb	r0, [r0, #0]
   b974e:	f7ff bfc5 	b.w	b96dc <_ZN8SPIClass6unlockEv.isra.0>
	...

000b9754 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b9754:	0840      	lsrs	r0, r0, #1
{
   b9756:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b9758:	6018      	str	r0, [r3, #0]
   b975a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b975c:	6818      	ldr	r0, [r3, #0]
   b975e:	4288      	cmp	r0, r1
   b9760:	b2e5      	uxtb	r5, r4
   b9762:	d906      	bls.n	b9772 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b9764:	3401      	adds	r4, #1
   b9766:	2c08      	cmp	r4, #8
   b9768:	d002      	beq.n	b9770 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b976a:	0840      	lsrs	r0, r0, #1
   b976c:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b976e:	e7f5      	b.n	b975c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b9770:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b9772:	4b02      	ldr	r3, [pc, #8]	; (b977c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b9774:	5d5b      	ldrb	r3, [r3, r5]
   b9776:	7013      	strb	r3, [r2, #0]
}
   b9778:	bd30      	pop	{r4, r5, pc}
   b977a:	bf00      	nop
   b977c:	000bd79c 	.word	0x000bd79c

000b9780 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b9780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9784:	4606      	mov	r6, r0
   b9786:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b9788:	7800      	ldrb	r0, [r0, #0]
{
   b978a:	460c      	mov	r4, r1
    CHECK(lock());
   b978c:	f7ff ffa9 	bl	b96e2 <_ZN8SPIClass4lockEv.isra.0>
   b9790:	2800      	cmp	r0, #0
   b9792:	db1b      	blt.n	b97cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b9794:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b9796:	2214      	movs	r2, #20
   b9798:	2100      	movs	r1, #0
   b979a:	a809      	add	r0, sp, #36	; 0x24
   b979c:	f001 f866 	bl	ba86c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b97a0:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b97a2:	2200      	movs	r2, #0
   b97a4:	a909      	add	r1, sp, #36	; 0x24
   b97a6:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b97a8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b97ac:	f7fd fbf4 	bl	b6f98 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b97b0:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b97b4:	b113      	cbz	r3, b97bc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b97b6:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b97ba:	b155      	cbz	r5, b97d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b97bc:	2700      	movs	r7, #0
   b97be:	46b9      	mov	r9, r7
   b97c0:	46b8      	mov	r8, r7
   b97c2:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b97c4:	7923      	ldrb	r3, [r4, #4]
   b97c6:	b15d      	cbz	r5, b97e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b97c8:	b1c3      	cbz	r3, b97fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b97ca:	2000      	movs	r0, #0
}
   b97cc:	b00f      	add	sp, #60	; 0x3c
   b97ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b97d2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b97d6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b97da:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b97de:	e7f1      	b.n	b97c4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b97e0:	2b00      	cmp	r3, #0
   b97e2:	d135      	bne.n	b9850 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b97e4:	68a3      	ldr	r3, [r4, #8]
   b97e6:	4543      	cmp	r3, r8
   b97e8:	d108      	bne.n	b97fc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b97ea:	f88d 9020 	strb.w	r9, [sp, #32]
   b97ee:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b97f2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b97f6:	89a3      	ldrh	r3, [r4, #12]
   b97f8:	429a      	cmp	r2, r3
   b97fa:	d0e6      	beq.n	b97ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b97fc:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b97fe:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b9800:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b9804:	980a      	ldr	r0, [sp, #40]	; 0x28
   b9806:	ab04      	add	r3, sp, #16
   b9808:	f10d 020f 	add.w	r2, sp, #15
   b980c:	f7ff ffa2 	bl	b9754 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b9810:	7921      	ldrb	r1, [r4, #4]
   b9812:	b985      	cbnz	r5, b9836 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b9814:	b989      	cbnz	r1, b983a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b9816:	68a3      	ldr	r3, [r4, #8]
   b9818:	4543      	cmp	r3, r8
   b981a:	d30e      	bcc.n	b983a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b981c:	f88d 9020 	strb.w	r9, [sp, #32]
   b9820:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b9824:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b9828:	89a3      	ldrh	r3, [r4, #12]
   b982a:	429a      	cmp	r2, r3
   b982c:	d105      	bne.n	b983a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b982e:	9b04      	ldr	r3, [sp, #16]
   b9830:	4543      	cmp	r3, r8
   b9832:	d102      	bne.n	b983a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b9834:	e7c9      	b.n	b97ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b9836:	2900      	cmp	r1, #0
   b9838:	d1f9      	bne.n	b982e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b983a:	2300      	movs	r3, #0
   b983c:	9301      	str	r3, [sp, #4]
   b983e:	7b63      	ldrb	r3, [r4, #13]
   b9840:	9300      	str	r3, [sp, #0]
   b9842:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b9846:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b9848:	7830      	ldrb	r0, [r6, #0]
   b984a:	f7fd fbad 	bl	b6fa8 <hal_spi_set_settings>
   b984e:	e7bc      	b.n	b97ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b9850:	e9cd 5500 	strd	r5, r5, [sp]
   b9854:	462b      	mov	r3, r5
   b9856:	462a      	mov	r2, r5
   b9858:	2101      	movs	r1, #1
   b985a:	e7f5      	b.n	b9848 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b985c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b985c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b985e:	7800      	ldrb	r0, [r0, #0]
   b9860:	f7fd fb82 	bl	b6f68 <hal_spi_transfer>
}
   b9864:	b2c0      	uxtb	r0, r0
   b9866:	bd08      	pop	{r3, pc}

000b9868 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9868:	b510      	push	{r4, lr}
   b986a:	4604      	mov	r4, r0
{
	free(buffer);
   b986c:	6800      	ldr	r0, [r0, #0]
   b986e:	f7fd fd0f 	bl	b7290 <free>
}
   b9872:	4620      	mov	r0, r4
   b9874:	bd10      	pop	{r4, pc}

000b9876 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b9876:	b510      	push	{r4, lr}
   b9878:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b987a:	6800      	ldr	r0, [r0, #0]
   b987c:	b108      	cbz	r0, b9882 <_ZN6String10invalidateEv+0xc>
   b987e:	f7fd fd07 	bl	b7290 <free>
	buffer = NULL;
   b9882:	2300      	movs	r3, #0
	capacity = len = 0;
   b9884:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9888:	6023      	str	r3, [r4, #0]
}
   b988a:	bd10      	pop	{r4, pc}

000b988c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b988c:	b538      	push	{r3, r4, r5, lr}
   b988e:	4604      	mov	r4, r0
   b9890:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b9892:	6800      	ldr	r0, [r0, #0]
   b9894:	3101      	adds	r1, #1
   b9896:	f7fd fd03 	bl	b72a0 <realloc>
	if (newbuffer) {
   b989a:	b110      	cbz	r0, b98a2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b989c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b98a0:	2001      	movs	r0, #1
	}
	return 0;
}
   b98a2:	bd38      	pop	{r3, r4, r5, pc}

000b98a4 <_ZN6String7reserveEj>:
{
   b98a4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b98a6:	6803      	ldr	r3, [r0, #0]
{
   b98a8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b98aa:	b123      	cbz	r3, b98b6 <_ZN6String7reserveEj+0x12>
   b98ac:	6843      	ldr	r3, [r0, #4]
   b98ae:	428b      	cmp	r3, r1
   b98b0:	d301      	bcc.n	b98b6 <_ZN6String7reserveEj+0x12>
   b98b2:	2001      	movs	r0, #1
}
   b98b4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b98b6:	4620      	mov	r0, r4
   b98b8:	f7ff ffe8 	bl	b988c <_ZN6String12changeBufferEj>
   b98bc:	2800      	cmp	r0, #0
   b98be:	d0f9      	beq.n	b98b4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b98c0:	68a3      	ldr	r3, [r4, #8]
   b98c2:	2b00      	cmp	r3, #0
   b98c4:	d1f5      	bne.n	b98b2 <_ZN6String7reserveEj+0xe>
   b98c6:	6822      	ldr	r2, [r4, #0]
   b98c8:	7013      	strb	r3, [r2, #0]
   b98ca:	e7f2      	b.n	b98b2 <_ZN6String7reserveEj+0xe>

000b98cc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b98cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b98ce:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b98d0:	4611      	mov	r1, r2
   b98d2:	9201      	str	r2, [sp, #4]
{
   b98d4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b98d6:	f7ff ffe5 	bl	b98a4 <_ZN6String7reserveEj>
   b98da:	9a01      	ldr	r2, [sp, #4]
   b98dc:	b928      	cbnz	r0, b98ea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b98de:	4620      	mov	r0, r4
   b98e0:	f7ff ffc9 	bl	b9876 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b98e4:	4620      	mov	r0, r4
   b98e6:	b003      	add	sp, #12
   b98e8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b98ea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b98ec:	4629      	mov	r1, r5
   b98ee:	6820      	ldr	r0, [r4, #0]
   b98f0:	f000 ff94 	bl	ba81c <memcpy>
	buffer[len] = 0;
   b98f4:	6822      	ldr	r2, [r4, #0]
   b98f6:	68a3      	ldr	r3, [r4, #8]
   b98f8:	2100      	movs	r1, #0
   b98fa:	54d1      	strb	r1, [r2, r3]
	return *this;
   b98fc:	e7f2      	b.n	b98e4 <_ZN6String4copyEPKcj+0x18>

000b98fe <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b98fe:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b9900:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b9902:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b9906:	4604      	mov	r4, r0
	len = 0;
   b9908:	6083      	str	r3, [r0, #8]
	flags = 0;
   b990a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b990c:	b141      	cbz	r1, b9920 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b990e:	4608      	mov	r0, r1
   b9910:	9101      	str	r1, [sp, #4]
   b9912:	f7fb f873 	bl	b49fc <strlen>
   b9916:	9901      	ldr	r1, [sp, #4]
   b9918:	4602      	mov	r2, r0
   b991a:	4620      	mov	r0, r4
   b991c:	f7ff ffd6 	bl	b98cc <_ZN6String4copyEPKcj>
}
   b9920:	4620      	mov	r0, r4
   b9922:	b002      	add	sp, #8
   b9924:	bd10      	pop	{r4, pc}

000b9926 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b9926:	b538      	push	{r3, r4, r5, lr}
   b9928:	4605      	mov	r5, r0
	if (buffer) {
   b992a:	6800      	ldr	r0, [r0, #0]
{
   b992c:	460c      	mov	r4, r1
	if (buffer) {
   b992e:	b168      	cbz	r0, b994c <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b9930:	686a      	ldr	r2, [r5, #4]
   b9932:	688b      	ldr	r3, [r1, #8]
   b9934:	429a      	cmp	r2, r3
   b9936:	d307      	bcc.n	b9948 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b9938:	6809      	ldr	r1, [r1, #0]
   b993a:	f000 ffe4 	bl	ba906 <strcpy>
			len = rhs.len;
   b993e:	68a3      	ldr	r3, [r4, #8]
   b9940:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b9942:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b9944:	60a3      	str	r3, [r4, #8]
}
   b9946:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b9948:	f7fd fca2 	bl	b7290 <free>
	buffer = rhs.buffer;
   b994c:	6823      	ldr	r3, [r4, #0]
   b994e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b9950:	6863      	ldr	r3, [r4, #4]
   b9952:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b9954:	68a3      	ldr	r3, [r4, #8]
   b9956:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b9958:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b995a:	e9c4 3300 	strd	r3, r3, [r4]
   b995e:	e7f1      	b.n	b9944 <_ZN6String4moveERS_+0x1e>

000b9960 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b9960:	b510      	push	{r4, lr}
	buffer = NULL;
   b9962:	2300      	movs	r3, #0
	capacity = 0;
   b9964:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b9968:	4604      	mov	r4, r0
	len = 0;
   b996a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b996c:	7303      	strb	r3, [r0, #12]
	move(rval);
   b996e:	f7ff ffda 	bl	b9926 <_ZN6String4moveERS_>
}
   b9972:	4620      	mov	r0, r4
   b9974:	bd10      	pop	{r4, pc}

000b9976 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b9976:	4288      	cmp	r0, r1
{
   b9978:	b510      	push	{r4, lr}
   b997a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b997c:	d005      	beq.n	b998a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b997e:	680b      	ldr	r3, [r1, #0]
   b9980:	b12b      	cbz	r3, b998e <_ZN6StringaSERKS_+0x18>
   b9982:	688a      	ldr	r2, [r1, #8]
   b9984:	4619      	mov	r1, r3
   b9986:	f7ff ffa1 	bl	b98cc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b998a:	4620      	mov	r0, r4
   b998c:	bd10      	pop	{r4, pc}
	else invalidate();
   b998e:	f7ff ff72 	bl	b9876 <_ZN6String10invalidateEv>
   b9992:	e7fa      	b.n	b998a <_ZN6StringaSERKS_+0x14>

000b9994 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9994:	b510      	push	{r4, lr}
	buffer = NULL;
   b9996:	2300      	movs	r3, #0
String::String(const String &value)
   b9998:	4604      	mov	r4, r0
	capacity = 0;
   b999a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b999e:	6083      	str	r3, [r0, #8]
	flags = 0;
   b99a0:	7303      	strb	r3, [r0, #12]
	*this = value;
   b99a2:	f7ff ffe8 	bl	b9976 <_ZN6StringaSERKS_>
}
   b99a6:	4620      	mov	r0, r4
   b99a8:	bd10      	pop	{r4, pc}

000b99aa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b99aa:	b513      	push	{r0, r1, r4, lr}
   b99ac:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b99ae:	b159      	cbz	r1, b99c8 <_ZN6StringaSEPKc+0x1e>
   b99b0:	4608      	mov	r0, r1
   b99b2:	9101      	str	r1, [sp, #4]
   b99b4:	f7fb f822 	bl	b49fc <strlen>
   b99b8:	9901      	ldr	r1, [sp, #4]
   b99ba:	4602      	mov	r2, r0
   b99bc:	4620      	mov	r0, r4
   b99be:	f7ff ff85 	bl	b98cc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b99c2:	4620      	mov	r0, r4
   b99c4:	b002      	add	sp, #8
   b99c6:	bd10      	pop	{r4, pc}
	else invalidate();
   b99c8:	f7ff ff55 	bl	b9876 <_ZN6String10invalidateEv>
   b99cc:	e7f9      	b.n	b99c2 <_ZN6StringaSEPKc+0x18>

000b99ce <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b99ce:	6802      	ldr	r2, [r0, #0]
{
   b99d0:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b99d2:	6809      	ldr	r1, [r1, #0]
   b99d4:	b162      	cbz	r2, b99f0 <_ZNK6String9compareToERKS_+0x22>
   b99d6:	b941      	cbnz	r1, b99ea <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b99d8:	6880      	ldr	r0, [r0, #8]
   b99da:	b160      	cbz	r0, b99f6 <_ZNK6String9compareToERKS_+0x28>
   b99dc:	7810      	ldrb	r0, [r2, #0]
   b99de:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b99e0:	6898      	ldr	r0, [r3, #8]
   b99e2:	b140      	cbz	r0, b99f6 <_ZNK6String9compareToERKS_+0x28>
   b99e4:	7809      	ldrb	r1, [r1, #0]
   b99e6:	4248      	negs	r0, r1
   b99e8:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b99ea:	4610      	mov	r0, r2
   b99ec:	f7fa bffc 	b.w	b49e8 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b99f0:	2900      	cmp	r1, #0
   b99f2:	d1f5      	bne.n	b99e0 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b99f4:	4608      	mov	r0, r1
}
   b99f6:	4770      	bx	lr

000b99f8 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   b99f8:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   b99fa:	6800      	ldr	r0, [r0, #0]
   b99fc:	b140      	cbz	r0, b9a10 <_ZNK6String7toFloatEv+0x18>
   b99fe:	f000 fef1 	bl	ba7e4 <atof>
   b9a02:	ec51 0b10 	vmov	r0, r1, d0
   b9a06:	f7fa ff81 	bl	b490c <__aeabi_d2f>
   b9a0a:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   b9a0e:	bd08      	pop	{r3, pc}
	return 0;
   b9a10:	ed9f 0a01 	vldr	s0, [pc, #4]	; b9a18 <_ZNK6String7toFloatEv+0x20>
   b9a14:	e7fb      	b.n	b9a0e <_ZNK6String7toFloatEv+0x16>
   b9a16:	bf00      	nop
   b9a18:	00000000 	.word	0x00000000

000b9a1c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b9a1c:	4b05      	ldr	r3, [pc, #20]	; (b9a34 <_GLOBAL__sub_I_System+0x18>)
   b9a1e:	2202      	movs	r2, #2
   b9a20:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b9a22:	4b05      	ldr	r3, [pc, #20]	; (b9a38 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b9a24:	4a05      	ldr	r2, [pc, #20]	; (b9a3c <_GLOBAL__sub_I_System+0x20>)
   b9a26:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b9a28:	2000      	movs	r0, #0
   b9a2a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b9a2e:	f7fd bb8b 	b.w	b7148 <set_system_mode>
   b9a32:	bf00      	nop
   b9a34:	2003e6f8 	.word	0x2003e6f8
   b9a38:	2003e6ec 	.word	0x2003e6ec
   b9a3c:	ffff0000 	.word	0xffff0000

000b9a40 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b9a40:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9a42:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b9a44:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b9a48:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9a4a:	2201      	movs	r2, #1
   b9a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9a50:	f10d 0107 	add.w	r1, sp, #7
   b9a54:	47a0      	blx	r4
}
   b9a56:	b002      	add	sp, #8
   b9a58:	bd10      	pop	{r4, pc}

000b9a5a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b9a5a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9a5c:	6803      	ldr	r3, [r0, #0]
   b9a5e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b9a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b9a64:	46a4      	mov	ip, r4
}
   b9a66:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b9a6a:	4760      	bx	ip

000b9a6c <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9a6c:	b513      	push	{r0, r1, r4, lr}
   b9a6e:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b9a70:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b9a72:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b9a76:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b9a78:	f10d 0107 	add.w	r1, sp, #7
   b9a7c:	2201      	movs	r2, #1
   b9a7e:	47a0      	blx	r4
}
   b9a80:	b002      	add	sp, #8
   b9a82:	bd10      	pop	{r4, pc}

000b9a84 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b9a84:	b510      	push	{r4, lr}
      { return _M_ptr; }
   b9a86:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9a88:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9a8c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9a90:	429a      	cmp	r2, r3
int TCPClient::read() {
   b9a92:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9a94:	d008      	beq.n	b9aa8 <_ZN9TCPClient4readEv+0x24>
   b9a96:	6963      	ldr	r3, [r4, #20]
   b9a98:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9a9c:	1c51      	adds	r1, r2, #1
   b9a9e:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b9aa2:	4413      	add	r3, r2
   b9aa4:	7918      	ldrb	r0, [r3, #4]
}
   b9aa6:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b9aa8:	6803      	ldr	r3, [r0, #0]
   b9aaa:	691b      	ldr	r3, [r3, #16]
   b9aac:	4798      	blx	r3
   b9aae:	2800      	cmp	r0, #0
   b9ab0:	d1f1      	bne.n	b9a96 <_ZN9TCPClient4readEv+0x12>
   b9ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9ab6:	e7f6      	b.n	b9aa6 <_ZN9TCPClient4readEv+0x22>

000b9ab8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b9ab8:	4770      	bx	lr

000b9aba <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b9aba:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b9abc:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b9abe:	43c0      	mvns	r0, r0
   b9ac0:	0fc0      	lsrs	r0, r0, #31
   b9ac2:	4770      	bx	lr

000b9ac4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9ac4:	4770      	bx	lr
	...

000b9ac8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9ac8:	4b06      	ldr	r3, [pc, #24]	; (b9ae4 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9aca:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9acc:	b510      	push	{r4, lr}
   b9ace:	f100 040c 	add.w	r4, r0, #12
	    ||
   b9ad2:	d005      	beq.n	b9ae0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9ad4:	4608      	mov	r0, r1
   b9ad6:	f000 fd6d 	bl	ba5b4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9ada:	2800      	cmp	r0, #0
   b9adc:	bf08      	it	eq
   b9ade:	2400      	moveq	r4, #0
      }
   b9ae0:	4620      	mov	r0, r4
   b9ae2:	bd10      	pop	{r4, pc}
   b9ae4:	000bd5f0 	.word	0x000bd5f0

000b9ae8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9ae8:	b510      	push	{r4, lr}
   b9aea:	21ac      	movs	r1, #172	; 0xac
   b9aec:	4604      	mov	r4, r0
   b9aee:	f7fa ffe6 	bl	b4abe <_ZdlPvj>
   b9af2:	4620      	mov	r0, r4
   b9af4:	bd10      	pop	{r4, pc}

000b9af6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b9af6:	21ac      	movs	r1, #172	; 0xac
   b9af8:	f7fa bfe1 	b.w	b4abe <_ZdlPvj>

000b9afc <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b9afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b9b00:	f04f 0800 	mov.w	r8, #0
   b9b04:	b086      	sub	sp, #24
   b9b06:	461c      	mov	r4, r3
   b9b08:	f8c0 8004 	str.w	r8, [r0, #4]
   b9b0c:	4605      	mov	r5, r0
   b9b0e:	460e      	mov	r6, r1
   b9b10:	4617      	mov	r7, r2
    struct timeval tv = {};
   b9b12:	4641      	mov	r1, r8
   b9b14:	2210      	movs	r2, #16
   b9b16:	a802      	add	r0, sp, #8
   b9b18:	f000 fea8 	bl	ba86c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b9b1c:	1c63      	adds	r3, r4, #1
   b9b1e:	d009      	beq.n	b9b34 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b9b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b9b24:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b9b28:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b9b2c:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b9b30:	435c      	muls	r4, r3
   b9b32:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b9b34:	6968      	ldr	r0, [r5, #20]
   b9b36:	2310      	movs	r3, #16
   b9b38:	9300      	str	r3, [sp, #0]
   b9b3a:	6800      	ldr	r0, [r0, #0]
   b9b3c:	ab02      	add	r3, sp, #8
   b9b3e:	f241 0205 	movw	r2, #4101	; 0x1005
   b9b42:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9b46:	f7fd f9d7 	bl	b6ef8 <sock_setsockopt>
    if (ret < 0) {
   b9b4a:	2800      	cmp	r0, #0
   b9b4c:	da07      	bge.n	b9b5e <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b9b4e:	f7fd fbc7 	bl	b72e0 <__errno>
   b9b52:	6803      	ldr	r3, [r0, #0]
   b9b54:	606b      	str	r3, [r5, #4]
        return 0;
   b9b56:	2000      	movs	r0, #0
}
   b9b58:	b006      	add	sp, #24
   b9b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b9b5e:	6968      	ldr	r0, [r5, #20]
   b9b60:	2300      	movs	r3, #0
   b9b62:	6800      	ldr	r0, [r0, #0]
   b9b64:	463a      	mov	r2, r7
   b9b66:	4631      	mov	r1, r6
   b9b68:	f7fd f9e6 	bl	b6f38 <sock_send>
    if (ret < 0) {
   b9b6c:	1e03      	subs	r3, r0, #0
   b9b6e:	dbee      	blt.n	b9b4e <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b9b70:	4618      	mov	r0, r3
   b9b72:	e7f1      	b.n	b9b58 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b9b74 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b9b74:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b9b76:	6984      	ldr	r4, [r0, #24]
   b9b78:	4b0a      	ldr	r3, [pc, #40]	; (b9ba4 <_ZN9TCPClientD1Ev+0x30>)
   b9b7a:	6003      	str	r3, [r0, #0]
   b9b7c:	4605      	mov	r5, r0
   b9b7e:	b17c      	cbz	r4, b9ba0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b9b80:	6863      	ldr	r3, [r4, #4]
   b9b82:	3b01      	subs	r3, #1
   b9b84:	6063      	str	r3, [r4, #4]
   b9b86:	b95b      	cbnz	r3, b9ba0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b9b88:	6823      	ldr	r3, [r4, #0]
   b9b8a:	4620      	mov	r0, r4
   b9b8c:	689b      	ldr	r3, [r3, #8]
   b9b8e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b9b90:	68a3      	ldr	r3, [r4, #8]
   b9b92:	3b01      	subs	r3, #1
   b9b94:	60a3      	str	r3, [r4, #8]
   b9b96:	b91b      	cbnz	r3, b9ba0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b9b98:	6823      	ldr	r3, [r4, #0]
   b9b9a:	4620      	mov	r0, r4
   b9b9c:	68db      	ldr	r3, [r3, #12]
   b9b9e:	4798      	blx	r3
   b9ba0:	4628      	mov	r0, r5
   b9ba2:	bd38      	pop	{r3, r4, r5, pc}
   b9ba4:	000bd7e0 	.word	0x000bd7e0

000b9ba8 <_ZN9TCPClientD0Ev>:
   b9ba8:	b510      	push	{r4, lr}
   b9baa:	4604      	mov	r4, r0
   b9bac:	f7ff ffe2 	bl	b9b74 <_ZN9TCPClientD1Ev>
   b9bb0:	4620      	mov	r0, r4
   b9bb2:	211c      	movs	r1, #28
   b9bb4:	f7fa ff83 	bl	b4abe <_ZdlPvj>
   b9bb8:	4620      	mov	r0, r4
   b9bba:	bd10      	pop	{r4, pc}

000b9bbc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b9bbc:	b530      	push	{r4, r5, lr}
   b9bbe:	b087      	sub	sp, #28
   b9bc0:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b9bc2:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b9bc4:	4668      	mov	r0, sp
   b9bc6:	f7fe fa9b 	bl	b8100 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b9bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9bcc:	3404      	adds	r4, #4
   b9bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9bd0:	682b      	ldr	r3, [r5, #0]
   b9bd2:	7023      	strb	r3, [r4, #0]
    }
   b9bd4:	b007      	add	sp, #28
   b9bd6:	bd30      	pop	{r4, r5, pc}

000b9bd8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b9bd8:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b9bda:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b9bdc:	4b05      	ldr	r3, [pc, #20]	; (b9bf4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b9bde:	4604      	mov	r4, r0
   b9be0:	358c      	adds	r5, #140	; 0x8c
   b9be2:	f844 3b04 	str.w	r3, [r4], #4
   b9be6:	4606      	mov	r6, r0
   b9be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9bec:	682b      	ldr	r3, [r5, #0]
   b9bee:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b9bf0:	4630      	mov	r0, r6
   b9bf2:	bd70      	pop	{r4, r5, r6, pc}
   b9bf4:	000bd664 	.word	0x000bd664

000b9bf8 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9bfc:	4698      	mov	r8, r3
    stop();
   b9bfe:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9c00:	b093      	sub	sp, #76	; 0x4c
   b9c02:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b9c04:	2400      	movs	r4, #0
    stop();
   b9c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b9c08:	4606      	mov	r6, r0
   b9c0a:	4617      	mov	r7, r2
    stop();
   b9c0c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9c0e:	4628      	mov	r0, r5
   b9c10:	466b      	mov	r3, sp
   b9c12:	4622      	mov	r2, r4
   b9c14:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b9c16:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9c18:	f7fd f966 	bl	b6ee8 <netdb_getaddrinfo>
   b9c1c:	4605      	mov	r5, r0
   b9c1e:	2800      	cmp	r0, #0
   b9c20:	d163      	bne.n	b9cea <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b9c22:	9b00      	ldr	r3, [sp, #0]
   b9c24:	2b00      	cmp	r3, #0
   b9c26:	d04b      	beq.n	b9cc0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9c28:	695b      	ldr	r3, [r3, #20]
   b9c2a:	2b00      	cmp	r3, #0
   b9c2c:	d048      	beq.n	b9cc0 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b9c2e:	a806      	add	r0, sp, #24
   b9c30:	f7fe fa22 	bl	b8078 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b9c34:	9b00      	ldr	r3, [sp, #0]
   b9c36:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b9c38:	7863      	ldrb	r3, [r4, #1]
   b9c3a:	2b02      	cmp	r3, #2
   b9c3c:	d104      	bne.n	b9c48 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b9c3e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b9c40:	a806      	add	r0, sp, #24
   b9c42:	f7ff ffbb 	bl	b9bbc <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b9c46:	e026      	b.n	b9c96 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b9c48:	2b0a      	cmp	r3, #10
   b9c4a:	d124      	bne.n	b9c96 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b9c4c:	2211      	movs	r2, #17
   b9c4e:	4629      	mov	r1, r5
   b9c50:	a801      	add	r0, sp, #4
   b9c52:	f000 fe0b 	bl	ba86c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9c56:	68a3      	ldr	r3, [r4, #8]
   b9c58:	2b00      	cmp	r3, #0
   b9c5a:	d038      	beq.n	b9cce <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b9c5c:	f104 0308 	add.w	r3, r4, #8
   b9c60:	f10d 0c04 	add.w	ip, sp, #4
   b9c64:	3418      	adds	r4, #24
   b9c66:	6818      	ldr	r0, [r3, #0]
   b9c68:	6859      	ldr	r1, [r3, #4]
   b9c6a:	4662      	mov	r2, ip
   b9c6c:	c203      	stmia	r2!, {r0, r1}
   b9c6e:	3308      	adds	r3, #8
   b9c70:	42a3      	cmp	r3, r4
   b9c72:	4694      	mov	ip, r2
   b9c74:	d1f7      	bne.n	b9c66 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b9c76:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b9c78:	a901      	add	r1, sp, #4
   b9c7a:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b9c7c:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b9c80:	f7fe fa08 	bl	b8094 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b9c84:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b9c88:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9c8c:	ac07      	add	r4, sp, #28
   b9c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9c90:	f8dc 3000 	ldr.w	r3, [ip]
   b9c94:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b9c96:	a806      	add	r0, sp, #24
   b9c98:	f7fe fa0e 	bl	b80b8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b9c9c:	b180      	cbz	r0, b9cc0 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b9c9e:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b9ca0:	ad07      	add	r5, sp, #28
   b9ca2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b9ca6:	4b12      	ldr	r3, [pc, #72]	; (b9cf0 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b9ca8:	930c      	str	r3, [sp, #48]	; 0x30
   b9caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b9cac:	ac0d      	add	r4, sp, #52	; 0x34
   b9cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9cb0:	682b      	ldr	r3, [r5, #0]
   b9cb2:	7023      	strb	r3, [r4, #0]
   b9cb4:	463a      	mov	r2, r7
   b9cb6:	4643      	mov	r3, r8
   b9cb8:	a90c      	add	r1, sp, #48	; 0x30
   b9cba:	4630      	mov	r0, r6
   b9cbc:	47c8      	blx	r9
   b9cbe:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b9cc0:	9800      	ldr	r0, [sp, #0]
   b9cc2:	f7fd f909 	bl	b6ed8 <netdb_freeaddrinfo>
}
   b9cc6:	4628      	mov	r0, r5
   b9cc8:	b013      	add	sp, #76	; 0x4c
   b9cca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b9cce:	68e3      	ldr	r3, [r4, #12]
   b9cd0:	2b00      	cmp	r3, #0
   b9cd2:	d1c3      	bne.n	b9c5c <_ZN9TCPClient7connectEPKctm+0x64>
   b9cd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9cd8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b9cdc:	f7fd f8ec 	bl	b6eb8 <inet_htonl>
   b9ce0:	4581      	cmp	r9, r0
   b9ce2:	d1bb      	bne.n	b9c5c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b9ce4:	f104 0114 	add.w	r1, r4, #20
   b9ce8:	e7aa      	b.n	b9c40 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b9cea:	4625      	mov	r5, r4
   b9cec:	e7e8      	b.n	b9cc0 <_ZN9TCPClient7connectEPKctm+0xc8>
   b9cee:	bf00      	nop
   b9cf0:	000bd664 	.word	0x000bd664

000b9cf4 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b9cf4:	b538      	push	{r3, r4, r5, lr}
   b9cf6:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b9cf8:	681a      	ldr	r2, [r3, #0]
   b9cfa:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b9cfc:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b9cfe:	da10      	bge.n	b9d22 <_ZN9TCPClient9connectedEv+0x2e>
   b9d00:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9d04:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9d08:	429a      	cmp	r2, r3
   b9d0a:	d10a      	bne.n	b9d22 <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b9d0c:	6803      	ldr	r3, [r0, #0]
   b9d0e:	691b      	ldr	r3, [r3, #16]
   b9d10:	4798      	blx	r3
        if (!rv) {
   b9d12:	4604      	mov	r4, r0
   b9d14:	b928      	cbnz	r0, b9d22 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b9d16:	682b      	ldr	r3, [r5, #0]
   b9d18:	4628      	mov	r0, r5
   b9d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b9d1c:	4798      	blx	r3
        rv = available();
   b9d1e:	4620      	mov	r0, r4
}
   b9d20:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b9d22:	2001      	movs	r0, #1
   b9d24:	e7fc      	b.n	b9d20 <_ZN9TCPClient9connectedEv+0x2c>

000b9d26 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b9d26:	b510      	push	{r4, lr}
   b9d28:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9d2a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9d2e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9d32:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b9d34:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9d36:	d005      	beq.n	b9d44 <_ZN9TCPClient4peekEv+0x1e>
   b9d38:	6963      	ldr	r3, [r4, #20]
   b9d3a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b9d3e:	4413      	add	r3, r2
   b9d40:	7918      	ldrb	r0, [r3, #4]
}
   b9d42:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b9d44:	6803      	ldr	r3, [r0, #0]
   b9d46:	691b      	ldr	r3, [r3, #16]
   b9d48:	4798      	blx	r3
   b9d4a:	2800      	cmp	r0, #0
   b9d4c:	d1f4      	bne.n	b9d38 <_ZN9TCPClient4peekEv+0x12>
   b9d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b9d52:	e7f6      	b.n	b9d42 <_ZN9TCPClient4peekEv+0x1c>

000b9d54 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9d56:	6943      	ldr	r3, [r0, #20]
   b9d58:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b9d5a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9d5e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b9d62:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b9d64:	4605      	mov	r5, r0
   b9d66:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b9d68:	d016      	beq.n	b9d98 <_ZN9TCPClient4readEPhj+0x44>
   b9d6a:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b9d6c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b9d70:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b9d74:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b9d76:	42bc      	cmp	r4, r7
   b9d78:	bf28      	it	cs
   b9d7a:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b9d7c:	3304      	adds	r3, #4
   b9d7e:	4622      	mov	r2, r4
   b9d80:	4419      	add	r1, r3
   b9d82:	4630      	mov	r0, r6
   b9d84:	f000 fd4a 	bl	ba81c <memcpy>
   b9d88:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b9d8a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b9d8e:	4423      	add	r3, r4
   b9d90:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b9d94:	4620      	mov	r0, r4
   b9d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b9d98:	6803      	ldr	r3, [r0, #0]
   b9d9a:	691b      	ldr	r3, [r3, #16]
   b9d9c:	4798      	blx	r3
   b9d9e:	2800      	cmp	r0, #0
   b9da0:	d1e3      	bne.n	b9d6a <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b9da2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b9da6:	e7f5      	b.n	b9d94 <_ZN9TCPClient4readEPhj+0x40>

000b9da8 <_ZN9TCPClient12flush_bufferEv>:
   b9da8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b9daa:	2300      	movs	r3, #0
   b9dac:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b9db0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b9db2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b9db6:	4770      	bx	lr

000b9db8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b9dbc:	461f      	mov	r7, r3
    stop();
   b9dbe:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9dc0:	460c      	mov	r4, r1
    stop();
   b9dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b9dc4:	b08a      	sub	sp, #40	; 0x28
   b9dc6:	4605      	mov	r5, r0
   b9dc8:	4616      	mov	r6, r2
    stop();
   b9dca:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b9dcc:	7d23      	ldrb	r3, [r4, #20]
   b9dce:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b9dd2:	2b04      	cmp	r3, #4
   b9dd4:	bf0c      	ite	eq
   b9dd6:	2002      	moveq	r0, #2
   b9dd8:	200a      	movne	r0, #10
   b9dda:	2206      	movs	r2, #6
   b9ddc:	2101      	movs	r1, #1
   b9dde:	f7fd f8b3 	bl	b6f48 <sock_socket>
   b9de2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b9de6:	696b      	ldr	r3, [r5, #20]
   b9de8:	681b      	ldr	r3, [r3, #0]
   b9dea:	2b00      	cmp	r3, #0
   b9dec:	da08      	bge.n	b9e00 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b9dee:	682b      	ldr	r3, [r5, #0]
   b9df0:	4628      	mov	r0, r5
   b9df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9df4:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b9df6:	4798      	blx	r3
}
   b9df8:	4620      	mov	r0, r4
   b9dfa:	b00a      	add	sp, #40	; 0x28
   b9dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b9e00:	4628      	mov	r0, r5
   b9e02:	f7ff ffd1 	bl	b9da8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b9e06:	b1b7      	cbz	r7, b9e36 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b9e08:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9e0a:	a903      	add	r1, sp, #12
   b9e0c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b9e0e:	9303      	str	r3, [sp, #12]
   b9e10:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b9e14:	f7fd f840 	bl	b6e98 <if_index_to_name>
   b9e18:	2800      	cmp	r0, #0
   b9e1a:	d1e8      	bne.n	b9dee <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b9e1c:	6968      	ldr	r0, [r5, #20]
   b9e1e:	2306      	movs	r3, #6
   b9e20:	9300      	str	r3, [sp, #0]
   b9e22:	6800      	ldr	r0, [r0, #0]
   b9e24:	ab03      	add	r3, sp, #12
   b9e26:	f241 020b 	movw	r2, #4107	; 0x100b
   b9e2a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b9e2e:	f7fd f863 	bl	b6ef8 <sock_setsockopt>
   b9e32:	2800      	cmp	r0, #0
   b9e34:	d1db      	bne.n	b9dee <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b9e36:	221c      	movs	r2, #28
   b9e38:	2100      	movs	r1, #0
   b9e3a:	a803      	add	r0, sp, #12
   b9e3c:	f000 fd16 	bl	ba86c <memset>
    if (ip.version() == 4) {
   b9e40:	7d23      	ldrb	r3, [r4, #20]
   b9e42:	2b04      	cmp	r3, #4
   b9e44:	d11d      	bne.n	b9e82 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b9e46:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b9e4a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b9e4c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b9e50:	f7fd f83a 	bl	b6ec8 <inet_htons>
   b9e54:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b9e58:	6860      	ldr	r0, [r4, #4]
   b9e5a:	f7fd f82d 	bl	b6eb8 <inet_htonl>
   b9e5e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b9e60:	696b      	ldr	r3, [r5, #20]
   b9e62:	221c      	movs	r2, #28
   b9e64:	6818      	ldr	r0, [r3, #0]
   b9e66:	a903      	add	r1, sp, #12
   b9e68:	f7fd f856 	bl	b6f18 <sock_connect>
   b9e6c:	2800      	cmp	r0, #0
   b9e6e:	d1be      	bne.n	b9dee <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b9e70:	3404      	adds	r4, #4
   b9e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9e74:	696d      	ldr	r5, [r5, #20]
   b9e76:	358c      	adds	r5, #140	; 0x8c
   b9e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9e7a:	6823      	ldr	r3, [r4, #0]
   b9e7c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b9e7e:	2401      	movs	r4, #1
   b9e80:	e7ba      	b.n	b9df8 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b9e82:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b9e86:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b9e88:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b9e8c:	f7fd f81c 	bl	b6ec8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9e90:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b9e92:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b9e96:	1d23      	adds	r3, r4, #4
   b9e98:	f104 0714 	add.w	r7, r4, #20
   b9e9c:	6818      	ldr	r0, [r3, #0]
   b9e9e:	6859      	ldr	r1, [r3, #4]
   b9ea0:	4632      	mov	r2, r6
   b9ea2:	c203      	stmia	r2!, {r0, r1}
   b9ea4:	3308      	adds	r3, #8
   b9ea6:	42bb      	cmp	r3, r7
   b9ea8:	4616      	mov	r6, r2
   b9eaa:	d1f7      	bne.n	b9e9c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b9eac:	e7d8      	b.n	b9e60 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b9eb0 <_ZN9TCPClient9availableEv>:
{
   b9eb0:	b530      	push	{r4, r5, lr}
   b9eb2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b9eb4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b9eb8:	b08b      	sub	sp, #44	; 0x2c
   b9eba:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b9ebc:	b12b      	cbz	r3, b9eca <_ZN9TCPClient9availableEv+0x1a>
   b9ebe:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b9ec2:	429a      	cmp	r2, r3
   b9ec4:	d101      	bne.n	b9eca <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b9ec6:	f7ff ff6f 	bl	b9da8 <_ZN9TCPClient12flush_bufferEv>
   b9eca:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b9ecc:	6808      	ldr	r0, [r1, #0]
   b9ece:	2800      	cmp	r0, #0
   b9ed0:	db18      	blt.n	b9f04 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b9ed2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b9ed6:	2d7f      	cmp	r5, #127	; 0x7f
   b9ed8:	d814      	bhi.n	b9f04 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b9eda:	3104      	adds	r1, #4
   b9edc:	2308      	movs	r3, #8
   b9ede:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b9ee2:	4429      	add	r1, r5
   b9ee4:	f7fd f820 	bl	b6f28 <sock_recv>
            if (ret > 0) {
   b9ee8:	2800      	cmp	r0, #0
   b9eea:	dd13      	ble.n	b9f14 <_ZN9TCPClient9availableEv+0x64>
   b9eec:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b9eee:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9ef2:	b90a      	cbnz	r2, b9ef8 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b9ef4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b9ef8:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b9efa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b9efe:	4410      	add	r0, r2
   b9f00:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b9f04:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b9f06:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b9f0a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b9f0e:	1ac0      	subs	r0, r0, r3
   b9f10:	b00b      	add	sp, #44	; 0x2c
   b9f12:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b9f14:	f7fd f9e4 	bl	b72e0 <__errno>
   b9f18:	6803      	ldr	r3, [r0, #0]
   b9f1a:	2b0b      	cmp	r3, #11
   b9f1c:	d0f2      	beq.n	b9f04 <_ZN9TCPClient9availableEv+0x54>
   b9f1e:	f7fd f9df 	bl	b72e0 <__errno>
   b9f22:	6803      	ldr	r3, [r0, #0]
   b9f24:	2b0b      	cmp	r3, #11
   b9f26:	d0ed      	beq.n	b9f04 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b9f28:	2320      	movs	r3, #32
   b9f2a:	2500      	movs	r5, #0
   b9f2c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b9f30:	f7fd f9d6 	bl	b72e0 <__errno>
   b9f34:	6803      	ldr	r3, [r0, #0]
   b9f36:	9301      	str	r3, [sp, #4]
   b9f38:	4b08      	ldr	r3, [pc, #32]	; (b9f5c <_ZN9TCPClient9availableEv+0xac>)
   b9f3a:	4909      	ldr	r1, [pc, #36]	; (b9f60 <_ZN9TCPClient9availableEv+0xb0>)
   b9f3c:	9300      	str	r3, [sp, #0]
   b9f3e:	aa02      	add	r2, sp, #8
   b9f40:	462b      	mov	r3, r5
   b9f42:	2032      	movs	r0, #50	; 0x32
   b9f44:	f7fd f8e0 	bl	b7108 <log_message>
                    sock_close(d_->sock);
   b9f48:	6963      	ldr	r3, [r4, #20]
   b9f4a:	6818      	ldr	r0, [r3, #0]
   b9f4c:	f7fc ffdc 	bl	b6f08 <sock_close>
   b9f50:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b9f52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9f56:	601a      	str	r2, [r3, #0]
   b9f58:	e7d4      	b.n	b9f04 <_ZN9TCPClient9availableEv+0x54>
   b9f5a:	bf00      	nop
   b9f5c:	000bd7ab 	.word	0x000bd7ab
   b9f60:	000bd7a4 	.word	0x000bd7a4

000b9f64 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b9f64:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b9f66:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b9f68:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b9f6a:	6818      	ldr	r0, [r3, #0]
   b9f6c:	2800      	cmp	r0, #0
   b9f6e:	db01      	blt.n	b9f74 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b9f70:	f7fc ffca 	bl	b6f08 <sock_close>
   b9f74:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b9f76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9f7a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b9f7c:	6960      	ldr	r0, [r4, #20]
   b9f7e:	2211      	movs	r2, #17
   b9f80:	2100      	movs	r1, #0
   b9f82:	308c      	adds	r0, #140	; 0x8c
   b9f84:	f000 fc72 	bl	ba86c <memset>
    flush_buffer();
   b9f88:	4620      	mov	r0, r4
}
   b9f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b9f8e:	f7ff bf0b 	b.w	b9da8 <_ZN9TCPClient12flush_bufferEv>

000b9f92 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b9f92:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b9f94:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b9f96:	4604      	mov	r4, r0
          total(0) {
   b9f98:	6001      	str	r1, [r0, #0]
   b9f9a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b9f9e:	3088      	adds	r0, #136	; 0x88
   b9fa0:	f7fe f86a 	bl	b8078 <_ZN9IPAddressC1Ev>
}
   b9fa4:	4620      	mov	r0, r4
   b9fa6:	bd10      	pop	{r4, pc}

000b9fa8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b9fa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9faa:	2300      	movs	r3, #0
   b9fac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b9fb0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b9fb4:	4a0e      	ldr	r2, [pc, #56]	; (b9ff0 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b9fb6:	6103      	str	r3, [r0, #16]
   b9fb8:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9fba:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b9fbc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9fbe:	20ac      	movs	r0, #172	; 0xac
   b9fc0:	9101      	str	r1, [sp, #4]
   b9fc2:	f7fa fd76 	bl	b4ab2 <_Znwj>
	  auto __pi = ::new (__mem)
   b9fc6:	1e05      	subs	r5, r0, #0
   b9fc8:	f105 060c 	add.w	r6, r5, #12
   b9fcc:	d008      	beq.n	b9fe0 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b9fce:	2301      	movs	r3, #1
   b9fd0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b9fd4:	4b07      	ldr	r3, [pc, #28]	; (b9ff4 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9fd6:	9901      	ldr	r1, [sp, #4]
   b9fd8:	602b      	str	r3, [r5, #0]
   b9fda:	4630      	mov	r0, r6
   b9fdc:	f7ff ffd9 	bl	b9f92 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b9fe0:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b9fe2:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b9fe6:	f7ff fedf 	bl	b9da8 <_ZN9TCPClient12flush_bufferEv>
}
   b9fea:	b002      	add	sp, #8
   b9fec:	bd70      	pop	{r4, r5, r6, pc}
   b9fee:	bf00      	nop
   b9ff0:	000bd7e0 	.word	0x000bd7e0
   b9ff4:	000bd7c4 	.word	0x000bd7c4

000b9ff8 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b9ff8:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b9ffa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b9ffe:	4604      	mov	r4, r0
        : TCPClient(-1) {
   ba000:	f7ff ffd2 	bl	b9fa8 <_ZN9TCPClientC1Ei>
}
   ba004:	4620      	mov	r0, r4
   ba006:	bd10      	pop	{r4, pc}

000ba008 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   ba008:	b510      	push	{r4, lr}
   ba00a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   ba00c:	6800      	ldr	r0, [r0, #0]
   ba00e:	2800      	cmp	r0, #0
   ba010:	db01      	blt.n	ba016 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   ba012:	f7fc ff79 	bl	b6f08 <sock_close>
    }
}
   ba016:	4620      	mov	r0, r4
   ba018:	bd10      	pop	{r4, pc}

000ba01a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   ba01a:	300c      	adds	r0, #12
   ba01c:	f7ff bff4 	b.w	ba008 <_ZN9TCPClient4DataD1Ev>

000ba020 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   ba020:	4b02      	ldr	r3, [pc, #8]	; (ba02c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   ba022:	681a      	ldr	r2, [r3, #0]
   ba024:	4b02      	ldr	r3, [pc, #8]	; (ba030 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   ba026:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   ba028:	4770      	bx	lr
   ba02a:	bf00      	nop
   ba02c:	2003e350 	.word	0x2003e350
   ba030:	2003e6fc 	.word	0x2003e6fc

000ba034 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   ba034:	4770      	bx	lr

000ba036 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba036:	7441      	strb	r1, [r0, #17]
}
   ba038:	4770      	bx	lr

000ba03a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   ba03a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   ba03c:	7c00      	ldrb	r0, [r0, #16]
   ba03e:	f7fd f803 	bl	b7048 <hal_usart_available_data_for_write>
}
   ba042:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba046:	bd08      	pop	{r3, pc}

000ba048 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   ba048:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   ba04a:	7c00      	ldrb	r0, [r0, #16]
   ba04c:	f7fc ffd4 	bl	b6ff8 <hal_usart_available>
}
   ba050:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba054:	bd08      	pop	{r3, pc}

000ba056 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   ba056:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   ba058:	7c00      	ldrb	r0, [r0, #16]
   ba05a:	f7fc ffdd 	bl	b7018 <hal_usart_peek>
}
   ba05e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba062:	bd08      	pop	{r3, pc}

000ba064 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   ba064:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   ba066:	7c00      	ldrb	r0, [r0, #16]
   ba068:	f7fc ffce 	bl	b7008 <hal_usart_read>
}
   ba06c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba070:	bd08      	pop	{r3, pc}

000ba072 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   ba072:	7c00      	ldrb	r0, [r0, #16]
   ba074:	f7fc bfd8 	b.w	b7028 <hal_usart_flush>

000ba078 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   ba078:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba07a:	7c45      	ldrb	r5, [r0, #17]
{
   ba07c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba07e:	b12d      	cbz	r5, ba08c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   ba080:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   ba082:	b003      	add	sp, #12
   ba084:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   ba088:	f7fc bfae 	b.w	b6fe8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   ba08c:	7c00      	ldrb	r0, [r0, #16]
   ba08e:	9101      	str	r1, [sp, #4]
   ba090:	f7fc ffda 	bl	b7048 <hal_usart_available_data_for_write>
   ba094:	2800      	cmp	r0, #0
   ba096:	9901      	ldr	r1, [sp, #4]
   ba098:	dcf2      	bgt.n	ba080 <_ZN11USARTSerial5writeEh+0x8>
}
   ba09a:	4628      	mov	r0, r5
   ba09c:	b003      	add	sp, #12
   ba09e:	bd30      	pop	{r4, r5, pc}

000ba0a0 <_ZN11USARTSerialD0Ev>:
   ba0a0:	b510      	push	{r4, lr}
   ba0a2:	2114      	movs	r1, #20
   ba0a4:	4604      	mov	r4, r0
   ba0a6:	f7fa fd0a 	bl	b4abe <_ZdlPvj>
   ba0aa:	4620      	mov	r0, r4
   ba0ac:	bd10      	pop	{r4, pc}
	...

000ba0b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   ba0b0:	b510      	push	{r4, lr}
   ba0b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba0b6:	4604      	mov	r4, r0
   ba0b8:	4608      	mov	r0, r1
   ba0ba:	4611      	mov	r1, r2
   ba0bc:	2200      	movs	r2, #0
   ba0be:	e9c4 2301 	strd	r2, r3, [r4, #4]
   ba0c2:	4b04      	ldr	r3, [pc, #16]	; (ba0d4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   ba0c4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba0c6:	2301      	movs	r3, #1
  _serial = serial;
   ba0c8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba0ca:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   ba0cc:	f7fc ffcc 	bl	b7068 <hal_usart_init_ex>
}
   ba0d0:	4620      	mov	r0, r4
   ba0d2:	bd10      	pop	{r4, pc}
   ba0d4:	000bd848 	.word	0x000bd848

000ba0d8 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   ba0d8:	7c00      	ldrb	r0, [r0, #16]
   ba0da:	2300      	movs	r3, #0
   ba0dc:	f7fc bfbc 	b.w	b7058 <hal_usart_begin_config>

000ba0e0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   ba0e0:	2200      	movs	r2, #0
   ba0e2:	f7ff bff9 	b.w	ba0d8 <_ZN11USARTSerial5beginEmm>

000ba0e6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   ba0e6:	7c00      	ldrb	r0, [r0, #16]
   ba0e8:	f7fc bf76 	b.w	b6fd8 <hal_usart_end>

000ba0ec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   ba0ec:	7441      	strb	r1, [r0, #17]
}
   ba0ee:	4770      	bx	lr

000ba0f0 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba0f0:	4770      	bx	lr

000ba0f2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   ba0f2:	4770      	bx	lr

000ba0f4 <_ZN9USBSerial4readEv>:
{
   ba0f4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   ba0f6:	2100      	movs	r1, #0
   ba0f8:	7c00      	ldrb	r0, [r0, #16]
   ba0fa:	f7fc ffe5 	bl	b70c8 <HAL_USB_USART_Receive_Data>
}
   ba0fe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba102:	bd08      	pop	{r3, pc}

000ba104 <_ZN9USBSerial4peekEv>:
{
   ba104:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   ba106:	2101      	movs	r1, #1
   ba108:	7c00      	ldrb	r0, [r0, #16]
   ba10a:	f7fc ffdd 	bl	b70c8 <HAL_USB_USART_Receive_Data>
}
   ba10e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   ba112:	bd08      	pop	{r3, pc}

000ba114 <_ZN9USBSerial17availableForWriteEv>:
{
   ba114:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   ba116:	7c00      	ldrb	r0, [r0, #16]
   ba118:	f7fc ffce 	bl	b70b8 <HAL_USB_USART_Available_Data_For_Write>
}
   ba11c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba120:	bd08      	pop	{r3, pc}

000ba122 <_ZN9USBSerial9availableEv>:
{
   ba122:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   ba124:	7c00      	ldrb	r0, [r0, #16]
   ba126:	f7fc ffbf 	bl	b70a8 <HAL_USB_USART_Available_Data>
}
   ba12a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   ba12e:	bd08      	pop	{r3, pc}

000ba130 <_ZN9USBSerial5writeEh>:
{
   ba130:	b513      	push	{r0, r1, r4, lr}
   ba132:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba134:	7c00      	ldrb	r0, [r0, #16]
{
   ba136:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   ba138:	f7fc ffbe 	bl	b70b8 <HAL_USB_USART_Available_Data_For_Write>
   ba13c:	2800      	cmp	r0, #0
   ba13e:	9901      	ldr	r1, [sp, #4]
   ba140:	dc01      	bgt.n	ba146 <_ZN9USBSerial5writeEh+0x16>
   ba142:	7c60      	ldrb	r0, [r4, #17]
   ba144:	b120      	cbz	r0, ba150 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   ba146:	7c20      	ldrb	r0, [r4, #16]
   ba148:	f7fc ffc6 	bl	b70d8 <HAL_USB_USART_Send_Data>
   ba14c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   ba150:	b002      	add	sp, #8
   ba152:	bd10      	pop	{r4, pc}

000ba154 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   ba154:	7c00      	ldrb	r0, [r0, #16]
   ba156:	f7fc bfc7 	b.w	b70e8 <HAL_USB_USART_Flush_Data>

000ba15a <_ZN9USBSerialD0Ev>:
   ba15a:	b510      	push	{r4, lr}
   ba15c:	2114      	movs	r1, #20
   ba15e:	4604      	mov	r4, r0
   ba160:	f7fa fcad 	bl	b4abe <_ZdlPvj>
   ba164:	4620      	mov	r0, r4
   ba166:	bd10      	pop	{r4, pc}

000ba168 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   ba168:	b510      	push	{r4, lr}
   ba16a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba16e:	4604      	mov	r4, r0
   ba170:	4608      	mov	r0, r1
   ba172:	2100      	movs	r1, #0
   ba174:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba178:	4b04      	ldr	r3, [pc, #16]	; (ba18c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   ba17a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   ba17c:	2301      	movs	r3, #1
  _serial = serial;
   ba17e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   ba180:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   ba182:	4611      	mov	r1, r2
   ba184:	f7fc ff78 	bl	b7078 <HAL_USB_USART_Init>
}
   ba188:	4620      	mov	r0, r4
   ba18a:	bd10      	pop	{r4, pc}
   ba18c:	000bd878 	.word	0x000bd878

000ba190 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   ba190:	7c00      	ldrb	r0, [r0, #16]
   ba192:	2200      	movs	r2, #0
   ba194:	f7fc bf78 	b.w	b7088 <HAL_USB_USART_Begin>

000ba198 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   ba198:	7c00      	ldrb	r0, [r0, #16]
   ba19a:	f7fc bf7d 	b.w	b7098 <HAL_USB_USART_End>

000ba19e <_Z19acquireSerialBufferv>:
{
   ba19e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   ba1a0:	2214      	movs	r2, #20
{
   ba1a2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   ba1a4:	2100      	movs	r1, #0
   ba1a6:	f000 fb61 	bl	ba86c <memset>
}
   ba1aa:	4620      	mov	r0, r4
   ba1ac:	bd10      	pop	{r4, pc}
	...

000ba1b0 <_Z16_fetch_usbserialv>:
{
   ba1b0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba1b2:	4c0f      	ldr	r4, [pc, #60]	; (ba1f0 <_Z16_fetch_usbserialv+0x40>)
{
   ba1b4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   ba1b6:	a803      	add	r0, sp, #12
   ba1b8:	f7ff fff1 	bl	ba19e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   ba1bc:	7821      	ldrb	r1, [r4, #0]
   ba1be:	f3bf 8f5b 	dmb	ish
   ba1c2:	f011 0101 	ands.w	r1, r1, #1
   ba1c6:	d10f      	bne.n	ba1e8 <_Z16_fetch_usbserialv+0x38>
   ba1c8:	4620      	mov	r0, r4
   ba1ca:	9101      	str	r1, [sp, #4]
   ba1cc:	f7fa fc86 	bl	b4adc <__cxa_guard_acquire>
   ba1d0:	9901      	ldr	r1, [sp, #4]
   ba1d2:	b148      	cbz	r0, ba1e8 <_Z16_fetch_usbserialv+0x38>
   ba1d4:	aa03      	add	r2, sp, #12
   ba1d6:	4807      	ldr	r0, [pc, #28]	; (ba1f4 <_Z16_fetch_usbserialv+0x44>)
   ba1d8:	f7ff ffc6 	bl	ba168 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   ba1dc:	4620      	mov	r0, r4
   ba1de:	f7fa fc82 	bl	b4ae6 <__cxa_guard_release>
   ba1e2:	4805      	ldr	r0, [pc, #20]	; (ba1f8 <_Z16_fetch_usbserialv+0x48>)
   ba1e4:	f000 faf8 	bl	ba7d8 <atexit>
	return _usbserial;
}
   ba1e8:	4802      	ldr	r0, [pc, #8]	; (ba1f4 <_Z16_fetch_usbserialv+0x44>)
   ba1ea:	b008      	add	sp, #32
   ba1ec:	bd10      	pop	{r4, pc}
   ba1ee:	bf00      	nop
   ba1f0:	2003e700 	.word	0x2003e700
   ba1f4:	2003e704 	.word	0x2003e704
   ba1f8:	000ba0f1 	.word	0x000ba0f1

000ba1fc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   ba1fc:	2200      	movs	r2, #0
   ba1fe:	6840      	ldr	r0, [r0, #4]
   ba200:	4611      	mov	r1, r2
   ba202:	f7fc bff5 	b.w	b71f0 <network_ready>

000ba206 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba206:	2200      	movs	r2, #0
   ba208:	6840      	ldr	r0, [r0, #4]
   ba20a:	4611      	mov	r1, r2
   ba20c:	f7fd b810 	b.w	b7230 <network_listening>

000ba210 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba210:	2200      	movs	r2, #0
   ba212:	6840      	ldr	r0, [r0, #4]
   ba214:	4611      	mov	r1, r2
   ba216:	f7fd b81b 	b.w	b7250 <network_get_listen_timeout>

000ba21a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba21a:	6840      	ldr	r0, [r0, #4]
   ba21c:	2200      	movs	r2, #0
   ba21e:	f7fd b80f 	b.w	b7240 <network_set_listen_timeout>

000ba222 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba222:	6840      	ldr	r0, [r0, #4]
   ba224:	2200      	movs	r2, #0
   ba226:	f081 0101 	eor.w	r1, r1, #1
   ba22a:	f7fc bff9 	b.w	b7220 <network_listen>

000ba22e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba22e:	2300      	movs	r3, #0
   ba230:	6840      	ldr	r0, [r0, #4]
   ba232:	461a      	mov	r2, r3
   ba234:	4619      	mov	r1, r3
   ba236:	f7fc bfeb 	b.w	b7210 <network_off>

000ba23a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba23a:	2300      	movs	r3, #0
   ba23c:	6840      	ldr	r0, [r0, #4]
   ba23e:	461a      	mov	r2, r3
   ba240:	4619      	mov	r1, r3
   ba242:	f7fc bfdd 	b.w	b7200 <network_on>

000ba246 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba246:	2200      	movs	r2, #0
   ba248:	6840      	ldr	r0, [r0, #4]
   ba24a:	4611      	mov	r1, r2
   ba24c:	f7fc bfc0 	b.w	b71d0 <network_connecting>

000ba250 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba250:	6840      	ldr	r0, [r0, #4]
   ba252:	2200      	movs	r2, #0
   ba254:	2102      	movs	r1, #2
   ba256:	f7fc bfc3 	b.w	b71e0 <network_disconnect>

000ba25a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba25a:	2300      	movs	r3, #0
   ba25c:	6840      	ldr	r0, [r0, #4]
   ba25e:	461a      	mov	r2, r3
   ba260:	f7fc bfae 	b.w	b71c0 <network_connect>

000ba264 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   ba264:	4b02      	ldr	r3, [pc, #8]	; (ba270 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   ba266:	2204      	movs	r2, #4
   ba268:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   ba26a:	4a02      	ldr	r2, [pc, #8]	; (ba274 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   ba26c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   ba26e:	4770      	bx	lr
   ba270:	2003e718 	.word	0x2003e718
   ba274:	000bd8a8 	.word	0x000bd8a8

000ba278 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   ba278:	4b01      	ldr	r3, [pc, #4]	; (ba280 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   ba27a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   ba27c:	4770      	bx	lr
   ba27e:	bf00      	nop
   ba280:	2003e354 	.word	0x2003e354

000ba284 <serialEventRun>:
{
   ba284:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   ba286:	4b0b      	ldr	r3, [pc, #44]	; (ba2b4 <serialEventRun+0x30>)
   ba288:	b143      	cbz	r3, ba29c <serialEventRun+0x18>
   ba28a:	f7ff ff91 	bl	ba1b0 <_Z16_fetch_usbserialv>
   ba28e:	6803      	ldr	r3, [r0, #0]
   ba290:	691b      	ldr	r3, [r3, #16]
   ba292:	4798      	blx	r3
   ba294:	2800      	cmp	r0, #0
   ba296:	dd01      	ble.n	ba29c <serialEventRun+0x18>
        serialEvent();
   ba298:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   ba29c:	4b06      	ldr	r3, [pc, #24]	; (ba2b8 <serialEventRun+0x34>)
   ba29e:	b143      	cbz	r3, ba2b2 <serialEventRun+0x2e>
   ba2a0:	f000 f95c 	bl	ba55c <_Z22__fetch_global_Serial1v>
   ba2a4:	6803      	ldr	r3, [r0, #0]
   ba2a6:	691b      	ldr	r3, [r3, #16]
   ba2a8:	4798      	blx	r3
   ba2aa:	2800      	cmp	r0, #0
   ba2ac:	dd01      	ble.n	ba2b2 <serialEventRun+0x2e>
        serialEvent1();
   ba2ae:	f3af 8000 	nop.w
}
   ba2b2:	bd08      	pop	{r3, pc}
	...

000ba2bc <_post_loop>:
{
   ba2bc:	b508      	push	{r3, lr}
	serialEventRun();
   ba2be:	f7ff ffe1 	bl	ba284 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   ba2c2:	f7fc fd69 	bl	b6d98 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   ba2c6:	4b01      	ldr	r3, [pc, #4]	; (ba2cc <_post_loop+0x10>)
   ba2c8:	6018      	str	r0, [r3, #0]
}
   ba2ca:	bd08      	pop	{r3, pc}
   ba2cc:	2003e728 	.word	0x2003e728

000ba2d0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba2d0:	4805      	ldr	r0, [pc, #20]	; (ba2e8 <_Z33system_initialize_user_backup_ramv+0x18>)
   ba2d2:	4a06      	ldr	r2, [pc, #24]	; (ba2ec <_Z33system_initialize_user_backup_ramv+0x1c>)
   ba2d4:	4906      	ldr	r1, [pc, #24]	; (ba2f0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   ba2d6:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   ba2d8:	1a12      	subs	r2, r2, r0
   ba2da:	f000 fa9f 	bl	ba81c <memcpy>
    __backup_sram_signature = signature;
   ba2de:	4b05      	ldr	r3, [pc, #20]	; (ba2f4 <_Z33system_initialize_user_backup_ramv+0x24>)
   ba2e0:	4a05      	ldr	r2, [pc, #20]	; (ba2f8 <_Z33system_initialize_user_backup_ramv+0x28>)
   ba2e2:	601a      	str	r2, [r3, #0]
}
   ba2e4:	bd08      	pop	{r3, pc}
   ba2e6:	bf00      	nop
   ba2e8:	2003f400 	.word	0x2003f400
   ba2ec:	2003f404 	.word	0x2003f404
   ba2f0:	000bdfb8 	.word	0x000bdfb8
   ba2f4:	2003f400 	.word	0x2003f400
   ba2f8:	9a271c1e 	.word	0x9a271c1e

000ba2fc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   ba2fc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba2fe:	2300      	movs	r3, #0
   ba300:	9300      	str	r3, [sp, #0]
   ba302:	461a      	mov	r2, r3
   ba304:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba308:	f7fc ff40 	bl	b718c <system_ctrl_set_result>
}
   ba30c:	b003      	add	sp, #12
   ba30e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000ba314 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   ba314:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   ba316:	8843      	ldrh	r3, [r0, #2]
   ba318:	2b0a      	cmp	r3, #10
   ba31a:	d008      	beq.n	ba32e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   ba31c:	2b50      	cmp	r3, #80	; 0x50
   ba31e:	d10b      	bne.n	ba338 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   ba320:	4b09      	ldr	r3, [pc, #36]	; (ba348 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   ba322:	681b      	ldr	r3, [r3, #0]
   ba324:	b14b      	cbz	r3, ba33a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   ba326:	b003      	add	sp, #12
   ba328:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   ba32c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   ba32e:	f7ff ffe5 	bl	ba2fc <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   ba332:	b003      	add	sp, #12
   ba334:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   ba338:	2300      	movs	r3, #0
   ba33a:	9300      	str	r3, [sp, #0]
   ba33c:	461a      	mov	r2, r3
   ba33e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   ba342:	f7fc ff23 	bl	b718c <system_ctrl_set_result>
}
   ba346:	e7f4      	b.n	ba332 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   ba348:	2003e724 	.word	0x2003e724

000ba34c <module_user_init_hook>:
{
   ba34c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   ba34e:	4812      	ldr	r0, [pc, #72]	; (ba398 <module_user_init_hook+0x4c>)
   ba350:	2100      	movs	r1, #0
   ba352:	f7fc ffd5 	bl	b7300 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   ba356:	4b11      	ldr	r3, [pc, #68]	; (ba39c <module_user_init_hook+0x50>)
   ba358:	681a      	ldr	r2, [r3, #0]
   ba35a:	4b11      	ldr	r3, [pc, #68]	; (ba3a0 <module_user_init_hook+0x54>)
   ba35c:	429a      	cmp	r2, r3
   ba35e:	4b11      	ldr	r3, [pc, #68]	; (ba3a4 <module_user_init_hook+0x58>)
   ba360:	bf0c      	ite	eq
   ba362:	2201      	moveq	r2, #1
   ba364:	2200      	movne	r2, #0
   ba366:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   ba368:	d001      	beq.n	ba36e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   ba36a:	f7ff ffb1 	bl	ba2d0 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   ba36e:	f7fc fd03 	bl	b6d78 <HAL_RNG_GetRandomNumber>
   ba372:	4604      	mov	r4, r0
    srand(seed);
   ba374:	f000 fa82 	bl	ba87c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   ba378:	4b0b      	ldr	r3, [pc, #44]	; (ba3a8 <module_user_init_hook+0x5c>)
   ba37a:	b113      	cbz	r3, ba382 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   ba37c:	4620      	mov	r0, r4
   ba37e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   ba382:	2100      	movs	r1, #0
   ba384:	4808      	ldr	r0, [pc, #32]	; (ba3a8 <module_user_init_hook+0x5c>)
   ba386:	f7fc ff13 	bl	b71b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   ba38a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   ba38e:	4807      	ldr	r0, [pc, #28]	; (ba3ac <module_user_init_hook+0x60>)
   ba390:	2100      	movs	r1, #0
   ba392:	f7fc bef1 	b.w	b7178 <system_ctrl_set_app_request_handler>
   ba396:	bf00      	nop
   ba398:	000ba279 	.word	0x000ba279
   ba39c:	2003f400 	.word	0x2003f400
   ba3a0:	9a271c1e 	.word	0x9a271c1e
   ba3a4:	2003e720 	.word	0x2003e720
   ba3a8:	00000000 	.word	0x00000000
   ba3ac:	000ba315 	.word	0x000ba315

000ba3b0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   ba3b0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   ba3b2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   ba3b4:	d902      	bls.n	ba3bc <pinAvailable+0xc>
    return false;
   ba3b6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   ba3b8:	b002      	add	sp, #8
   ba3ba:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   ba3bc:	f1a0 030b 	sub.w	r3, r0, #11
   ba3c0:	2b02      	cmp	r3, #2
   ba3c2:	d81a      	bhi.n	ba3fa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   ba3c4:	4c17      	ldr	r4, [pc, #92]	; (ba424 <pinAvailable+0x74>)
   ba3c6:	7821      	ldrb	r1, [r4, #0]
   ba3c8:	f3bf 8f5b 	dmb	ish
   ba3cc:	f011 0101 	ands.w	r1, r1, #1
   ba3d0:	d10b      	bne.n	ba3ea <pinAvailable+0x3a>
   ba3d2:	4620      	mov	r0, r4
   ba3d4:	9101      	str	r1, [sp, #4]
   ba3d6:	f7fa fb81 	bl	b4adc <__cxa_guard_acquire>
   ba3da:	9901      	ldr	r1, [sp, #4]
   ba3dc:	b128      	cbz	r0, ba3ea <pinAvailable+0x3a>
   ba3de:	4812      	ldr	r0, [pc, #72]	; (ba428 <pinAvailable+0x78>)
   ba3e0:	f7ff f982 	bl	b96e8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   ba3e4:	4620      	mov	r0, r4
   ba3e6:	f7fa fb7e 	bl	b4ae6 <__cxa_guard_release>
   ba3ea:	4b0f      	ldr	r3, [pc, #60]	; (ba428 <pinAvailable+0x78>)
   ba3ec:	7818      	ldrb	r0, [r3, #0]
   ba3ee:	f7fc fdcb 	bl	b6f88 <hal_spi_is_enabled>
   ba3f2:	2800      	cmp	r0, #0
   ba3f4:	d1df      	bne.n	ba3b6 <pinAvailable+0x6>
  return true; // 'pin' is available
   ba3f6:	2001      	movs	r0, #1
   ba3f8:	e7de      	b.n	ba3b8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   ba3fa:	2801      	cmp	r0, #1
   ba3fc:	d809      	bhi.n	ba412 <pinAvailable+0x62>
   ba3fe:	f000 f86d 	bl	ba4dc <_Z19__fetch_global_Wirev>
   ba402:	2100      	movs	r1, #0
   ba404:	7c00      	ldrb	r0, [r0, #16]
   ba406:	f7fc fd37 	bl	b6e78 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   ba40a:	f080 0001 	eor.w	r0, r0, #1
   ba40e:	b2c0      	uxtb	r0, r0
   ba410:	e7d2      	b.n	ba3b8 <pinAvailable+0x8>
   ba412:	3809      	subs	r0, #9
   ba414:	2801      	cmp	r0, #1
   ba416:	d8ee      	bhi.n	ba3f6 <pinAvailable+0x46>
   ba418:	f000 f8a0 	bl	ba55c <_Z22__fetch_global_Serial1v>
   ba41c:	7c00      	ldrb	r0, [r0, #16]
   ba41e:	f7fc fe0b 	bl	b7038 <hal_usart_is_enabled>
   ba422:	e7f2      	b.n	ba40a <pinAvailable+0x5a>
   ba424:	2003e52c 	.word	0x2003e52c
   ba428:	2003e530 	.word	0x2003e530

000ba42c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba42c:	2823      	cmp	r0, #35	; 0x23
{
   ba42e:	b538      	push	{r3, r4, r5, lr}
   ba430:	4604      	mov	r4, r0
   ba432:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   ba434:	d80a      	bhi.n	ba44c <pinMode+0x20>
   ba436:	29ff      	cmp	r1, #255	; 0xff
   ba438:	d008      	beq.n	ba44c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   ba43a:	f7ff ffb9 	bl	ba3b0 <pinAvailable>
   ba43e:	b128      	cbz	r0, ba44c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   ba440:	4629      	mov	r1, r5
   ba442:	4620      	mov	r0, r4
}
   ba444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   ba448:	f7fc bcae 	b.w	b6da8 <hal_gpio_mode>
}
   ba44c:	bd38      	pop	{r3, r4, r5, pc}

000ba44e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   ba44e:	b538      	push	{r3, r4, r5, lr}
   ba450:	4604      	mov	r4, r0
   ba452:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   ba454:	f7fc fcb0 	bl	b6db8 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   ba458:	28ff      	cmp	r0, #255	; 0xff
   ba45a:	d010      	beq.n	ba47e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   ba45c:	2806      	cmp	r0, #6
   ba45e:	d804      	bhi.n	ba46a <digitalWrite+0x1c>
   ba460:	234d      	movs	r3, #77	; 0x4d
   ba462:	fa23 f000 	lsr.w	r0, r3, r0
   ba466:	07c3      	lsls	r3, r0, #31
   ba468:	d409      	bmi.n	ba47e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   ba46a:	4620      	mov	r0, r4
   ba46c:	f7ff ffa0 	bl	ba3b0 <pinAvailable>
   ba470:	b128      	cbz	r0, ba47e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   ba472:	4629      	mov	r1, r5
   ba474:	4620      	mov	r0, r4
}
   ba476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   ba47a:	f7fc bca5 	b.w	b6dc8 <hal_gpio_write>
}
   ba47e:	bd38      	pop	{r3, r4, r5, pc}

000ba480 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   ba480:	b510      	push	{r4, lr}
   ba482:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   ba484:	f7fc fc98 	bl	b6db8 <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   ba488:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   ba48a:	b2db      	uxtb	r3, r3
   ba48c:	2b01      	cmp	r3, #1
   ba48e:	d908      	bls.n	ba4a2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   ba490:	4620      	mov	r0, r4
   ba492:	f7ff ff8d 	bl	ba3b0 <pinAvailable>
   ba496:	b120      	cbz	r0, ba4a2 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   ba498:	4620      	mov	r0, r4
}
   ba49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   ba49e:	f7fc bc9b 	b.w	b6dd8 <hal_gpio_read>
}
   ba4a2:	2000      	movs	r0, #0
   ba4a4:	bd10      	pop	{r4, pc}

000ba4a6 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba4a6:	4770      	bx	lr

000ba4a8 <_Z17acquireWireBufferv>:
{
   ba4a8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   ba4aa:	4b0a      	ldr	r3, [pc, #40]	; (ba4d4 <_Z17acquireWireBufferv+0x2c>)
   ba4ac:	6003      	str	r3, [r0, #0]
   ba4ae:	2301      	movs	r3, #1
{
   ba4b0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   ba4b2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba4b4:	4908      	ldr	r1, [pc, #32]	; (ba4d8 <_Z17acquireWireBufferv+0x30>)
   ba4b6:	2020      	movs	r0, #32
   ba4b8:	f000 f876 	bl	ba5a8 <_ZnajRKSt9nothrow_t>
	};
   ba4bc:	2520      	movs	r5, #32
   ba4be:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba4c0:	4905      	ldr	r1, [pc, #20]	; (ba4d8 <_Z17acquireWireBufferv+0x30>)
	};
   ba4c2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   ba4c4:	4628      	mov	r0, r5
   ba4c6:	f000 f86f 	bl	ba5a8 <_ZnajRKSt9nothrow_t>
	};
   ba4ca:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   ba4ce:	4620      	mov	r0, r4
   ba4d0:	bd38      	pop	{r3, r4, r5, pc}
   ba4d2:	bf00      	nop
   ba4d4:	00010018 	.word	0x00010018
   ba4d8:	000bd8dc 	.word	0x000bd8dc

000ba4dc <_Z19__fetch_global_Wirev>:
{
   ba4dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba4de:	4d0e      	ldr	r5, [pc, #56]	; (ba518 <_Z19__fetch_global_Wirev+0x3c>)
   ba4e0:	7829      	ldrb	r1, [r5, #0]
   ba4e2:	f3bf 8f5b 	dmb	ish
   ba4e6:	f011 0401 	ands.w	r4, r1, #1
{
   ba4ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   ba4ec:	d111      	bne.n	ba512 <_Z19__fetch_global_Wirev+0x36>
   ba4ee:	4628      	mov	r0, r5
   ba4f0:	f7fa faf4 	bl	b4adc <__cxa_guard_acquire>
   ba4f4:	b168      	cbz	r0, ba512 <_Z19__fetch_global_Wirev+0x36>
   ba4f6:	4668      	mov	r0, sp
   ba4f8:	f7ff ffd6 	bl	ba4a8 <_Z17acquireWireBufferv>
   ba4fc:	466a      	mov	r2, sp
   ba4fe:	4621      	mov	r1, r4
   ba500:	4806      	ldr	r0, [pc, #24]	; (ba51c <_Z19__fetch_global_Wirev+0x40>)
   ba502:	f7fd fd49 	bl	b7f98 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   ba506:	4628      	mov	r0, r5
   ba508:	f7fa faed 	bl	b4ae6 <__cxa_guard_release>
   ba50c:	4804      	ldr	r0, [pc, #16]	; (ba520 <_Z19__fetch_global_Wirev+0x44>)
   ba50e:	f000 f963 	bl	ba7d8 <atexit>
	return wire;
}
   ba512:	4802      	ldr	r0, [pc, #8]	; (ba51c <_Z19__fetch_global_Wirev+0x40>)
   ba514:	b007      	add	sp, #28
   ba516:	bd30      	pop	{r4, r5, pc}
   ba518:	2003e72c 	.word	0x2003e72c
   ba51c:	2003e730 	.word	0x2003e730
   ba520:	000ba4a7 	.word	0x000ba4a7

000ba524 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba524:	4770      	bx	lr
	...

000ba528 <_Z20acquireSerial1Bufferv>:
{
   ba528:	b538      	push	{r3, r4, r5, lr}
   ba52a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   ba52c:	2514      	movs	r5, #20
   ba52e:	462a      	mov	r2, r5
   ba530:	2100      	movs	r1, #0
   ba532:	f000 f99b 	bl	ba86c <memset>
   ba536:	8025      	strh	r5, [r4, #0]
   ba538:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba53a:	4907      	ldr	r1, [pc, #28]	; (ba558 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   ba53c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba53e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   ba540:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba542:	f000 f831 	bl	ba5a8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba546:	4904      	ldr	r1, [pc, #16]	; (ba558 <_Z20acquireSerial1Bufferv+0x30>)
    };
   ba548:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   ba54a:	4628      	mov	r0, r5
   ba54c:	f000 f82c 	bl	ba5a8 <_ZnajRKSt9nothrow_t>
    };
   ba550:	60e0      	str	r0, [r4, #12]
}
   ba552:	4620      	mov	r0, r4
   ba554:	bd38      	pop	{r3, r4, r5, pc}
   ba556:	bf00      	nop
   ba558:	000bd8dc 	.word	0x000bd8dc

000ba55c <_Z22__fetch_global_Serial1v>:
{
   ba55c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba55e:	4d0e      	ldr	r5, [pc, #56]	; (ba598 <_Z22__fetch_global_Serial1v+0x3c>)
   ba560:	7829      	ldrb	r1, [r5, #0]
   ba562:	f3bf 8f5b 	dmb	ish
   ba566:	f011 0401 	ands.w	r4, r1, #1
{
   ba56a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   ba56c:	d111      	bne.n	ba592 <_Z22__fetch_global_Serial1v+0x36>
   ba56e:	4628      	mov	r0, r5
   ba570:	f7fa fab4 	bl	b4adc <__cxa_guard_acquire>
   ba574:	b168      	cbz	r0, ba592 <_Z22__fetch_global_Serial1v+0x36>
   ba576:	a801      	add	r0, sp, #4
   ba578:	f7ff ffd6 	bl	ba528 <_Z20acquireSerial1Bufferv>
   ba57c:	aa01      	add	r2, sp, #4
   ba57e:	4621      	mov	r1, r4
   ba580:	4806      	ldr	r0, [pc, #24]	; (ba59c <_Z22__fetch_global_Serial1v+0x40>)
   ba582:	f7ff fd95 	bl	ba0b0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   ba586:	4628      	mov	r0, r5
   ba588:	f7fa faad 	bl	b4ae6 <__cxa_guard_release>
   ba58c:	4804      	ldr	r0, [pc, #16]	; (ba5a0 <_Z22__fetch_global_Serial1v+0x44>)
   ba58e:	f000 f923 	bl	ba7d8 <atexit>
    return serial1;
}
   ba592:	4802      	ldr	r0, [pc, #8]	; (ba59c <_Z22__fetch_global_Serial1v+0x40>)
   ba594:	b007      	add	sp, #28
   ba596:	bd30      	pop	{r4, r5, pc}
   ba598:	2003e744 	.word	0x2003e744
   ba59c:	2003e748 	.word	0x2003e748
   ba5a0:	000ba525 	.word	0x000ba525

000ba5a4 <_ZnwjRKSt9nothrow_t>:
   ba5a4:	f7fa ba85 	b.w	b4ab2 <_Znwj>

000ba5a8 <_ZnajRKSt9nothrow_t>:
   ba5a8:	f7fa ba85 	b.w	b4ab6 <_Znaj>

000ba5ac <_ZSt25__throw_bad_function_callv>:
   ba5ac:	b508      	push	{r3, lr}
   ba5ae:	f7fc fe87 	bl	b72c0 <abort>
	...

000ba5b4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   ba5b4:	4901      	ldr	r1, [pc, #4]	; (ba5bc <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   ba5b6:	f000 b8f9 	b.w	ba7ac <_ZNKSt9type_infoeqERKS_>
   ba5ba:	bf00      	nop
   ba5bc:	000bd8f8 	.word	0x000bd8f8

000ba5c0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   ba5c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   ba5c2:	2400      	movs	r4, #0
   ba5c4:	2310      	movs	r3, #16
   ba5c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   ba5ca:	6803      	ldr	r3, [r0, #0]
   ba5cc:	4615      	mov	r5, r2
   ba5ce:	699e      	ldr	r6, [r3, #24]
   ba5d0:	6812      	ldr	r2, [r2, #0]
   ba5d2:	466b      	mov	r3, sp
   ba5d4:	e9cd 4400 	strd	r4, r4, [sp]
   ba5d8:	47b0      	blx	r6
   ba5da:	f89d 3004 	ldrb.w	r3, [sp, #4]
   ba5de:	f003 0306 	and.w	r3, r3, #6
   ba5e2:	2b06      	cmp	r3, #6
   ba5e4:	bf03      	ittte	eq
   ba5e6:	9b00      	ldreq	r3, [sp, #0]
   ba5e8:	602b      	streq	r3, [r5, #0]
   ba5ea:	2001      	moveq	r0, #1
   ba5ec:	4620      	movne	r0, r4
   ba5ee:	b004      	add	sp, #16
   ba5f0:	bd70      	pop	{r4, r5, r6, pc}

000ba5f2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   ba5f2:	9800      	ldr	r0, [sp, #0]
   ba5f4:	4290      	cmp	r0, r2
   ba5f6:	bf14      	ite	ne
   ba5f8:	2001      	movne	r0, #1
   ba5fa:	2006      	moveq	r0, #6
   ba5fc:	4770      	bx	lr
	...

000ba600 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   ba600:	b510      	push	{r4, lr}
   ba602:	4b03      	ldr	r3, [pc, #12]	; (ba610 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   ba604:	6003      	str	r3, [r0, #0]
   ba606:	4604      	mov	r4, r0
   ba608:	f000 f8cd 	bl	ba7a6 <_ZNSt9type_infoD1Ev>
   ba60c:	4620      	mov	r0, r4
   ba60e:	bd10      	pop	{r4, pc}
   ba610:	000bd938 	.word	0x000bd938

000ba614 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   ba614:	b510      	push	{r4, lr}
   ba616:	4604      	mov	r4, r0
   ba618:	f7ff fff2 	bl	ba600 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba61c:	4620      	mov	r0, r4
   ba61e:	2108      	movs	r1, #8
   ba620:	f7fa fa4d 	bl	b4abe <_ZdlPvj>
   ba624:	4620      	mov	r0, r4
   ba626:	bd10      	pop	{r4, pc}

000ba628 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   ba628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba62c:	461f      	mov	r7, r3
   ba62e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   ba632:	f8dd 8018 	ldr.w	r8, [sp, #24]
   ba636:	4598      	cmp	r8, r3
   ba638:	4606      	mov	r6, r0
   ba63a:	4615      	mov	r5, r2
   ba63c:	d107      	bne.n	ba64e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba63e:	9907      	ldr	r1, [sp, #28]
   ba640:	f000 f8b4 	bl	ba7ac <_ZNKSt9type_infoeqERKS_>
   ba644:	b118      	cbz	r0, ba64e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   ba646:	7165      	strb	r5, [r4, #5]
   ba648:	2000      	movs	r0, #0
   ba64a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba64e:	4639      	mov	r1, r7
   ba650:	4630      	mov	r0, r6
   ba652:	f000 f8ab 	bl	ba7ac <_ZNKSt9type_infoeqERKS_>
   ba656:	2800      	cmp	r0, #0
   ba658:	d0f6      	beq.n	ba648 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   ba65a:	2301      	movs	r3, #1
   ba65c:	f8c4 8000 	str.w	r8, [r4]
   ba660:	7125      	strb	r5, [r4, #4]
   ba662:	71a3      	strb	r3, [r4, #6]
   ba664:	e7f0      	b.n	ba648 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000ba666 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   ba666:	b538      	push	{r3, r4, r5, lr}
   ba668:	4615      	mov	r5, r2
   ba66a:	461c      	mov	r4, r3
   ba66c:	f000 f89e 	bl	ba7ac <_ZNKSt9type_infoeqERKS_>
   ba670:	b120      	cbz	r0, ba67c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   ba672:	2308      	movs	r3, #8
   ba674:	60e3      	str	r3, [r4, #12]
   ba676:	2306      	movs	r3, #6
   ba678:	6025      	str	r5, [r4, #0]
   ba67a:	7123      	strb	r3, [r4, #4]
   ba67c:	bd38      	pop	{r3, r4, r5, pc}

000ba67e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   ba67e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   ba680:	4605      	mov	r5, r0
   ba682:	460c      	mov	r4, r1
   ba684:	9201      	str	r2, [sp, #4]
   ba686:	461e      	mov	r6, r3
   ba688:	f000 f890 	bl	ba7ac <_ZNKSt9type_infoeqERKS_>
   ba68c:	b950      	cbnz	r0, ba6a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba68e:	2e03      	cmp	r6, #3
   ba690:	d808      	bhi.n	ba6a4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   ba692:	6823      	ldr	r3, [r4, #0]
   ba694:	9a01      	ldr	r2, [sp, #4]
   ba696:	695b      	ldr	r3, [r3, #20]
   ba698:	4629      	mov	r1, r5
   ba69a:	4620      	mov	r0, r4
   ba69c:	b002      	add	sp, #8
   ba69e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba6a2:	4718      	bx	r3
   ba6a4:	b002      	add	sp, #8
   ba6a6:	bd70      	pop	{r4, r5, r6, pc}

000ba6a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   ba6a8:	b510      	push	{r4, lr}
   ba6aa:	4b03      	ldr	r3, [pc, #12]	; (ba6b8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   ba6ac:	6003      	str	r3, [r0, #0]
   ba6ae:	4604      	mov	r4, r0
   ba6b0:	f7ff ffa6 	bl	ba600 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   ba6b4:	4620      	mov	r0, r4
   ba6b6:	bd10      	pop	{r4, pc}
   ba6b8:	000bd998 	.word	0x000bd998

000ba6bc <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   ba6bc:	b510      	push	{r4, lr}
   ba6be:	4604      	mov	r4, r0
   ba6c0:	f7ff fff2 	bl	ba6a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   ba6c4:	4620      	mov	r0, r4
   ba6c6:	210c      	movs	r1, #12
   ba6c8:	f7fa f9f9 	bl	b4abe <_ZdlPvj>
   ba6cc:	4620      	mov	r0, r4
   ba6ce:	bd10      	pop	{r4, pc}

000ba6d0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   ba6d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba6d2:	9f08      	ldr	r7, [sp, #32]
   ba6d4:	4297      	cmp	r7, r2
   ba6d6:	4605      	mov	r5, r0
   ba6d8:	460e      	mov	r6, r1
   ba6da:	4614      	mov	r4, r2
   ba6dc:	d00a      	beq.n	ba6f4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   ba6de:	68a8      	ldr	r0, [r5, #8]
   ba6e0:	6802      	ldr	r2, [r0, #0]
   ba6e2:	9708      	str	r7, [sp, #32]
   ba6e4:	6a15      	ldr	r5, [r2, #32]
   ba6e6:	4631      	mov	r1, r6
   ba6e8:	4622      	mov	r2, r4
   ba6ea:	46ac      	mov	ip, r5
   ba6ec:	b003      	add	sp, #12
   ba6ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   ba6f2:	4760      	bx	ip
   ba6f4:	4619      	mov	r1, r3
   ba6f6:	9301      	str	r3, [sp, #4]
   ba6f8:	f000 f858 	bl	ba7ac <_ZNKSt9type_infoeqERKS_>
   ba6fc:	9b01      	ldr	r3, [sp, #4]
   ba6fe:	2800      	cmp	r0, #0
   ba700:	d0ed      	beq.n	ba6de <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   ba702:	2006      	movs	r0, #6
   ba704:	b003      	add	sp, #12
   ba706:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba708 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   ba708:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba70c:	460d      	mov	r5, r1
   ba70e:	4619      	mov	r1, r3
   ba710:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   ba714:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   ba718:	4681      	mov	r9, r0
   ba71a:	4617      	mov	r7, r2
   ba71c:	4698      	mov	r8, r3
   ba71e:	f000 f845 	bl	ba7ac <_ZNKSt9type_infoeqERKS_>
   ba722:	b190      	cbz	r0, ba74a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   ba724:	2d00      	cmp	r5, #0
   ba726:	6034      	str	r4, [r6, #0]
   ba728:	7137      	strb	r7, [r6, #4]
   ba72a:	db09      	blt.n	ba740 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   ba72c:	1961      	adds	r1, r4, r5
   ba72e:	458a      	cmp	sl, r1
   ba730:	bf0c      	ite	eq
   ba732:	2106      	moveq	r1, #6
   ba734:	2101      	movne	r1, #1
   ba736:	71b1      	strb	r1, [r6, #6]
   ba738:	2000      	movs	r0, #0
   ba73a:	b001      	add	sp, #4
   ba73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ba740:	3502      	adds	r5, #2
   ba742:	d1f9      	bne.n	ba738 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba744:	2301      	movs	r3, #1
   ba746:	71b3      	strb	r3, [r6, #6]
   ba748:	e7f6      	b.n	ba738 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba74a:	4554      	cmp	r4, sl
   ba74c:	d106      	bne.n	ba75c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba74e:	4659      	mov	r1, fp
   ba750:	4648      	mov	r0, r9
   ba752:	f000 f82b 	bl	ba7ac <_ZNKSt9type_infoeqERKS_>
   ba756:	b108      	cbz	r0, ba75c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   ba758:	7177      	strb	r7, [r6, #5]
   ba75a:	e7ed      	b.n	ba738 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   ba75c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   ba760:	6803      	ldr	r3, [r0, #0]
   ba762:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   ba766:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   ba76a:	69dc      	ldr	r4, [r3, #28]
   ba76c:	463a      	mov	r2, r7
   ba76e:	4643      	mov	r3, r8
   ba770:	4629      	mov	r1, r5
   ba772:	46a4      	mov	ip, r4
   ba774:	b001      	add	sp, #4
   ba776:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba77a:	4760      	bx	ip

000ba77c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   ba77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba780:	4607      	mov	r7, r0
   ba782:	460c      	mov	r4, r1
   ba784:	4615      	mov	r5, r2
   ba786:	461e      	mov	r6, r3
   ba788:	f7ff ff6d 	bl	ba666 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   ba78c:	b948      	cbnz	r0, ba7a2 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   ba78e:	68b8      	ldr	r0, [r7, #8]
   ba790:	6803      	ldr	r3, [r0, #0]
   ba792:	699f      	ldr	r7, [r3, #24]
   ba794:	462a      	mov	r2, r5
   ba796:	4633      	mov	r3, r6
   ba798:	4621      	mov	r1, r4
   ba79a:	46bc      	mov	ip, r7
   ba79c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   ba7a0:	4760      	bx	ip
   ba7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000ba7a6 <_ZNSt9type_infoD1Ev>:
   ba7a6:	4770      	bx	lr

000ba7a8 <_ZNKSt9type_info14__is_pointer_pEv>:
   ba7a8:	2000      	movs	r0, #0
   ba7aa:	4770      	bx	lr

000ba7ac <_ZNKSt9type_infoeqERKS_>:
   ba7ac:	4281      	cmp	r1, r0
   ba7ae:	b508      	push	{r3, lr}
   ba7b0:	d00e      	beq.n	ba7d0 <_ZNKSt9type_infoeqERKS_+0x24>
   ba7b2:	6840      	ldr	r0, [r0, #4]
   ba7b4:	7803      	ldrb	r3, [r0, #0]
   ba7b6:	2b2a      	cmp	r3, #42	; 0x2a
   ba7b8:	d00c      	beq.n	ba7d4 <_ZNKSt9type_infoeqERKS_+0x28>
   ba7ba:	6849      	ldr	r1, [r1, #4]
   ba7bc:	780b      	ldrb	r3, [r1, #0]
   ba7be:	2b2a      	cmp	r3, #42	; 0x2a
   ba7c0:	bf08      	it	eq
   ba7c2:	3101      	addeq	r1, #1
   ba7c4:	f7fa f910 	bl	b49e8 <strcmp>
   ba7c8:	fab0 f080 	clz	r0, r0
   ba7cc:	0940      	lsrs	r0, r0, #5
   ba7ce:	bd08      	pop	{r3, pc}
   ba7d0:	2001      	movs	r0, #1
   ba7d2:	e7fc      	b.n	ba7ce <_ZNKSt9type_infoeqERKS_+0x22>
   ba7d4:	2000      	movs	r0, #0
   ba7d6:	e7fa      	b.n	ba7ce <_ZNKSt9type_infoeqERKS_+0x22>

000ba7d8 <atexit>:
   ba7d8:	2300      	movs	r3, #0
   ba7da:	4601      	mov	r1, r0
   ba7dc:	461a      	mov	r2, r3
   ba7de:	4618      	mov	r0, r3
   ba7e0:	f000 bf88 	b.w	bb6f4 <__register_exitproc>

000ba7e4 <atof>:
   ba7e4:	2100      	movs	r1, #0
   ba7e6:	f000 beed 	b.w	bb5c4 <strtod>
	...

000ba7ec <isprint>:
   ba7ec:	4b02      	ldr	r3, [pc, #8]	; (ba7f8 <isprint+0xc>)
   ba7ee:	4418      	add	r0, r3
   ba7f0:	7840      	ldrb	r0, [r0, #1]
   ba7f2:	f000 0097 	and.w	r0, r0, #151	; 0x97
   ba7f6:	4770      	bx	lr
   ba7f8:	000bdaa0 	.word	0x000bdaa0

000ba7fc <memcmp>:
   ba7fc:	b510      	push	{r4, lr}
   ba7fe:	3901      	subs	r1, #1
   ba800:	4402      	add	r2, r0
   ba802:	4290      	cmp	r0, r2
   ba804:	d101      	bne.n	ba80a <memcmp+0xe>
   ba806:	2000      	movs	r0, #0
   ba808:	e005      	b.n	ba816 <memcmp+0x1a>
   ba80a:	7803      	ldrb	r3, [r0, #0]
   ba80c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   ba810:	42a3      	cmp	r3, r4
   ba812:	d001      	beq.n	ba818 <memcmp+0x1c>
   ba814:	1b18      	subs	r0, r3, r4
   ba816:	bd10      	pop	{r4, pc}
   ba818:	3001      	adds	r0, #1
   ba81a:	e7f2      	b.n	ba802 <memcmp+0x6>

000ba81c <memcpy>:
   ba81c:	440a      	add	r2, r1
   ba81e:	4291      	cmp	r1, r2
   ba820:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   ba824:	d100      	bne.n	ba828 <memcpy+0xc>
   ba826:	4770      	bx	lr
   ba828:	b510      	push	{r4, lr}
   ba82a:	f811 4b01 	ldrb.w	r4, [r1], #1
   ba82e:	f803 4f01 	strb.w	r4, [r3, #1]!
   ba832:	4291      	cmp	r1, r2
   ba834:	d1f9      	bne.n	ba82a <memcpy+0xe>
   ba836:	bd10      	pop	{r4, pc}

000ba838 <memmove>:
   ba838:	4288      	cmp	r0, r1
   ba83a:	b510      	push	{r4, lr}
   ba83c:	eb01 0402 	add.w	r4, r1, r2
   ba840:	d902      	bls.n	ba848 <memmove+0x10>
   ba842:	4284      	cmp	r4, r0
   ba844:	4623      	mov	r3, r4
   ba846:	d807      	bhi.n	ba858 <memmove+0x20>
   ba848:	1e43      	subs	r3, r0, #1
   ba84a:	42a1      	cmp	r1, r4
   ba84c:	d008      	beq.n	ba860 <memmove+0x28>
   ba84e:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba852:	f803 2f01 	strb.w	r2, [r3, #1]!
   ba856:	e7f8      	b.n	ba84a <memmove+0x12>
   ba858:	4402      	add	r2, r0
   ba85a:	4601      	mov	r1, r0
   ba85c:	428a      	cmp	r2, r1
   ba85e:	d100      	bne.n	ba862 <memmove+0x2a>
   ba860:	bd10      	pop	{r4, pc}
   ba862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   ba866:	f802 4d01 	strb.w	r4, [r2, #-1]!
   ba86a:	e7f7      	b.n	ba85c <memmove+0x24>

000ba86c <memset>:
   ba86c:	4402      	add	r2, r0
   ba86e:	4603      	mov	r3, r0
   ba870:	4293      	cmp	r3, r2
   ba872:	d100      	bne.n	ba876 <memset+0xa>
   ba874:	4770      	bx	lr
   ba876:	f803 1b01 	strb.w	r1, [r3], #1
   ba87a:	e7f9      	b.n	ba870 <memset+0x4>

000ba87c <srand>:
   ba87c:	b538      	push	{r3, r4, r5, lr}
   ba87e:	4b10      	ldr	r3, [pc, #64]	; (ba8c0 <srand+0x44>)
   ba880:	681d      	ldr	r5, [r3, #0]
   ba882:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba884:	4604      	mov	r4, r0
   ba886:	b9b3      	cbnz	r3, ba8b6 <srand+0x3a>
   ba888:	2018      	movs	r0, #24
   ba88a:	f7fc fcf9 	bl	b7280 <malloc>
   ba88e:	4602      	mov	r2, r0
   ba890:	63a8      	str	r0, [r5, #56]	; 0x38
   ba892:	b920      	cbnz	r0, ba89e <srand+0x22>
   ba894:	4b0b      	ldr	r3, [pc, #44]	; (ba8c4 <srand+0x48>)
   ba896:	480c      	ldr	r0, [pc, #48]	; (ba8c8 <srand+0x4c>)
   ba898:	2142      	movs	r1, #66	; 0x42
   ba89a:	f7fc fd29 	bl	b72f0 <__assert_func>
   ba89e:	490b      	ldr	r1, [pc, #44]	; (ba8cc <srand+0x50>)
   ba8a0:	4b0b      	ldr	r3, [pc, #44]	; (ba8d0 <srand+0x54>)
   ba8a2:	e9c0 1300 	strd	r1, r3, [r0]
   ba8a6:	4b0b      	ldr	r3, [pc, #44]	; (ba8d4 <srand+0x58>)
   ba8a8:	6083      	str	r3, [r0, #8]
   ba8aa:	230b      	movs	r3, #11
   ba8ac:	8183      	strh	r3, [r0, #12]
   ba8ae:	2100      	movs	r1, #0
   ba8b0:	2001      	movs	r0, #1
   ba8b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
   ba8b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
   ba8b8:	2200      	movs	r2, #0
   ba8ba:	611c      	str	r4, [r3, #16]
   ba8bc:	615a      	str	r2, [r3, #20]
   ba8be:	bd38      	pop	{r3, r4, r5, pc}
   ba8c0:	2003e354 	.word	0x2003e354
   ba8c4:	000bd9d1 	.word	0x000bd9d1
   ba8c8:	000bd9e8 	.word	0x000bd9e8
   ba8cc:	abcd330e 	.word	0xabcd330e
   ba8d0:	e66d1234 	.word	0xe66d1234
   ba8d4:	0005deec 	.word	0x0005deec

000ba8d8 <strchr>:
   ba8d8:	b2c9      	uxtb	r1, r1
   ba8da:	4603      	mov	r3, r0
   ba8dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   ba8e0:	b11a      	cbz	r2, ba8ea <strchr+0x12>
   ba8e2:	428a      	cmp	r2, r1
   ba8e4:	d1f9      	bne.n	ba8da <strchr+0x2>
   ba8e6:	4618      	mov	r0, r3
   ba8e8:	4770      	bx	lr
   ba8ea:	2900      	cmp	r1, #0
   ba8ec:	bf18      	it	ne
   ba8ee:	2300      	movne	r3, #0
   ba8f0:	e7f9      	b.n	ba8e6 <strchr+0xe>

000ba8f2 <strchrnul>:
   ba8f2:	b510      	push	{r4, lr}
   ba8f4:	4604      	mov	r4, r0
   ba8f6:	f7ff ffef 	bl	ba8d8 <strchr>
   ba8fa:	b918      	cbnz	r0, ba904 <strchrnul+0x12>
   ba8fc:	4620      	mov	r0, r4
   ba8fe:	f7fa f87d 	bl	b49fc <strlen>
   ba902:	4420      	add	r0, r4
   ba904:	bd10      	pop	{r4, pc}

000ba906 <strcpy>:
   ba906:	4603      	mov	r3, r0
   ba908:	f811 2b01 	ldrb.w	r2, [r1], #1
   ba90c:	f803 2b01 	strb.w	r2, [r3], #1
   ba910:	2a00      	cmp	r2, #0
   ba912:	d1f9      	bne.n	ba908 <strcpy+0x2>
   ba914:	4770      	bx	lr

000ba916 <strncmp>:
   ba916:	b510      	push	{r4, lr}
   ba918:	b17a      	cbz	r2, ba93a <strncmp+0x24>
   ba91a:	4603      	mov	r3, r0
   ba91c:	3901      	subs	r1, #1
   ba91e:	1884      	adds	r4, r0, r2
   ba920:	f813 0b01 	ldrb.w	r0, [r3], #1
   ba924:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   ba928:	4290      	cmp	r0, r2
   ba92a:	d101      	bne.n	ba930 <strncmp+0x1a>
   ba92c:	42a3      	cmp	r3, r4
   ba92e:	d101      	bne.n	ba934 <strncmp+0x1e>
   ba930:	1a80      	subs	r0, r0, r2
   ba932:	bd10      	pop	{r4, pc}
   ba934:	2800      	cmp	r0, #0
   ba936:	d1f3      	bne.n	ba920 <strncmp+0xa>
   ba938:	e7fa      	b.n	ba930 <strncmp+0x1a>
   ba93a:	4610      	mov	r0, r2
   ba93c:	e7f9      	b.n	ba932 <strncmp+0x1c>

000ba93e <strnlen>:
   ba93e:	b510      	push	{r4, lr}
   ba940:	4602      	mov	r2, r0
   ba942:	4401      	add	r1, r0
   ba944:	428a      	cmp	r2, r1
   ba946:	4613      	mov	r3, r2
   ba948:	d003      	beq.n	ba952 <strnlen+0x14>
   ba94a:	781c      	ldrb	r4, [r3, #0]
   ba94c:	3201      	adds	r2, #1
   ba94e:	2c00      	cmp	r4, #0
   ba950:	d1f8      	bne.n	ba944 <strnlen+0x6>
   ba952:	1a18      	subs	r0, r3, r0
   ba954:	bd10      	pop	{r4, pc}

000ba956 <strrchr>:
   ba956:	b538      	push	{r3, r4, r5, lr}
   ba958:	4603      	mov	r3, r0
   ba95a:	460c      	mov	r4, r1
   ba95c:	b969      	cbnz	r1, ba97a <strrchr+0x24>
   ba95e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   ba962:	f7ff bfb9 	b.w	ba8d8 <strchr>
   ba966:	1c43      	adds	r3, r0, #1
   ba968:	4605      	mov	r5, r0
   ba96a:	4621      	mov	r1, r4
   ba96c:	4618      	mov	r0, r3
   ba96e:	f7ff ffb3 	bl	ba8d8 <strchr>
   ba972:	2800      	cmp	r0, #0
   ba974:	d1f7      	bne.n	ba966 <strrchr+0x10>
   ba976:	4628      	mov	r0, r5
   ba978:	bd38      	pop	{r3, r4, r5, pc}
   ba97a:	2500      	movs	r5, #0
   ba97c:	e7f5      	b.n	ba96a <strrchr+0x14>

000ba97e <sulp>:
   ba97e:	b570      	push	{r4, r5, r6, lr}
   ba980:	4604      	mov	r4, r0
   ba982:	460d      	mov	r5, r1
   ba984:	ec45 4b10 	vmov	d0, r4, r5
   ba988:	4616      	mov	r6, r2
   ba98a:	f001 fe0d 	bl	bc5a8 <__ulp>
   ba98e:	ec51 0b10 	vmov	r0, r1, d0
   ba992:	b17e      	cbz	r6, ba9b4 <sulp+0x36>
   ba994:	f3c5 530a 	ubfx	r3, r5, #20, #11
   ba998:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   ba99c:	2b00      	cmp	r3, #0
   ba99e:	dd09      	ble.n	ba9b4 <sulp+0x36>
   ba9a0:	051b      	lsls	r3, r3, #20
   ba9a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   ba9a6:	2400      	movs	r4, #0
   ba9a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   ba9ac:	4622      	mov	r2, r4
   ba9ae:	462b      	mov	r3, r5
   ba9b0:	f7f9 fcf2 	bl	b4398 <__aeabi_dmul>
   ba9b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba9b8 <_strtod_l>:
   ba9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ba9bc:	ed2d 8b02 	vpush	{d8}
   ba9c0:	b09d      	sub	sp, #116	; 0x74
   ba9c2:	461f      	mov	r7, r3
   ba9c4:	2300      	movs	r3, #0
   ba9c6:	9318      	str	r3, [sp, #96]	; 0x60
   ba9c8:	4ba2      	ldr	r3, [pc, #648]	; (bac54 <_strtod_l+0x29c>)
   ba9ca:	9213      	str	r2, [sp, #76]	; 0x4c
   ba9cc:	681b      	ldr	r3, [r3, #0]
   ba9ce:	9305      	str	r3, [sp, #20]
   ba9d0:	4604      	mov	r4, r0
   ba9d2:	4618      	mov	r0, r3
   ba9d4:	4688      	mov	r8, r1
   ba9d6:	f7fa f811 	bl	b49fc <strlen>
   ba9da:	f04f 0a00 	mov.w	sl, #0
   ba9de:	4605      	mov	r5, r0
   ba9e0:	f04f 0b00 	mov.w	fp, #0
   ba9e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   ba9e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   ba9ea:	781a      	ldrb	r2, [r3, #0]
   ba9ec:	2a2b      	cmp	r2, #43	; 0x2b
   ba9ee:	d04e      	beq.n	baa8e <_strtod_l+0xd6>
   ba9f0:	d83b      	bhi.n	baa6a <_strtod_l+0xb2>
   ba9f2:	2a0d      	cmp	r2, #13
   ba9f4:	d834      	bhi.n	baa60 <_strtod_l+0xa8>
   ba9f6:	2a08      	cmp	r2, #8
   ba9f8:	d834      	bhi.n	baa64 <_strtod_l+0xac>
   ba9fa:	2a00      	cmp	r2, #0
   ba9fc:	d03e      	beq.n	baa7c <_strtod_l+0xc4>
   ba9fe:	2300      	movs	r3, #0
   baa00:	930a      	str	r3, [sp, #40]	; 0x28
   baa02:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   baa04:	7833      	ldrb	r3, [r6, #0]
   baa06:	2b30      	cmp	r3, #48	; 0x30
   baa08:	f040 80b0 	bne.w	bab6c <_strtod_l+0x1b4>
   baa0c:	7873      	ldrb	r3, [r6, #1]
   baa0e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   baa12:	2b58      	cmp	r3, #88	; 0x58
   baa14:	d168      	bne.n	baae8 <_strtod_l+0x130>
   baa16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   baa18:	9301      	str	r3, [sp, #4]
   baa1a:	ab18      	add	r3, sp, #96	; 0x60
   baa1c:	9702      	str	r7, [sp, #8]
   baa1e:	9300      	str	r3, [sp, #0]
   baa20:	4a8d      	ldr	r2, [pc, #564]	; (bac58 <_strtod_l+0x2a0>)
   baa22:	ab19      	add	r3, sp, #100	; 0x64
   baa24:	a917      	add	r1, sp, #92	; 0x5c
   baa26:	4620      	mov	r0, r4
   baa28:	f000 ff2e 	bl	bb888 <__gethex>
   baa2c:	f010 0707 	ands.w	r7, r0, #7
   baa30:	4605      	mov	r5, r0
   baa32:	d005      	beq.n	baa40 <_strtod_l+0x88>
   baa34:	2f06      	cmp	r7, #6
   baa36:	d12c      	bne.n	baa92 <_strtod_l+0xda>
   baa38:	3601      	adds	r6, #1
   baa3a:	2300      	movs	r3, #0
   baa3c:	9617      	str	r6, [sp, #92]	; 0x5c
   baa3e:	930a      	str	r3, [sp, #40]	; 0x28
   baa40:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   baa42:	2b00      	cmp	r3, #0
   baa44:	f040 8590 	bne.w	bb568 <_strtod_l+0xbb0>
   baa48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   baa4a:	b1eb      	cbz	r3, baa88 <_strtod_l+0xd0>
   baa4c:	4652      	mov	r2, sl
   baa4e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   baa52:	ec43 2b10 	vmov	d0, r2, r3
   baa56:	b01d      	add	sp, #116	; 0x74
   baa58:	ecbd 8b02 	vpop	{d8}
   baa5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   baa60:	2a20      	cmp	r2, #32
   baa62:	d1cc      	bne.n	ba9fe <_strtod_l+0x46>
   baa64:	3301      	adds	r3, #1
   baa66:	9317      	str	r3, [sp, #92]	; 0x5c
   baa68:	e7be      	b.n	ba9e8 <_strtod_l+0x30>
   baa6a:	2a2d      	cmp	r2, #45	; 0x2d
   baa6c:	d1c7      	bne.n	ba9fe <_strtod_l+0x46>
   baa6e:	2201      	movs	r2, #1
   baa70:	920a      	str	r2, [sp, #40]	; 0x28
   baa72:	1c5a      	adds	r2, r3, #1
   baa74:	9217      	str	r2, [sp, #92]	; 0x5c
   baa76:	785b      	ldrb	r3, [r3, #1]
   baa78:	2b00      	cmp	r3, #0
   baa7a:	d1c2      	bne.n	baa02 <_strtod_l+0x4a>
   baa7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   baa7e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   baa82:	2b00      	cmp	r3, #0
   baa84:	f040 856e 	bne.w	bb564 <_strtod_l+0xbac>
   baa88:	4652      	mov	r2, sl
   baa8a:	465b      	mov	r3, fp
   baa8c:	e7e1      	b.n	baa52 <_strtod_l+0x9a>
   baa8e:	2200      	movs	r2, #0
   baa90:	e7ee      	b.n	baa70 <_strtod_l+0xb8>
   baa92:	9a18      	ldr	r2, [sp, #96]	; 0x60
   baa94:	b13a      	cbz	r2, baaa6 <_strtod_l+0xee>
   baa96:	2135      	movs	r1, #53	; 0x35
   baa98:	a81a      	add	r0, sp, #104	; 0x68
   baa9a:	f001 fe90 	bl	bc7be <__copybits>
   baa9e:	9918      	ldr	r1, [sp, #96]	; 0x60
   baaa0:	4620      	mov	r0, r4
   baaa2:	f001 fa4f 	bl	bbf44 <_Bfree>
   baaa6:	3f01      	subs	r7, #1
   baaa8:	2f04      	cmp	r7, #4
   baaaa:	d806      	bhi.n	baaba <_strtod_l+0x102>
   baaac:	e8df f007 	tbb	[pc, r7]
   baab0:	1714030a 	.word	0x1714030a
   baab4:	0a          	.byte	0x0a
   baab5:	00          	.byte	0x00
   baab6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   baaba:	0728      	lsls	r0, r5, #28
   baabc:	d5c0      	bpl.n	baa40 <_strtod_l+0x88>
   baabe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   baac2:	e7bd      	b.n	baa40 <_strtod_l+0x88>
   baac4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   baac8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   baaca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   baace:	f202 4233 	addw	r2, r2, #1075	; 0x433
   baad2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   baad6:	e7f0      	b.n	baaba <_strtod_l+0x102>
   baad8:	f8df b180 	ldr.w	fp, [pc, #384]	; bac5c <_strtod_l+0x2a4>
   baadc:	e7ed      	b.n	baaba <_strtod_l+0x102>
   baade:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   baae2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   baae6:	e7e8      	b.n	baaba <_strtod_l+0x102>
   baae8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   baaea:	1c5a      	adds	r2, r3, #1
   baaec:	9217      	str	r2, [sp, #92]	; 0x5c
   baaee:	785b      	ldrb	r3, [r3, #1]
   baaf0:	2b30      	cmp	r3, #48	; 0x30
   baaf2:	d0f9      	beq.n	baae8 <_strtod_l+0x130>
   baaf4:	2b00      	cmp	r3, #0
   baaf6:	d0a3      	beq.n	baa40 <_strtod_l+0x88>
   baaf8:	2301      	movs	r3, #1
   baafa:	f04f 0900 	mov.w	r9, #0
   baafe:	9304      	str	r3, [sp, #16]
   bab00:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bab02:	9308      	str	r3, [sp, #32]
   bab04:	f8cd 901c 	str.w	r9, [sp, #28]
   bab08:	464f      	mov	r7, r9
   bab0a:	220a      	movs	r2, #10
   bab0c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bab0e:	7806      	ldrb	r6, [r0, #0]
   bab10:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bab14:	b2d9      	uxtb	r1, r3
   bab16:	2909      	cmp	r1, #9
   bab18:	d92a      	bls.n	bab70 <_strtod_l+0x1b8>
   bab1a:	9905      	ldr	r1, [sp, #20]
   bab1c:	462a      	mov	r2, r5
   bab1e:	f7ff fefa 	bl	ba916 <strncmp>
   bab22:	b398      	cbz	r0, bab8c <_strtod_l+0x1d4>
   bab24:	2000      	movs	r0, #0
   bab26:	4632      	mov	r2, r6
   bab28:	463d      	mov	r5, r7
   bab2a:	9005      	str	r0, [sp, #20]
   bab2c:	4603      	mov	r3, r0
   bab2e:	2a65      	cmp	r2, #101	; 0x65
   bab30:	d001      	beq.n	bab36 <_strtod_l+0x17e>
   bab32:	2a45      	cmp	r2, #69	; 0x45
   bab34:	d118      	bne.n	bab68 <_strtod_l+0x1b0>
   bab36:	b91d      	cbnz	r5, bab40 <_strtod_l+0x188>
   bab38:	9a04      	ldr	r2, [sp, #16]
   bab3a:	4302      	orrs	r2, r0
   bab3c:	d09e      	beq.n	baa7c <_strtod_l+0xc4>
   bab3e:	2500      	movs	r5, #0
   bab40:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bab44:	f108 0201 	add.w	r2, r8, #1
   bab48:	9217      	str	r2, [sp, #92]	; 0x5c
   bab4a:	f898 2001 	ldrb.w	r2, [r8, #1]
   bab4e:	2a2b      	cmp	r2, #43	; 0x2b
   bab50:	d075      	beq.n	bac3e <_strtod_l+0x286>
   bab52:	2a2d      	cmp	r2, #45	; 0x2d
   bab54:	d07b      	beq.n	bac4e <_strtod_l+0x296>
   bab56:	f04f 0c00 	mov.w	ip, #0
   bab5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bab5e:	2909      	cmp	r1, #9
   bab60:	f240 8082 	bls.w	bac68 <_strtod_l+0x2b0>
   bab64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bab68:	2600      	movs	r6, #0
   bab6a:	e09d      	b.n	baca8 <_strtod_l+0x2f0>
   bab6c:	2300      	movs	r3, #0
   bab6e:	e7c4      	b.n	baafa <_strtod_l+0x142>
   bab70:	2f08      	cmp	r7, #8
   bab72:	bfd8      	it	le
   bab74:	9907      	ldrle	r1, [sp, #28]
   bab76:	f100 0001 	add.w	r0, r0, #1
   bab7a:	bfda      	itte	le
   bab7c:	fb02 3301 	mlale	r3, r2, r1, r3
   bab80:	9307      	strle	r3, [sp, #28]
   bab82:	fb02 3909 	mlagt	r9, r2, r9, r3
   bab86:	3701      	adds	r7, #1
   bab88:	9017      	str	r0, [sp, #92]	; 0x5c
   bab8a:	e7bf      	b.n	bab0c <_strtod_l+0x154>
   bab8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bab8e:	195a      	adds	r2, r3, r5
   bab90:	9217      	str	r2, [sp, #92]	; 0x5c
   bab92:	5d5a      	ldrb	r2, [r3, r5]
   bab94:	2f00      	cmp	r7, #0
   bab96:	d037      	beq.n	bac08 <_strtod_l+0x250>
   bab98:	9005      	str	r0, [sp, #20]
   bab9a:	463d      	mov	r5, r7
   bab9c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   baba0:	2b09      	cmp	r3, #9
   baba2:	d912      	bls.n	babca <_strtod_l+0x212>
   baba4:	2301      	movs	r3, #1
   baba6:	e7c2      	b.n	bab2e <_strtod_l+0x176>
   baba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   babaa:	1c5a      	adds	r2, r3, #1
   babac:	9217      	str	r2, [sp, #92]	; 0x5c
   babae:	785a      	ldrb	r2, [r3, #1]
   babb0:	3001      	adds	r0, #1
   babb2:	2a30      	cmp	r2, #48	; 0x30
   babb4:	d0f8      	beq.n	baba8 <_strtod_l+0x1f0>
   babb6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   babba:	2b08      	cmp	r3, #8
   babbc:	f200 84d9 	bhi.w	bb572 <_strtod_l+0xbba>
   babc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   babc2:	9005      	str	r0, [sp, #20]
   babc4:	2000      	movs	r0, #0
   babc6:	9308      	str	r3, [sp, #32]
   babc8:	4605      	mov	r5, r0
   babca:	3a30      	subs	r2, #48	; 0x30
   babcc:	f100 0301 	add.w	r3, r0, #1
   babd0:	d014      	beq.n	babfc <_strtod_l+0x244>
   babd2:	9905      	ldr	r1, [sp, #20]
   babd4:	4419      	add	r1, r3
   babd6:	9105      	str	r1, [sp, #20]
   babd8:	462b      	mov	r3, r5
   babda:	eb00 0e05 	add.w	lr, r0, r5
   babde:	210a      	movs	r1, #10
   babe0:	4573      	cmp	r3, lr
   babe2:	d113      	bne.n	bac0c <_strtod_l+0x254>
   babe4:	182b      	adds	r3, r5, r0
   babe6:	2b08      	cmp	r3, #8
   babe8:	f105 0501 	add.w	r5, r5, #1
   babec:	4405      	add	r5, r0
   babee:	dc1c      	bgt.n	bac2a <_strtod_l+0x272>
   babf0:	9907      	ldr	r1, [sp, #28]
   babf2:	230a      	movs	r3, #10
   babf4:	fb03 2301 	mla	r3, r3, r1, r2
   babf8:	9307      	str	r3, [sp, #28]
   babfa:	2300      	movs	r3, #0
   babfc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   babfe:	1c51      	adds	r1, r2, #1
   bac00:	9117      	str	r1, [sp, #92]	; 0x5c
   bac02:	7852      	ldrb	r2, [r2, #1]
   bac04:	4618      	mov	r0, r3
   bac06:	e7c9      	b.n	bab9c <_strtod_l+0x1e4>
   bac08:	4638      	mov	r0, r7
   bac0a:	e7d2      	b.n	babb2 <_strtod_l+0x1fa>
   bac0c:	2b08      	cmp	r3, #8
   bac0e:	dc04      	bgt.n	bac1a <_strtod_l+0x262>
   bac10:	9e07      	ldr	r6, [sp, #28]
   bac12:	434e      	muls	r6, r1
   bac14:	9607      	str	r6, [sp, #28]
   bac16:	3301      	adds	r3, #1
   bac18:	e7e2      	b.n	babe0 <_strtod_l+0x228>
   bac1a:	f103 0c01 	add.w	ip, r3, #1
   bac1e:	f1bc 0f10 	cmp.w	ip, #16
   bac22:	bfd8      	it	le
   bac24:	fb01 f909 	mulle.w	r9, r1, r9
   bac28:	e7f5      	b.n	bac16 <_strtod_l+0x25e>
   bac2a:	2d10      	cmp	r5, #16
   bac2c:	bfdc      	itt	le
   bac2e:	230a      	movle	r3, #10
   bac30:	fb03 2909 	mlale	r9, r3, r9, r2
   bac34:	e7e1      	b.n	babfa <_strtod_l+0x242>
   bac36:	2300      	movs	r3, #0
   bac38:	9305      	str	r3, [sp, #20]
   bac3a:	2301      	movs	r3, #1
   bac3c:	e77c      	b.n	bab38 <_strtod_l+0x180>
   bac3e:	f04f 0c00 	mov.w	ip, #0
   bac42:	f108 0202 	add.w	r2, r8, #2
   bac46:	9217      	str	r2, [sp, #92]	; 0x5c
   bac48:	f898 2002 	ldrb.w	r2, [r8, #2]
   bac4c:	e785      	b.n	bab5a <_strtod_l+0x1a2>
   bac4e:	f04f 0c01 	mov.w	ip, #1
   bac52:	e7f6      	b.n	bac42 <_strtod_l+0x28a>
   bac54:	000bdc14 	.word	0x000bdc14
   bac58:	000bda50 	.word	0x000bda50
   bac5c:	7ff00000 	.word	0x7ff00000
   bac60:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bac62:	1c51      	adds	r1, r2, #1
   bac64:	9117      	str	r1, [sp, #92]	; 0x5c
   bac66:	7852      	ldrb	r2, [r2, #1]
   bac68:	2a30      	cmp	r2, #48	; 0x30
   bac6a:	d0f9      	beq.n	bac60 <_strtod_l+0x2a8>
   bac6c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bac70:	2908      	cmp	r1, #8
   bac72:	f63f af79 	bhi.w	bab68 <_strtod_l+0x1b0>
   bac76:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bac7a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bac7c:	9206      	str	r2, [sp, #24]
   bac7e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bac80:	1c51      	adds	r1, r2, #1
   bac82:	9117      	str	r1, [sp, #92]	; 0x5c
   bac84:	7852      	ldrb	r2, [r2, #1]
   bac86:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bac8a:	2e09      	cmp	r6, #9
   bac8c:	d937      	bls.n	bacfe <_strtod_l+0x346>
   bac8e:	9e06      	ldr	r6, [sp, #24]
   bac90:	1b89      	subs	r1, r1, r6
   bac92:	2908      	cmp	r1, #8
   bac94:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bac98:	dc02      	bgt.n	baca0 <_strtod_l+0x2e8>
   bac9a:	4576      	cmp	r6, lr
   bac9c:	bfa8      	it	ge
   bac9e:	4676      	movge	r6, lr
   baca0:	f1bc 0f00 	cmp.w	ip, #0
   baca4:	d000      	beq.n	baca8 <_strtod_l+0x2f0>
   baca6:	4276      	negs	r6, r6
   baca8:	2d00      	cmp	r5, #0
   bacaa:	d14d      	bne.n	bad48 <_strtod_l+0x390>
   bacac:	9904      	ldr	r1, [sp, #16]
   bacae:	4301      	orrs	r1, r0
   bacb0:	f47f aec6 	bne.w	baa40 <_strtod_l+0x88>
   bacb4:	2b00      	cmp	r3, #0
   bacb6:	f47f aee1 	bne.w	baa7c <_strtod_l+0xc4>
   bacba:	2a69      	cmp	r2, #105	; 0x69
   bacbc:	d027      	beq.n	bad0e <_strtod_l+0x356>
   bacbe:	dc24      	bgt.n	bad0a <_strtod_l+0x352>
   bacc0:	2a49      	cmp	r2, #73	; 0x49
   bacc2:	d024      	beq.n	bad0e <_strtod_l+0x356>
   bacc4:	2a4e      	cmp	r2, #78	; 0x4e
   bacc6:	f47f aed9 	bne.w	baa7c <_strtod_l+0xc4>
   bacca:	499f      	ldr	r1, [pc, #636]	; (baf48 <_strtod_l+0x590>)
   baccc:	a817      	add	r0, sp, #92	; 0x5c
   bacce:	f001 f833 	bl	bbd38 <__match>
   bacd2:	2800      	cmp	r0, #0
   bacd4:	f43f aed2 	beq.w	baa7c <_strtod_l+0xc4>
   bacd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bacda:	781b      	ldrb	r3, [r3, #0]
   bacdc:	2b28      	cmp	r3, #40	; 0x28
   bacde:	d12d      	bne.n	bad3c <_strtod_l+0x384>
   bace0:	499a      	ldr	r1, [pc, #616]	; (baf4c <_strtod_l+0x594>)
   bace2:	aa1a      	add	r2, sp, #104	; 0x68
   bace4:	a817      	add	r0, sp, #92	; 0x5c
   bace6:	f001 f83b 	bl	bbd60 <__hexnan>
   bacea:	2805      	cmp	r0, #5
   bacec:	d126      	bne.n	bad3c <_strtod_l+0x384>
   bacee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bacf0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bacf4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bacf8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bacfc:	e6a0      	b.n	baa40 <_strtod_l+0x88>
   bacfe:	210a      	movs	r1, #10
   bad00:	fb01 2e0e 	mla	lr, r1, lr, r2
   bad04:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bad08:	e7b9      	b.n	bac7e <_strtod_l+0x2c6>
   bad0a:	2a6e      	cmp	r2, #110	; 0x6e
   bad0c:	e7db      	b.n	bacc6 <_strtod_l+0x30e>
   bad0e:	4990      	ldr	r1, [pc, #576]	; (baf50 <_strtod_l+0x598>)
   bad10:	a817      	add	r0, sp, #92	; 0x5c
   bad12:	f001 f811 	bl	bbd38 <__match>
   bad16:	2800      	cmp	r0, #0
   bad18:	f43f aeb0 	beq.w	baa7c <_strtod_l+0xc4>
   bad1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bad1e:	498d      	ldr	r1, [pc, #564]	; (baf54 <_strtod_l+0x59c>)
   bad20:	3b01      	subs	r3, #1
   bad22:	a817      	add	r0, sp, #92	; 0x5c
   bad24:	9317      	str	r3, [sp, #92]	; 0x5c
   bad26:	f001 f807 	bl	bbd38 <__match>
   bad2a:	b910      	cbnz	r0, bad32 <_strtod_l+0x37a>
   bad2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bad2e:	3301      	adds	r3, #1
   bad30:	9317      	str	r3, [sp, #92]	; 0x5c
   bad32:	f8df b230 	ldr.w	fp, [pc, #560]	; baf64 <_strtod_l+0x5ac>
   bad36:	f04f 0a00 	mov.w	sl, #0
   bad3a:	e681      	b.n	baa40 <_strtod_l+0x88>
   bad3c:	4886      	ldr	r0, [pc, #536]	; (baf58 <_strtod_l+0x5a0>)
   bad3e:	f001 fd93 	bl	bc868 <nan>
   bad42:	ec5b ab10 	vmov	sl, fp, d0
   bad46:	e67b      	b.n	baa40 <_strtod_l+0x88>
   bad48:	9b05      	ldr	r3, [sp, #20]
   bad4a:	9807      	ldr	r0, [sp, #28]
   bad4c:	1af3      	subs	r3, r6, r3
   bad4e:	2f00      	cmp	r7, #0
   bad50:	bf08      	it	eq
   bad52:	462f      	moveq	r7, r5
   bad54:	2d10      	cmp	r5, #16
   bad56:	9306      	str	r3, [sp, #24]
   bad58:	46a8      	mov	r8, r5
   bad5a:	bfa8      	it	ge
   bad5c:	f04f 0810 	movge.w	r8, #16
   bad60:	f7f9 faa0 	bl	b42a4 <__aeabi_ui2d>
   bad64:	2d09      	cmp	r5, #9
   bad66:	4682      	mov	sl, r0
   bad68:	468b      	mov	fp, r1
   bad6a:	dd13      	ble.n	bad94 <_strtod_l+0x3dc>
   bad6c:	4b7b      	ldr	r3, [pc, #492]	; (baf5c <_strtod_l+0x5a4>)
   bad6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bad72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bad76:	f7f9 fb0f 	bl	b4398 <__aeabi_dmul>
   bad7a:	4682      	mov	sl, r0
   bad7c:	4648      	mov	r0, r9
   bad7e:	468b      	mov	fp, r1
   bad80:	f7f9 fa90 	bl	b42a4 <__aeabi_ui2d>
   bad84:	4602      	mov	r2, r0
   bad86:	460b      	mov	r3, r1
   bad88:	4650      	mov	r0, sl
   bad8a:	4659      	mov	r1, fp
   bad8c:	f7f9 f94e 	bl	b402c <__adddf3>
   bad90:	4682      	mov	sl, r0
   bad92:	468b      	mov	fp, r1
   bad94:	2d0f      	cmp	r5, #15
   bad96:	dc38      	bgt.n	bae0a <_strtod_l+0x452>
   bad98:	9b06      	ldr	r3, [sp, #24]
   bad9a:	2b00      	cmp	r3, #0
   bad9c:	f43f ae50 	beq.w	baa40 <_strtod_l+0x88>
   bada0:	dd24      	ble.n	badec <_strtod_l+0x434>
   bada2:	2b16      	cmp	r3, #22
   bada4:	dc0b      	bgt.n	badbe <_strtod_l+0x406>
   bada6:	496d      	ldr	r1, [pc, #436]	; (baf5c <_strtod_l+0x5a4>)
   bada8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   badac:	e9d1 0100 	ldrd	r0, r1, [r1]
   badb0:	4652      	mov	r2, sl
   badb2:	465b      	mov	r3, fp
   badb4:	f7f9 faf0 	bl	b4398 <__aeabi_dmul>
   badb8:	4682      	mov	sl, r0
   badba:	468b      	mov	fp, r1
   badbc:	e640      	b.n	baa40 <_strtod_l+0x88>
   badbe:	9a06      	ldr	r2, [sp, #24]
   badc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   badc4:	4293      	cmp	r3, r2
   badc6:	db20      	blt.n	bae0a <_strtod_l+0x452>
   badc8:	4c64      	ldr	r4, [pc, #400]	; (baf5c <_strtod_l+0x5a4>)
   badca:	f1c5 050f 	rsb	r5, r5, #15
   badce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   badd2:	4652      	mov	r2, sl
   badd4:	465b      	mov	r3, fp
   badd6:	e9d1 0100 	ldrd	r0, r1, [r1]
   badda:	f7f9 fadd 	bl	b4398 <__aeabi_dmul>
   badde:	9b06      	ldr	r3, [sp, #24]
   bade0:	1b5d      	subs	r5, r3, r5
   bade2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bade6:	e9d4 2300 	ldrd	r2, r3, [r4]
   badea:	e7e3      	b.n	badb4 <_strtod_l+0x3fc>
   badec:	9b06      	ldr	r3, [sp, #24]
   badee:	3316      	adds	r3, #22
   badf0:	db0b      	blt.n	bae0a <_strtod_l+0x452>
   badf2:	9b05      	ldr	r3, [sp, #20]
   badf4:	1b9e      	subs	r6, r3, r6
   badf6:	4b59      	ldr	r3, [pc, #356]	; (baf5c <_strtod_l+0x5a4>)
   badf8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   badfc:	e9d6 2300 	ldrd	r2, r3, [r6]
   bae00:	4650      	mov	r0, sl
   bae02:	4659      	mov	r1, fp
   bae04:	f7f9 fbf2 	bl	b45ec <__aeabi_ddiv>
   bae08:	e7d6      	b.n	badb8 <_strtod_l+0x400>
   bae0a:	9b06      	ldr	r3, [sp, #24]
   bae0c:	eba5 0808 	sub.w	r8, r5, r8
   bae10:	4498      	add	r8, r3
   bae12:	f1b8 0f00 	cmp.w	r8, #0
   bae16:	dd74      	ble.n	baf02 <_strtod_l+0x54a>
   bae18:	f018 030f 	ands.w	r3, r8, #15
   bae1c:	d00a      	beq.n	bae34 <_strtod_l+0x47c>
   bae1e:	494f      	ldr	r1, [pc, #316]	; (baf5c <_strtod_l+0x5a4>)
   bae20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bae24:	4652      	mov	r2, sl
   bae26:	465b      	mov	r3, fp
   bae28:	e9d1 0100 	ldrd	r0, r1, [r1]
   bae2c:	f7f9 fab4 	bl	b4398 <__aeabi_dmul>
   bae30:	4682      	mov	sl, r0
   bae32:	468b      	mov	fp, r1
   bae34:	f038 080f 	bics.w	r8, r8, #15
   bae38:	d04f      	beq.n	baeda <_strtod_l+0x522>
   bae3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bae3e:	dd22      	ble.n	bae86 <_strtod_l+0x4ce>
   bae40:	2500      	movs	r5, #0
   bae42:	462e      	mov	r6, r5
   bae44:	9507      	str	r5, [sp, #28]
   bae46:	9505      	str	r5, [sp, #20]
   bae48:	2322      	movs	r3, #34	; 0x22
   bae4a:	f8df b118 	ldr.w	fp, [pc, #280]	; baf64 <_strtod_l+0x5ac>
   bae4e:	6023      	str	r3, [r4, #0]
   bae50:	f04f 0a00 	mov.w	sl, #0
   bae54:	9b07      	ldr	r3, [sp, #28]
   bae56:	2b00      	cmp	r3, #0
   bae58:	f43f adf2 	beq.w	baa40 <_strtod_l+0x88>
   bae5c:	9918      	ldr	r1, [sp, #96]	; 0x60
   bae5e:	4620      	mov	r0, r4
   bae60:	f001 f870 	bl	bbf44 <_Bfree>
   bae64:	9905      	ldr	r1, [sp, #20]
   bae66:	4620      	mov	r0, r4
   bae68:	f001 f86c 	bl	bbf44 <_Bfree>
   bae6c:	4631      	mov	r1, r6
   bae6e:	4620      	mov	r0, r4
   bae70:	f001 f868 	bl	bbf44 <_Bfree>
   bae74:	9907      	ldr	r1, [sp, #28]
   bae76:	4620      	mov	r0, r4
   bae78:	f001 f864 	bl	bbf44 <_Bfree>
   bae7c:	4629      	mov	r1, r5
   bae7e:	4620      	mov	r0, r4
   bae80:	f001 f860 	bl	bbf44 <_Bfree>
   bae84:	e5dc      	b.n	baa40 <_strtod_l+0x88>
   bae86:	4b36      	ldr	r3, [pc, #216]	; (baf60 <_strtod_l+0x5a8>)
   bae88:	9304      	str	r3, [sp, #16]
   bae8a:	2300      	movs	r3, #0
   bae8c:	ea4f 1828 	mov.w	r8, r8, asr #4
   bae90:	4650      	mov	r0, sl
   bae92:	4659      	mov	r1, fp
   bae94:	4699      	mov	r9, r3
   bae96:	f1b8 0f01 	cmp.w	r8, #1
   bae9a:	dc21      	bgt.n	baee0 <_strtod_l+0x528>
   bae9c:	b10b      	cbz	r3, baea2 <_strtod_l+0x4ea>
   bae9e:	4682      	mov	sl, r0
   baea0:	468b      	mov	fp, r1
   baea2:	4b2f      	ldr	r3, [pc, #188]	; (baf60 <_strtod_l+0x5a8>)
   baea4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   baea8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   baeac:	4652      	mov	r2, sl
   baeae:	465b      	mov	r3, fp
   baeb0:	e9d9 0100 	ldrd	r0, r1, [r9]
   baeb4:	f7f9 fa70 	bl	b4398 <__aeabi_dmul>
   baeb8:	4b2a      	ldr	r3, [pc, #168]	; (baf64 <_strtod_l+0x5ac>)
   baeba:	460a      	mov	r2, r1
   baebc:	400b      	ands	r3, r1
   baebe:	492a      	ldr	r1, [pc, #168]	; (baf68 <_strtod_l+0x5b0>)
   baec0:	428b      	cmp	r3, r1
   baec2:	4682      	mov	sl, r0
   baec4:	d8bc      	bhi.n	bae40 <_strtod_l+0x488>
   baec6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   baeca:	428b      	cmp	r3, r1
   baecc:	bf86      	itte	hi
   baece:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; baf6c <_strtod_l+0x5b4>
   baed2:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   baed6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   baeda:	2300      	movs	r3, #0
   baedc:	9304      	str	r3, [sp, #16]
   baede:	e084      	b.n	bafea <_strtod_l+0x632>
   baee0:	f018 0f01 	tst.w	r8, #1
   baee4:	d005      	beq.n	baef2 <_strtod_l+0x53a>
   baee6:	9b04      	ldr	r3, [sp, #16]
   baee8:	e9d3 2300 	ldrd	r2, r3, [r3]
   baeec:	f7f9 fa54 	bl	b4398 <__aeabi_dmul>
   baef0:	2301      	movs	r3, #1
   baef2:	9a04      	ldr	r2, [sp, #16]
   baef4:	3208      	adds	r2, #8
   baef6:	f109 0901 	add.w	r9, r9, #1
   baefa:	ea4f 0868 	mov.w	r8, r8, asr #1
   baefe:	9204      	str	r2, [sp, #16]
   baf00:	e7c9      	b.n	bae96 <_strtod_l+0x4de>
   baf02:	d0ea      	beq.n	baeda <_strtod_l+0x522>
   baf04:	f1c8 0800 	rsb	r8, r8, #0
   baf08:	f018 020f 	ands.w	r2, r8, #15
   baf0c:	d00a      	beq.n	baf24 <_strtod_l+0x56c>
   baf0e:	4b13      	ldr	r3, [pc, #76]	; (baf5c <_strtod_l+0x5a4>)
   baf10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   baf14:	4650      	mov	r0, sl
   baf16:	4659      	mov	r1, fp
   baf18:	e9d3 2300 	ldrd	r2, r3, [r3]
   baf1c:	f7f9 fb66 	bl	b45ec <__aeabi_ddiv>
   baf20:	4682      	mov	sl, r0
   baf22:	468b      	mov	fp, r1
   baf24:	ea5f 1828 	movs.w	r8, r8, asr #4
   baf28:	d0d7      	beq.n	baeda <_strtod_l+0x522>
   baf2a:	f1b8 0f1f 	cmp.w	r8, #31
   baf2e:	dd1f      	ble.n	baf70 <_strtod_l+0x5b8>
   baf30:	2500      	movs	r5, #0
   baf32:	462e      	mov	r6, r5
   baf34:	9507      	str	r5, [sp, #28]
   baf36:	9505      	str	r5, [sp, #20]
   baf38:	2322      	movs	r3, #34	; 0x22
   baf3a:	f04f 0a00 	mov.w	sl, #0
   baf3e:	f04f 0b00 	mov.w	fp, #0
   baf42:	6023      	str	r3, [r4, #0]
   baf44:	e786      	b.n	bae54 <_strtod_l+0x49c>
   baf46:	bf00      	nop
   baf48:	000bda4a 	.word	0x000bda4a
   baf4c:	000bda64 	.word	0x000bda64
   baf50:	000bda41 	.word	0x000bda41
   baf54:	000bda44 	.word	0x000bda44
   baf58:	000bd6d3 	.word	0x000bd6d3
   baf5c:	000bdcb0 	.word	0x000bdcb0
   baf60:	000bdc88 	.word	0x000bdc88
   baf64:	7ff00000 	.word	0x7ff00000
   baf68:	7ca00000 	.word	0x7ca00000
   baf6c:	7fefffff 	.word	0x7fefffff
   baf70:	f018 0310 	ands.w	r3, r8, #16
   baf74:	bf18      	it	ne
   baf76:	236a      	movne	r3, #106	; 0x6a
   baf78:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bb328 <_strtod_l+0x970>
   baf7c:	9304      	str	r3, [sp, #16]
   baf7e:	4650      	mov	r0, sl
   baf80:	4659      	mov	r1, fp
   baf82:	2300      	movs	r3, #0
   baf84:	f018 0f01 	tst.w	r8, #1
   baf88:	d004      	beq.n	baf94 <_strtod_l+0x5dc>
   baf8a:	e9d9 2300 	ldrd	r2, r3, [r9]
   baf8e:	f7f9 fa03 	bl	b4398 <__aeabi_dmul>
   baf92:	2301      	movs	r3, #1
   baf94:	ea5f 0868 	movs.w	r8, r8, asr #1
   baf98:	f109 0908 	add.w	r9, r9, #8
   baf9c:	d1f2      	bne.n	baf84 <_strtod_l+0x5cc>
   baf9e:	b10b      	cbz	r3, bafa4 <_strtod_l+0x5ec>
   bafa0:	4682      	mov	sl, r0
   bafa2:	468b      	mov	fp, r1
   bafa4:	9b04      	ldr	r3, [sp, #16]
   bafa6:	b1c3      	cbz	r3, bafda <_strtod_l+0x622>
   bafa8:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bafac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bafb0:	2b00      	cmp	r3, #0
   bafb2:	4659      	mov	r1, fp
   bafb4:	dd11      	ble.n	bafda <_strtod_l+0x622>
   bafb6:	2b1f      	cmp	r3, #31
   bafb8:	f340 8124 	ble.w	bb204 <_strtod_l+0x84c>
   bafbc:	2b34      	cmp	r3, #52	; 0x34
   bafbe:	bfde      	ittt	le
   bafc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bafc4:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bafc8:	fa03 f202 	lslle.w	r2, r3, r2
   bafcc:	f04f 0a00 	mov.w	sl, #0
   bafd0:	bfcc      	ite	gt
   bafd2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bafd6:	ea02 0b01 	andle.w	fp, r2, r1
   bafda:	2200      	movs	r2, #0
   bafdc:	2300      	movs	r3, #0
   bafde:	4650      	mov	r0, sl
   bafe0:	4659      	mov	r1, fp
   bafe2:	f7f9 fc41 	bl	b4868 <__aeabi_dcmpeq>
   bafe6:	2800      	cmp	r0, #0
   bafe8:	d1a2      	bne.n	baf30 <_strtod_l+0x578>
   bafea:	9b07      	ldr	r3, [sp, #28]
   bafec:	9300      	str	r3, [sp, #0]
   bafee:	9908      	ldr	r1, [sp, #32]
   baff0:	462b      	mov	r3, r5
   baff2:	463a      	mov	r2, r7
   baff4:	4620      	mov	r0, r4
   baff6:	f001 f80d 	bl	bc014 <__s2b>
   baffa:	9007      	str	r0, [sp, #28]
   baffc:	2800      	cmp	r0, #0
   baffe:	f43f af1f 	beq.w	bae40 <_strtod_l+0x488>
   bb002:	9b05      	ldr	r3, [sp, #20]
   bb004:	1b9e      	subs	r6, r3, r6
   bb006:	9b06      	ldr	r3, [sp, #24]
   bb008:	2b00      	cmp	r3, #0
   bb00a:	bfb4      	ite	lt
   bb00c:	4633      	movlt	r3, r6
   bb00e:	2300      	movge	r3, #0
   bb010:	930c      	str	r3, [sp, #48]	; 0x30
   bb012:	9b06      	ldr	r3, [sp, #24]
   bb014:	2500      	movs	r5, #0
   bb016:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bb01a:	9312      	str	r3, [sp, #72]	; 0x48
   bb01c:	462e      	mov	r6, r5
   bb01e:	9b07      	ldr	r3, [sp, #28]
   bb020:	4620      	mov	r0, r4
   bb022:	6859      	ldr	r1, [r3, #4]
   bb024:	f000 ff4e 	bl	bbec4 <_Balloc>
   bb028:	9005      	str	r0, [sp, #20]
   bb02a:	2800      	cmp	r0, #0
   bb02c:	f43f af0c 	beq.w	bae48 <_strtod_l+0x490>
   bb030:	9b07      	ldr	r3, [sp, #28]
   bb032:	691a      	ldr	r2, [r3, #16]
   bb034:	3202      	adds	r2, #2
   bb036:	f103 010c 	add.w	r1, r3, #12
   bb03a:	0092      	lsls	r2, r2, #2
   bb03c:	300c      	adds	r0, #12
   bb03e:	f7ff fbed 	bl	ba81c <memcpy>
   bb042:	ec4b ab10 	vmov	d0, sl, fp
   bb046:	aa1a      	add	r2, sp, #104	; 0x68
   bb048:	a919      	add	r1, sp, #100	; 0x64
   bb04a:	4620      	mov	r0, r4
   bb04c:	f001 fb28 	bl	bc6a0 <__d2b>
   bb050:	ec4b ab18 	vmov	d8, sl, fp
   bb054:	9018      	str	r0, [sp, #96]	; 0x60
   bb056:	2800      	cmp	r0, #0
   bb058:	f43f aef6 	beq.w	bae48 <_strtod_l+0x490>
   bb05c:	2101      	movs	r1, #1
   bb05e:	4620      	mov	r0, r4
   bb060:	f001 f872 	bl	bc148 <__i2b>
   bb064:	4606      	mov	r6, r0
   bb066:	2800      	cmp	r0, #0
   bb068:	f43f aeee 	beq.w	bae48 <_strtod_l+0x490>
   bb06c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bb06e:	9904      	ldr	r1, [sp, #16]
   bb070:	2b00      	cmp	r3, #0
   bb072:	bfab      	itete	ge
   bb074:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bb076:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bb078:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bb07a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bb07e:	bfac      	ite	ge
   bb080:	eb03 0902 	addge.w	r9, r3, r2
   bb084:	1ad7      	sublt	r7, r2, r3
   bb086:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bb088:	eba3 0801 	sub.w	r8, r3, r1
   bb08c:	4490      	add	r8, r2
   bb08e:	4ba1      	ldr	r3, [pc, #644]	; (bb314 <_strtod_l+0x95c>)
   bb090:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb094:	4598      	cmp	r8, r3
   bb096:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bb09a:	f280 80c7 	bge.w	bb22c <_strtod_l+0x874>
   bb09e:	eba3 0308 	sub.w	r3, r3, r8
   bb0a2:	2b1f      	cmp	r3, #31
   bb0a4:	eba2 0203 	sub.w	r2, r2, r3
   bb0a8:	f04f 0101 	mov.w	r1, #1
   bb0ac:	f300 80b1 	bgt.w	bb212 <_strtod_l+0x85a>
   bb0b0:	fa01 f303 	lsl.w	r3, r1, r3
   bb0b4:	930d      	str	r3, [sp, #52]	; 0x34
   bb0b6:	2300      	movs	r3, #0
   bb0b8:	9308      	str	r3, [sp, #32]
   bb0ba:	eb09 0802 	add.w	r8, r9, r2
   bb0be:	9b04      	ldr	r3, [sp, #16]
   bb0c0:	45c1      	cmp	r9, r8
   bb0c2:	4417      	add	r7, r2
   bb0c4:	441f      	add	r7, r3
   bb0c6:	464b      	mov	r3, r9
   bb0c8:	bfa8      	it	ge
   bb0ca:	4643      	movge	r3, r8
   bb0cc:	42bb      	cmp	r3, r7
   bb0ce:	bfa8      	it	ge
   bb0d0:	463b      	movge	r3, r7
   bb0d2:	2b00      	cmp	r3, #0
   bb0d4:	bfc2      	ittt	gt
   bb0d6:	eba8 0803 	subgt.w	r8, r8, r3
   bb0da:	1aff      	subgt	r7, r7, r3
   bb0dc:	eba9 0903 	subgt.w	r9, r9, r3
   bb0e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bb0e2:	2b00      	cmp	r3, #0
   bb0e4:	dd17      	ble.n	bb116 <_strtod_l+0x75e>
   bb0e6:	4631      	mov	r1, r6
   bb0e8:	461a      	mov	r2, r3
   bb0ea:	4620      	mov	r0, r4
   bb0ec:	f001 f8ec 	bl	bc2c8 <__pow5mult>
   bb0f0:	4606      	mov	r6, r0
   bb0f2:	2800      	cmp	r0, #0
   bb0f4:	f43f aea8 	beq.w	bae48 <_strtod_l+0x490>
   bb0f8:	4601      	mov	r1, r0
   bb0fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bb0fc:	4620      	mov	r0, r4
   bb0fe:	f001 f839 	bl	bc174 <__multiply>
   bb102:	900b      	str	r0, [sp, #44]	; 0x2c
   bb104:	2800      	cmp	r0, #0
   bb106:	f43f ae9f 	beq.w	bae48 <_strtod_l+0x490>
   bb10a:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb10c:	4620      	mov	r0, r4
   bb10e:	f000 ff19 	bl	bbf44 <_Bfree>
   bb112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb114:	9318      	str	r3, [sp, #96]	; 0x60
   bb116:	f1b8 0f00 	cmp.w	r8, #0
   bb11a:	f300 808c 	bgt.w	bb236 <_strtod_l+0x87e>
   bb11e:	9b06      	ldr	r3, [sp, #24]
   bb120:	2b00      	cmp	r3, #0
   bb122:	dd08      	ble.n	bb136 <_strtod_l+0x77e>
   bb124:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bb126:	9905      	ldr	r1, [sp, #20]
   bb128:	4620      	mov	r0, r4
   bb12a:	f001 f8cd 	bl	bc2c8 <__pow5mult>
   bb12e:	9005      	str	r0, [sp, #20]
   bb130:	2800      	cmp	r0, #0
   bb132:	f43f ae89 	beq.w	bae48 <_strtod_l+0x490>
   bb136:	2f00      	cmp	r7, #0
   bb138:	dd08      	ble.n	bb14c <_strtod_l+0x794>
   bb13a:	9905      	ldr	r1, [sp, #20]
   bb13c:	463a      	mov	r2, r7
   bb13e:	4620      	mov	r0, r4
   bb140:	f001 f91c 	bl	bc37c <__lshift>
   bb144:	9005      	str	r0, [sp, #20]
   bb146:	2800      	cmp	r0, #0
   bb148:	f43f ae7e 	beq.w	bae48 <_strtod_l+0x490>
   bb14c:	f1b9 0f00 	cmp.w	r9, #0
   bb150:	dd08      	ble.n	bb164 <_strtod_l+0x7ac>
   bb152:	4631      	mov	r1, r6
   bb154:	464a      	mov	r2, r9
   bb156:	4620      	mov	r0, r4
   bb158:	f001 f910 	bl	bc37c <__lshift>
   bb15c:	4606      	mov	r6, r0
   bb15e:	2800      	cmp	r0, #0
   bb160:	f43f ae72 	beq.w	bae48 <_strtod_l+0x490>
   bb164:	9a05      	ldr	r2, [sp, #20]
   bb166:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb168:	4620      	mov	r0, r4
   bb16a:	f001 f993 	bl	bc494 <__mdiff>
   bb16e:	4605      	mov	r5, r0
   bb170:	2800      	cmp	r0, #0
   bb172:	f43f ae69 	beq.w	bae48 <_strtod_l+0x490>
   bb176:	68c3      	ldr	r3, [r0, #12]
   bb178:	930b      	str	r3, [sp, #44]	; 0x2c
   bb17a:	2300      	movs	r3, #0
   bb17c:	60c3      	str	r3, [r0, #12]
   bb17e:	4631      	mov	r1, r6
   bb180:	f001 f96c 	bl	bc45c <__mcmp>
   bb184:	2800      	cmp	r0, #0
   bb186:	da60      	bge.n	bb24a <_strtod_l+0x892>
   bb188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb18a:	ea53 030a 	orrs.w	r3, r3, sl
   bb18e:	f040 8082 	bne.w	bb296 <_strtod_l+0x8de>
   bb192:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb196:	2b00      	cmp	r3, #0
   bb198:	d17d      	bne.n	bb296 <_strtod_l+0x8de>
   bb19a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb19e:	0d1b      	lsrs	r3, r3, #20
   bb1a0:	051b      	lsls	r3, r3, #20
   bb1a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bb1a6:	d976      	bls.n	bb296 <_strtod_l+0x8de>
   bb1a8:	696b      	ldr	r3, [r5, #20]
   bb1aa:	b913      	cbnz	r3, bb1b2 <_strtod_l+0x7fa>
   bb1ac:	692b      	ldr	r3, [r5, #16]
   bb1ae:	2b01      	cmp	r3, #1
   bb1b0:	dd71      	ble.n	bb296 <_strtod_l+0x8de>
   bb1b2:	4629      	mov	r1, r5
   bb1b4:	2201      	movs	r2, #1
   bb1b6:	4620      	mov	r0, r4
   bb1b8:	f001 f8e0 	bl	bc37c <__lshift>
   bb1bc:	4631      	mov	r1, r6
   bb1be:	4605      	mov	r5, r0
   bb1c0:	f001 f94c 	bl	bc45c <__mcmp>
   bb1c4:	2800      	cmp	r0, #0
   bb1c6:	dd66      	ble.n	bb296 <_strtod_l+0x8de>
   bb1c8:	9904      	ldr	r1, [sp, #16]
   bb1ca:	4a53      	ldr	r2, [pc, #332]	; (bb318 <_strtod_l+0x960>)
   bb1cc:	465b      	mov	r3, fp
   bb1ce:	2900      	cmp	r1, #0
   bb1d0:	f000 8081 	beq.w	bb2d6 <_strtod_l+0x91e>
   bb1d4:	ea02 010b 	and.w	r1, r2, fp
   bb1d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bb1dc:	dc7b      	bgt.n	bb2d6 <_strtod_l+0x91e>
   bb1de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bb1e2:	f77f aea9 	ble.w	baf38 <_strtod_l+0x580>
   bb1e6:	4b4d      	ldr	r3, [pc, #308]	; (bb31c <_strtod_l+0x964>)
   bb1e8:	4650      	mov	r0, sl
   bb1ea:	4659      	mov	r1, fp
   bb1ec:	2200      	movs	r2, #0
   bb1ee:	f7f9 f8d3 	bl	b4398 <__aeabi_dmul>
   bb1f2:	460b      	mov	r3, r1
   bb1f4:	4303      	orrs	r3, r0
   bb1f6:	bf08      	it	eq
   bb1f8:	2322      	moveq	r3, #34	; 0x22
   bb1fa:	4682      	mov	sl, r0
   bb1fc:	468b      	mov	fp, r1
   bb1fe:	bf08      	it	eq
   bb200:	6023      	streq	r3, [r4, #0]
   bb202:	e62b      	b.n	bae5c <_strtod_l+0x4a4>
   bb204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb208:	fa02 f303 	lsl.w	r3, r2, r3
   bb20c:	ea03 0a0a 	and.w	sl, r3, sl
   bb210:	e6e3      	b.n	bafda <_strtod_l+0x622>
   bb212:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bb216:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bb21a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bb21e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bb222:	fa01 f308 	lsl.w	r3, r1, r8
   bb226:	9308      	str	r3, [sp, #32]
   bb228:	910d      	str	r1, [sp, #52]	; 0x34
   bb22a:	e746      	b.n	bb0ba <_strtod_l+0x702>
   bb22c:	2300      	movs	r3, #0
   bb22e:	9308      	str	r3, [sp, #32]
   bb230:	2301      	movs	r3, #1
   bb232:	930d      	str	r3, [sp, #52]	; 0x34
   bb234:	e741      	b.n	bb0ba <_strtod_l+0x702>
   bb236:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb238:	4642      	mov	r2, r8
   bb23a:	4620      	mov	r0, r4
   bb23c:	f001 f89e 	bl	bc37c <__lshift>
   bb240:	9018      	str	r0, [sp, #96]	; 0x60
   bb242:	2800      	cmp	r0, #0
   bb244:	f47f af6b 	bne.w	bb11e <_strtod_l+0x766>
   bb248:	e5fe      	b.n	bae48 <_strtod_l+0x490>
   bb24a:	465f      	mov	r7, fp
   bb24c:	d16e      	bne.n	bb32c <_strtod_l+0x974>
   bb24e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb250:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb254:	b342      	cbz	r2, bb2a8 <_strtod_l+0x8f0>
   bb256:	4a32      	ldr	r2, [pc, #200]	; (bb320 <_strtod_l+0x968>)
   bb258:	4293      	cmp	r3, r2
   bb25a:	d128      	bne.n	bb2ae <_strtod_l+0x8f6>
   bb25c:	9b04      	ldr	r3, [sp, #16]
   bb25e:	4651      	mov	r1, sl
   bb260:	b1eb      	cbz	r3, bb29e <_strtod_l+0x8e6>
   bb262:	4b2d      	ldr	r3, [pc, #180]	; (bb318 <_strtod_l+0x960>)
   bb264:	403b      	ands	r3, r7
   bb266:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb26a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bb26e:	d819      	bhi.n	bb2a4 <_strtod_l+0x8ec>
   bb270:	0d1b      	lsrs	r3, r3, #20
   bb272:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bb276:	fa02 f303 	lsl.w	r3, r2, r3
   bb27a:	4299      	cmp	r1, r3
   bb27c:	d117      	bne.n	bb2ae <_strtod_l+0x8f6>
   bb27e:	4b29      	ldr	r3, [pc, #164]	; (bb324 <_strtod_l+0x96c>)
   bb280:	429f      	cmp	r7, r3
   bb282:	d102      	bne.n	bb28a <_strtod_l+0x8d2>
   bb284:	3101      	adds	r1, #1
   bb286:	f43f addf 	beq.w	bae48 <_strtod_l+0x490>
   bb28a:	4b23      	ldr	r3, [pc, #140]	; (bb318 <_strtod_l+0x960>)
   bb28c:	403b      	ands	r3, r7
   bb28e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bb292:	f04f 0a00 	mov.w	sl, #0
   bb296:	9b04      	ldr	r3, [sp, #16]
   bb298:	2b00      	cmp	r3, #0
   bb29a:	d1a4      	bne.n	bb1e6 <_strtod_l+0x82e>
   bb29c:	e5de      	b.n	bae5c <_strtod_l+0x4a4>
   bb29e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bb2a2:	e7ea      	b.n	bb27a <_strtod_l+0x8c2>
   bb2a4:	4613      	mov	r3, r2
   bb2a6:	e7e8      	b.n	bb27a <_strtod_l+0x8c2>
   bb2a8:	ea53 030a 	orrs.w	r3, r3, sl
   bb2ac:	d08c      	beq.n	bb1c8 <_strtod_l+0x810>
   bb2ae:	9b08      	ldr	r3, [sp, #32]
   bb2b0:	b1db      	cbz	r3, bb2ea <_strtod_l+0x932>
   bb2b2:	423b      	tst	r3, r7
   bb2b4:	d0ef      	beq.n	bb296 <_strtod_l+0x8de>
   bb2b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb2b8:	9a04      	ldr	r2, [sp, #16]
   bb2ba:	4650      	mov	r0, sl
   bb2bc:	4659      	mov	r1, fp
   bb2be:	b1c3      	cbz	r3, bb2f2 <_strtod_l+0x93a>
   bb2c0:	f7ff fb5d 	bl	ba97e <sulp>
   bb2c4:	4602      	mov	r2, r0
   bb2c6:	460b      	mov	r3, r1
   bb2c8:	ec51 0b18 	vmov	r0, r1, d8
   bb2cc:	f7f8 feae 	bl	b402c <__adddf3>
   bb2d0:	4682      	mov	sl, r0
   bb2d2:	468b      	mov	fp, r1
   bb2d4:	e7df      	b.n	bb296 <_strtod_l+0x8de>
   bb2d6:	4013      	ands	r3, r2
   bb2d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bb2dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bb2e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bb2e4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb2e8:	e7d5      	b.n	bb296 <_strtod_l+0x8de>
   bb2ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb2ec:	ea13 0f0a 	tst.w	r3, sl
   bb2f0:	e7e0      	b.n	bb2b4 <_strtod_l+0x8fc>
   bb2f2:	f7ff fb44 	bl	ba97e <sulp>
   bb2f6:	4602      	mov	r2, r0
   bb2f8:	460b      	mov	r3, r1
   bb2fa:	ec51 0b18 	vmov	r0, r1, d8
   bb2fe:	f7f8 fe93 	bl	b4028 <__aeabi_dsub>
   bb302:	2200      	movs	r2, #0
   bb304:	2300      	movs	r3, #0
   bb306:	4682      	mov	sl, r0
   bb308:	468b      	mov	fp, r1
   bb30a:	f7f9 faad 	bl	b4868 <__aeabi_dcmpeq>
   bb30e:	2800      	cmp	r0, #0
   bb310:	d0c1      	beq.n	bb296 <_strtod_l+0x8de>
   bb312:	e611      	b.n	baf38 <_strtod_l+0x580>
   bb314:	fffffc02 	.word	0xfffffc02
   bb318:	7ff00000 	.word	0x7ff00000
   bb31c:	39500000 	.word	0x39500000
   bb320:	000fffff 	.word	0x000fffff
   bb324:	7fefffff 	.word	0x7fefffff
   bb328:	000bda78 	.word	0x000bda78
   bb32c:	4631      	mov	r1, r6
   bb32e:	4628      	mov	r0, r5
   bb330:	f001 fa12 	bl	bc758 <__ratio>
   bb334:	ec59 8b10 	vmov	r8, r9, d0
   bb338:	ee10 0a10 	vmov	r0, s0
   bb33c:	2200      	movs	r2, #0
   bb33e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bb342:	4649      	mov	r1, r9
   bb344:	f7f9 faa4 	bl	b4890 <__aeabi_dcmple>
   bb348:	2800      	cmp	r0, #0
   bb34a:	d07a      	beq.n	bb442 <_strtod_l+0xa8a>
   bb34c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb34e:	2b00      	cmp	r3, #0
   bb350:	d04a      	beq.n	bb3e8 <_strtod_l+0xa30>
   bb352:	4b95      	ldr	r3, [pc, #596]	; (bb5a8 <_strtod_l+0xbf0>)
   bb354:	2200      	movs	r2, #0
   bb356:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb35a:	f8df 924c 	ldr.w	r9, [pc, #588]	; bb5a8 <_strtod_l+0xbf0>
   bb35e:	f04f 0800 	mov.w	r8, #0
   bb362:	4b92      	ldr	r3, [pc, #584]	; (bb5ac <_strtod_l+0xbf4>)
   bb364:	403b      	ands	r3, r7
   bb366:	930d      	str	r3, [sp, #52]	; 0x34
   bb368:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb36a:	4b91      	ldr	r3, [pc, #580]	; (bb5b0 <_strtod_l+0xbf8>)
   bb36c:	429a      	cmp	r2, r3
   bb36e:	f040 80b0 	bne.w	bb4d2 <_strtod_l+0xb1a>
   bb372:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb376:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bb37a:	ec4b ab10 	vmov	d0, sl, fp
   bb37e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb382:	f001 f911 	bl	bc5a8 <__ulp>
   bb386:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb38a:	ec53 2b10 	vmov	r2, r3, d0
   bb38e:	f7f9 f803 	bl	b4398 <__aeabi_dmul>
   bb392:	4652      	mov	r2, sl
   bb394:	465b      	mov	r3, fp
   bb396:	f7f8 fe49 	bl	b402c <__adddf3>
   bb39a:	460b      	mov	r3, r1
   bb39c:	4983      	ldr	r1, [pc, #524]	; (bb5ac <_strtod_l+0xbf4>)
   bb39e:	4a85      	ldr	r2, [pc, #532]	; (bb5b4 <_strtod_l+0xbfc>)
   bb3a0:	4019      	ands	r1, r3
   bb3a2:	4291      	cmp	r1, r2
   bb3a4:	4682      	mov	sl, r0
   bb3a6:	d960      	bls.n	bb46a <_strtod_l+0xab2>
   bb3a8:	ee18 3a90 	vmov	r3, s17
   bb3ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bb3b0:	4293      	cmp	r3, r2
   bb3b2:	d104      	bne.n	bb3be <_strtod_l+0xa06>
   bb3b4:	ee18 3a10 	vmov	r3, s16
   bb3b8:	3301      	adds	r3, #1
   bb3ba:	f43f ad45 	beq.w	bae48 <_strtod_l+0x490>
   bb3be:	f8df b200 	ldr.w	fp, [pc, #512]	; bb5c0 <_strtod_l+0xc08>
   bb3c2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bb3c6:	9918      	ldr	r1, [sp, #96]	; 0x60
   bb3c8:	4620      	mov	r0, r4
   bb3ca:	f000 fdbb 	bl	bbf44 <_Bfree>
   bb3ce:	9905      	ldr	r1, [sp, #20]
   bb3d0:	4620      	mov	r0, r4
   bb3d2:	f000 fdb7 	bl	bbf44 <_Bfree>
   bb3d6:	4631      	mov	r1, r6
   bb3d8:	4620      	mov	r0, r4
   bb3da:	f000 fdb3 	bl	bbf44 <_Bfree>
   bb3de:	4629      	mov	r1, r5
   bb3e0:	4620      	mov	r0, r4
   bb3e2:	f000 fdaf 	bl	bbf44 <_Bfree>
   bb3e6:	e61a      	b.n	bb01e <_strtod_l+0x666>
   bb3e8:	f1ba 0f00 	cmp.w	sl, #0
   bb3ec:	d11b      	bne.n	bb426 <_strtod_l+0xa6e>
   bb3ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb3f2:	b9f3      	cbnz	r3, bb432 <_strtod_l+0xa7a>
   bb3f4:	4b6c      	ldr	r3, [pc, #432]	; (bb5a8 <_strtod_l+0xbf0>)
   bb3f6:	2200      	movs	r2, #0
   bb3f8:	4640      	mov	r0, r8
   bb3fa:	4649      	mov	r1, r9
   bb3fc:	f7f9 fa3e 	bl	b487c <__aeabi_dcmplt>
   bb400:	b9d0      	cbnz	r0, bb438 <_strtod_l+0xa80>
   bb402:	4640      	mov	r0, r8
   bb404:	4649      	mov	r1, r9
   bb406:	4b6c      	ldr	r3, [pc, #432]	; (bb5b8 <_strtod_l+0xc00>)
   bb408:	2200      	movs	r2, #0
   bb40a:	f7f8 ffc5 	bl	b4398 <__aeabi_dmul>
   bb40e:	4680      	mov	r8, r0
   bb410:	4689      	mov	r9, r1
   bb412:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bb416:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bb41a:	9315      	str	r3, [sp, #84]	; 0x54
   bb41c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bb420:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb424:	e79d      	b.n	bb362 <_strtod_l+0x9aa>
   bb426:	f1ba 0f01 	cmp.w	sl, #1
   bb42a:	d102      	bne.n	bb432 <_strtod_l+0xa7a>
   bb42c:	2f00      	cmp	r7, #0
   bb42e:	f43f ad83 	beq.w	baf38 <_strtod_l+0x580>
   bb432:	4b62      	ldr	r3, [pc, #392]	; (bb5bc <_strtod_l+0xc04>)
   bb434:	2200      	movs	r2, #0
   bb436:	e78e      	b.n	bb356 <_strtod_l+0x99e>
   bb438:	f8df 917c 	ldr.w	r9, [pc, #380]	; bb5b8 <_strtod_l+0xc00>
   bb43c:	f04f 0800 	mov.w	r8, #0
   bb440:	e7e7      	b.n	bb412 <_strtod_l+0xa5a>
   bb442:	4b5d      	ldr	r3, [pc, #372]	; (bb5b8 <_strtod_l+0xc00>)
   bb444:	4640      	mov	r0, r8
   bb446:	4649      	mov	r1, r9
   bb448:	2200      	movs	r2, #0
   bb44a:	f7f8 ffa5 	bl	b4398 <__aeabi_dmul>
   bb44e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb450:	4680      	mov	r8, r0
   bb452:	4689      	mov	r9, r1
   bb454:	b933      	cbnz	r3, bb464 <_strtod_l+0xaac>
   bb456:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb45a:	900e      	str	r0, [sp, #56]	; 0x38
   bb45c:	930f      	str	r3, [sp, #60]	; 0x3c
   bb45e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bb462:	e7dd      	b.n	bb420 <_strtod_l+0xa68>
   bb464:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bb468:	e7f9      	b.n	bb45e <_strtod_l+0xaa6>
   bb46a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bb46e:	9b04      	ldr	r3, [sp, #16]
   bb470:	2b00      	cmp	r3, #0
   bb472:	d1a8      	bne.n	bb3c6 <_strtod_l+0xa0e>
   bb474:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bb478:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb47a:	0d1b      	lsrs	r3, r3, #20
   bb47c:	051b      	lsls	r3, r3, #20
   bb47e:	429a      	cmp	r2, r3
   bb480:	d1a1      	bne.n	bb3c6 <_strtod_l+0xa0e>
   bb482:	4640      	mov	r0, r8
   bb484:	4649      	mov	r1, r9
   bb486:	f7f9 fac1 	bl	b4a0c <__aeabi_d2lz>
   bb48a:	f7f8 ff57 	bl	b433c <__aeabi_l2d>
   bb48e:	4602      	mov	r2, r0
   bb490:	460b      	mov	r3, r1
   bb492:	4640      	mov	r0, r8
   bb494:	4649      	mov	r1, r9
   bb496:	f7f8 fdc7 	bl	b4028 <__aeabi_dsub>
   bb49a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bb49c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bb4a0:	ea43 030a 	orr.w	r3, r3, sl
   bb4a4:	4313      	orrs	r3, r2
   bb4a6:	4680      	mov	r8, r0
   bb4a8:	4689      	mov	r9, r1
   bb4aa:	d055      	beq.n	bb558 <_strtod_l+0xba0>
   bb4ac:	a336      	add	r3, pc, #216	; (adr r3, bb588 <_strtod_l+0xbd0>)
   bb4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb4b2:	f7f9 f9e3 	bl	b487c <__aeabi_dcmplt>
   bb4b6:	2800      	cmp	r0, #0
   bb4b8:	f47f acd0 	bne.w	bae5c <_strtod_l+0x4a4>
   bb4bc:	a334      	add	r3, pc, #208	; (adr r3, bb590 <_strtod_l+0xbd8>)
   bb4be:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb4c2:	4640      	mov	r0, r8
   bb4c4:	4649      	mov	r1, r9
   bb4c6:	f7f9 f9f7 	bl	b48b8 <__aeabi_dcmpgt>
   bb4ca:	2800      	cmp	r0, #0
   bb4cc:	f43f af7b 	beq.w	bb3c6 <_strtod_l+0xa0e>
   bb4d0:	e4c4      	b.n	bae5c <_strtod_l+0x4a4>
   bb4d2:	9b04      	ldr	r3, [sp, #16]
   bb4d4:	b333      	cbz	r3, bb524 <_strtod_l+0xb6c>
   bb4d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bb4d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bb4dc:	d822      	bhi.n	bb524 <_strtod_l+0xb6c>
   bb4de:	a32e      	add	r3, pc, #184	; (adr r3, bb598 <_strtod_l+0xbe0>)
   bb4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb4e4:	4640      	mov	r0, r8
   bb4e6:	4649      	mov	r1, r9
   bb4e8:	f7f9 f9d2 	bl	b4890 <__aeabi_dcmple>
   bb4ec:	b1a0      	cbz	r0, bb518 <_strtod_l+0xb60>
   bb4ee:	4649      	mov	r1, r9
   bb4f0:	4640      	mov	r0, r8
   bb4f2:	f7f9 f9eb 	bl	b48cc <__aeabi_d2uiz>
   bb4f6:	2801      	cmp	r0, #1
   bb4f8:	bf38      	it	cc
   bb4fa:	2001      	movcc	r0, #1
   bb4fc:	f7f8 fed2 	bl	b42a4 <__aeabi_ui2d>
   bb500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bb502:	4680      	mov	r8, r0
   bb504:	4689      	mov	r9, r1
   bb506:	bb23      	cbnz	r3, bb552 <_strtod_l+0xb9a>
   bb508:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bb50c:	9010      	str	r0, [sp, #64]	; 0x40
   bb50e:	9311      	str	r3, [sp, #68]	; 0x44
   bb510:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bb514:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bb518:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bb51a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bb51c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bb520:	1a9b      	subs	r3, r3, r2
   bb522:	9309      	str	r3, [sp, #36]	; 0x24
   bb524:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb528:	eeb0 0a48 	vmov.f32	s0, s16
   bb52c:	eef0 0a68 	vmov.f32	s1, s17
   bb530:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bb534:	f001 f838 	bl	bc5a8 <__ulp>
   bb538:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bb53c:	ec53 2b10 	vmov	r2, r3, d0
   bb540:	f7f8 ff2a 	bl	b4398 <__aeabi_dmul>
   bb544:	ec53 2b18 	vmov	r2, r3, d8
   bb548:	f7f8 fd70 	bl	b402c <__adddf3>
   bb54c:	4682      	mov	sl, r0
   bb54e:	468b      	mov	fp, r1
   bb550:	e78d      	b.n	bb46e <_strtod_l+0xab6>
   bb552:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bb556:	e7db      	b.n	bb510 <_strtod_l+0xb58>
   bb558:	a311      	add	r3, pc, #68	; (adr r3, bb5a0 <_strtod_l+0xbe8>)
   bb55a:	e9d3 2300 	ldrd	r2, r3, [r3]
   bb55e:	f7f9 f98d 	bl	b487c <__aeabi_dcmplt>
   bb562:	e7b2      	b.n	bb4ca <_strtod_l+0xb12>
   bb564:	2300      	movs	r3, #0
   bb566:	930a      	str	r3, [sp, #40]	; 0x28
   bb568:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bb56a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bb56c:	6013      	str	r3, [r2, #0]
   bb56e:	f7ff ba6b 	b.w	baa48 <_strtod_l+0x90>
   bb572:	2a65      	cmp	r2, #101	; 0x65
   bb574:	f43f ab5f 	beq.w	bac36 <_strtod_l+0x27e>
   bb578:	2a45      	cmp	r2, #69	; 0x45
   bb57a:	f43f ab5c 	beq.w	bac36 <_strtod_l+0x27e>
   bb57e:	2301      	movs	r3, #1
   bb580:	f7ff bb94 	b.w	bacac <_strtod_l+0x2f4>
   bb584:	f3af 8000 	nop.w
   bb588:	94a03595 	.word	0x94a03595
   bb58c:	3fdfffff 	.word	0x3fdfffff
   bb590:	35afe535 	.word	0x35afe535
   bb594:	3fe00000 	.word	0x3fe00000
   bb598:	ffc00000 	.word	0xffc00000
   bb59c:	41dfffff 	.word	0x41dfffff
   bb5a0:	94a03595 	.word	0x94a03595
   bb5a4:	3fcfffff 	.word	0x3fcfffff
   bb5a8:	3ff00000 	.word	0x3ff00000
   bb5ac:	7ff00000 	.word	0x7ff00000
   bb5b0:	7fe00000 	.word	0x7fe00000
   bb5b4:	7c9fffff 	.word	0x7c9fffff
   bb5b8:	3fe00000 	.word	0x3fe00000
   bb5bc:	bff00000 	.word	0xbff00000
   bb5c0:	7fefffff 	.word	0x7fefffff

000bb5c4 <strtod>:
   bb5c4:	460a      	mov	r2, r1
   bb5c6:	4601      	mov	r1, r0
   bb5c8:	4802      	ldr	r0, [pc, #8]	; (bb5d4 <strtod+0x10>)
   bb5ca:	4b03      	ldr	r3, [pc, #12]	; (bb5d8 <strtod+0x14>)
   bb5cc:	6800      	ldr	r0, [r0, #0]
   bb5ce:	f7ff b9f3 	b.w	ba9b8 <_strtod_l>
   bb5d2:	bf00      	nop
   bb5d4:	2003e354 	.word	0x2003e354
   bb5d8:	2003e3c0 	.word	0x2003e3c0

000bb5dc <_strtol_l.constprop.0>:
   bb5dc:	2b01      	cmp	r3, #1
   bb5de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bb5e2:	d001      	beq.n	bb5e8 <_strtol_l.constprop.0+0xc>
   bb5e4:	2b24      	cmp	r3, #36	; 0x24
   bb5e6:	d906      	bls.n	bb5f6 <_strtol_l.constprop.0+0x1a>
   bb5e8:	f7fb fe7a 	bl	b72e0 <__errno>
   bb5ec:	2316      	movs	r3, #22
   bb5ee:	6003      	str	r3, [r0, #0]
   bb5f0:	2000      	movs	r0, #0
   bb5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bb5f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bb6dc <_strtol_l.constprop.0+0x100>
   bb5fa:	460d      	mov	r5, r1
   bb5fc:	462e      	mov	r6, r5
   bb5fe:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb602:	f814 700c 	ldrb.w	r7, [r4, ip]
   bb606:	f017 0708 	ands.w	r7, r7, #8
   bb60a:	d1f7      	bne.n	bb5fc <_strtol_l.constprop.0+0x20>
   bb60c:	2c2d      	cmp	r4, #45	; 0x2d
   bb60e:	d132      	bne.n	bb676 <_strtol_l.constprop.0+0x9a>
   bb610:	782c      	ldrb	r4, [r5, #0]
   bb612:	2701      	movs	r7, #1
   bb614:	1cb5      	adds	r5, r6, #2
   bb616:	2b00      	cmp	r3, #0
   bb618:	d05b      	beq.n	bb6d2 <_strtol_l.constprop.0+0xf6>
   bb61a:	2b10      	cmp	r3, #16
   bb61c:	d109      	bne.n	bb632 <_strtol_l.constprop.0+0x56>
   bb61e:	2c30      	cmp	r4, #48	; 0x30
   bb620:	d107      	bne.n	bb632 <_strtol_l.constprop.0+0x56>
   bb622:	782c      	ldrb	r4, [r5, #0]
   bb624:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bb628:	2c58      	cmp	r4, #88	; 0x58
   bb62a:	d14d      	bne.n	bb6c8 <_strtol_l.constprop.0+0xec>
   bb62c:	786c      	ldrb	r4, [r5, #1]
   bb62e:	2310      	movs	r3, #16
   bb630:	3502      	adds	r5, #2
   bb632:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bb636:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bb63a:	f04f 0c00 	mov.w	ip, #0
   bb63e:	fbb8 f9f3 	udiv	r9, r8, r3
   bb642:	4666      	mov	r6, ip
   bb644:	fb03 8a19 	mls	sl, r3, r9, r8
   bb648:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bb64c:	f1be 0f09 	cmp.w	lr, #9
   bb650:	d816      	bhi.n	bb680 <_strtol_l.constprop.0+0xa4>
   bb652:	4674      	mov	r4, lr
   bb654:	42a3      	cmp	r3, r4
   bb656:	dd24      	ble.n	bb6a2 <_strtol_l.constprop.0+0xc6>
   bb658:	f1bc 0f00 	cmp.w	ip, #0
   bb65c:	db1e      	blt.n	bb69c <_strtol_l.constprop.0+0xc0>
   bb65e:	45b1      	cmp	r9, r6
   bb660:	d31c      	bcc.n	bb69c <_strtol_l.constprop.0+0xc0>
   bb662:	d101      	bne.n	bb668 <_strtol_l.constprop.0+0x8c>
   bb664:	45a2      	cmp	sl, r4
   bb666:	db19      	blt.n	bb69c <_strtol_l.constprop.0+0xc0>
   bb668:	fb06 4603 	mla	r6, r6, r3, r4
   bb66c:	f04f 0c01 	mov.w	ip, #1
   bb670:	f815 4b01 	ldrb.w	r4, [r5], #1
   bb674:	e7e8      	b.n	bb648 <_strtol_l.constprop.0+0x6c>
   bb676:	2c2b      	cmp	r4, #43	; 0x2b
   bb678:	bf04      	itt	eq
   bb67a:	782c      	ldrbeq	r4, [r5, #0]
   bb67c:	1cb5      	addeq	r5, r6, #2
   bb67e:	e7ca      	b.n	bb616 <_strtol_l.constprop.0+0x3a>
   bb680:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bb684:	f1be 0f19 	cmp.w	lr, #25
   bb688:	d801      	bhi.n	bb68e <_strtol_l.constprop.0+0xb2>
   bb68a:	3c37      	subs	r4, #55	; 0x37
   bb68c:	e7e2      	b.n	bb654 <_strtol_l.constprop.0+0x78>
   bb68e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bb692:	f1be 0f19 	cmp.w	lr, #25
   bb696:	d804      	bhi.n	bb6a2 <_strtol_l.constprop.0+0xc6>
   bb698:	3c57      	subs	r4, #87	; 0x57
   bb69a:	e7db      	b.n	bb654 <_strtol_l.constprop.0+0x78>
   bb69c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bb6a0:	e7e6      	b.n	bb670 <_strtol_l.constprop.0+0x94>
   bb6a2:	f1bc 0f00 	cmp.w	ip, #0
   bb6a6:	da05      	bge.n	bb6b4 <_strtol_l.constprop.0+0xd8>
   bb6a8:	2322      	movs	r3, #34	; 0x22
   bb6aa:	6003      	str	r3, [r0, #0]
   bb6ac:	4646      	mov	r6, r8
   bb6ae:	b942      	cbnz	r2, bb6c2 <_strtol_l.constprop.0+0xe6>
   bb6b0:	4630      	mov	r0, r6
   bb6b2:	e79e      	b.n	bb5f2 <_strtol_l.constprop.0+0x16>
   bb6b4:	b107      	cbz	r7, bb6b8 <_strtol_l.constprop.0+0xdc>
   bb6b6:	4276      	negs	r6, r6
   bb6b8:	2a00      	cmp	r2, #0
   bb6ba:	d0f9      	beq.n	bb6b0 <_strtol_l.constprop.0+0xd4>
   bb6bc:	f1bc 0f00 	cmp.w	ip, #0
   bb6c0:	d000      	beq.n	bb6c4 <_strtol_l.constprop.0+0xe8>
   bb6c2:	1e69      	subs	r1, r5, #1
   bb6c4:	6011      	str	r1, [r2, #0]
   bb6c6:	e7f3      	b.n	bb6b0 <_strtol_l.constprop.0+0xd4>
   bb6c8:	2430      	movs	r4, #48	; 0x30
   bb6ca:	2b00      	cmp	r3, #0
   bb6cc:	d1b1      	bne.n	bb632 <_strtol_l.constprop.0+0x56>
   bb6ce:	2308      	movs	r3, #8
   bb6d0:	e7af      	b.n	bb632 <_strtol_l.constprop.0+0x56>
   bb6d2:	2c30      	cmp	r4, #48	; 0x30
   bb6d4:	d0a5      	beq.n	bb622 <_strtol_l.constprop.0+0x46>
   bb6d6:	230a      	movs	r3, #10
   bb6d8:	e7ab      	b.n	bb632 <_strtol_l.constprop.0+0x56>
   bb6da:	bf00      	nop
   bb6dc:	000bdaa1 	.word	0x000bdaa1

000bb6e0 <strtol>:
   bb6e0:	4613      	mov	r3, r2
   bb6e2:	460a      	mov	r2, r1
   bb6e4:	4601      	mov	r1, r0
   bb6e6:	4802      	ldr	r0, [pc, #8]	; (bb6f0 <strtol+0x10>)
   bb6e8:	6800      	ldr	r0, [r0, #0]
   bb6ea:	f7ff bf77 	b.w	bb5dc <_strtol_l.constprop.0>
   bb6ee:	bf00      	nop
   bb6f0:	2003e354 	.word	0x2003e354

000bb6f4 <__register_exitproc>:
   bb6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bb6f8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bb7b4 <__register_exitproc+0xc0>
   bb6fc:	4606      	mov	r6, r0
   bb6fe:	f8d8 0000 	ldr.w	r0, [r8]
   bb702:	461f      	mov	r7, r3
   bb704:	460d      	mov	r5, r1
   bb706:	4691      	mov	r9, r2
   bb708:	f000 fbc6 	bl	bbe98 <__retarget_lock_acquire_recursive>
   bb70c:	4b25      	ldr	r3, [pc, #148]	; (bb7a4 <__register_exitproc+0xb0>)
   bb70e:	681c      	ldr	r4, [r3, #0]
   bb710:	b934      	cbnz	r4, bb720 <__register_exitproc+0x2c>
   bb712:	4c25      	ldr	r4, [pc, #148]	; (bb7a8 <__register_exitproc+0xb4>)
   bb714:	601c      	str	r4, [r3, #0]
   bb716:	4b25      	ldr	r3, [pc, #148]	; (bb7ac <__register_exitproc+0xb8>)
   bb718:	b113      	cbz	r3, bb720 <__register_exitproc+0x2c>
   bb71a:	681b      	ldr	r3, [r3, #0]
   bb71c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bb720:	6863      	ldr	r3, [r4, #4]
   bb722:	2b1f      	cmp	r3, #31
   bb724:	dd07      	ble.n	bb736 <__register_exitproc+0x42>
   bb726:	f8d8 0000 	ldr.w	r0, [r8]
   bb72a:	f000 fbb7 	bl	bbe9c <__retarget_lock_release_recursive>
   bb72e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bb732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bb736:	b34e      	cbz	r6, bb78c <__register_exitproc+0x98>
   bb738:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bb73c:	b988      	cbnz	r0, bb762 <__register_exitproc+0x6e>
   bb73e:	4b1c      	ldr	r3, [pc, #112]	; (bb7b0 <__register_exitproc+0xbc>)
   bb740:	b923      	cbnz	r3, bb74c <__register_exitproc+0x58>
   bb742:	f8d8 0000 	ldr.w	r0, [r8]
   bb746:	f000 fba8 	bl	bbe9a <__retarget_lock_release>
   bb74a:	e7f0      	b.n	bb72e <__register_exitproc+0x3a>
   bb74c:	f44f 7084 	mov.w	r0, #264	; 0x108
   bb750:	f7fb fd96 	bl	b7280 <malloc>
   bb754:	2800      	cmp	r0, #0
   bb756:	d0f4      	beq.n	bb742 <__register_exitproc+0x4e>
   bb758:	2300      	movs	r3, #0
   bb75a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bb75e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bb762:	6863      	ldr	r3, [r4, #4]
   bb764:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bb768:	2201      	movs	r2, #1
   bb76a:	409a      	lsls	r2, r3
   bb76c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bb770:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bb774:	4313      	orrs	r3, r2
   bb776:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bb77a:	2e02      	cmp	r6, #2
   bb77c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bb780:	bf02      	ittt	eq
   bb782:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bb786:	4313      	orreq	r3, r2
   bb788:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bb78c:	6863      	ldr	r3, [r4, #4]
   bb78e:	f8d8 0000 	ldr.w	r0, [r8]
   bb792:	1c5a      	adds	r2, r3, #1
   bb794:	3302      	adds	r3, #2
   bb796:	6062      	str	r2, [r4, #4]
   bb798:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bb79c:	f000 fb7e 	bl	bbe9c <__retarget_lock_release_recursive>
   bb7a0:	2000      	movs	r0, #0
   bb7a2:	e7c6      	b.n	bb732 <__register_exitproc+0x3e>
   bb7a4:	2003e7e8 	.word	0x2003e7e8
   bb7a8:	2003e75c 	.word	0x2003e75c
   bb7ac:	00000000 	.word	0x00000000
   bb7b0:	000b7281 	.word	0x000b7281
   bb7b4:	2003e3b8 	.word	0x2003e3b8

000bb7b8 <rshift>:
   bb7b8:	6903      	ldr	r3, [r0, #16]
   bb7ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bb7be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb7c2:	ea4f 1261 	mov.w	r2, r1, asr #5
   bb7c6:	f100 0414 	add.w	r4, r0, #20
   bb7ca:	dd45      	ble.n	bb858 <rshift+0xa0>
   bb7cc:	f011 011f 	ands.w	r1, r1, #31
   bb7d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bb7d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bb7d8:	d10c      	bne.n	bb7f4 <rshift+0x3c>
   bb7da:	f100 0710 	add.w	r7, r0, #16
   bb7de:	4629      	mov	r1, r5
   bb7e0:	42b1      	cmp	r1, r6
   bb7e2:	d334      	bcc.n	bb84e <rshift+0x96>
   bb7e4:	1a9b      	subs	r3, r3, r2
   bb7e6:	009b      	lsls	r3, r3, #2
   bb7e8:	1eea      	subs	r2, r5, #3
   bb7ea:	4296      	cmp	r6, r2
   bb7ec:	bf38      	it	cc
   bb7ee:	2300      	movcc	r3, #0
   bb7f0:	4423      	add	r3, r4
   bb7f2:	e015      	b.n	bb820 <rshift+0x68>
   bb7f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bb7f8:	f1c1 0820 	rsb	r8, r1, #32
   bb7fc:	40cf      	lsrs	r7, r1
   bb7fe:	f105 0e04 	add.w	lr, r5, #4
   bb802:	46a1      	mov	r9, r4
   bb804:	4576      	cmp	r6, lr
   bb806:	46f4      	mov	ip, lr
   bb808:	d815      	bhi.n	bb836 <rshift+0x7e>
   bb80a:	1a9a      	subs	r2, r3, r2
   bb80c:	0092      	lsls	r2, r2, #2
   bb80e:	3a04      	subs	r2, #4
   bb810:	3501      	adds	r5, #1
   bb812:	42ae      	cmp	r6, r5
   bb814:	bf38      	it	cc
   bb816:	2200      	movcc	r2, #0
   bb818:	18a3      	adds	r3, r4, r2
   bb81a:	50a7      	str	r7, [r4, r2]
   bb81c:	b107      	cbz	r7, bb820 <rshift+0x68>
   bb81e:	3304      	adds	r3, #4
   bb820:	1b1a      	subs	r2, r3, r4
   bb822:	42a3      	cmp	r3, r4
   bb824:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bb828:	bf08      	it	eq
   bb82a:	2300      	moveq	r3, #0
   bb82c:	6102      	str	r2, [r0, #16]
   bb82e:	bf08      	it	eq
   bb830:	6143      	streq	r3, [r0, #20]
   bb832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bb836:	f8dc c000 	ldr.w	ip, [ip]
   bb83a:	fa0c fc08 	lsl.w	ip, ip, r8
   bb83e:	ea4c 0707 	orr.w	r7, ip, r7
   bb842:	f849 7b04 	str.w	r7, [r9], #4
   bb846:	f85e 7b04 	ldr.w	r7, [lr], #4
   bb84a:	40cf      	lsrs	r7, r1
   bb84c:	e7da      	b.n	bb804 <rshift+0x4c>
   bb84e:	f851 cb04 	ldr.w	ip, [r1], #4
   bb852:	f847 cf04 	str.w	ip, [r7, #4]!
   bb856:	e7c3      	b.n	bb7e0 <rshift+0x28>
   bb858:	4623      	mov	r3, r4
   bb85a:	e7e1      	b.n	bb820 <rshift+0x68>

000bb85c <__hexdig_fun>:
   bb85c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bb860:	2b09      	cmp	r3, #9
   bb862:	d802      	bhi.n	bb86a <__hexdig_fun+0xe>
   bb864:	3820      	subs	r0, #32
   bb866:	b2c0      	uxtb	r0, r0
   bb868:	4770      	bx	lr
   bb86a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bb86e:	2b05      	cmp	r3, #5
   bb870:	d801      	bhi.n	bb876 <__hexdig_fun+0x1a>
   bb872:	3847      	subs	r0, #71	; 0x47
   bb874:	e7f7      	b.n	bb866 <__hexdig_fun+0xa>
   bb876:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bb87a:	2b05      	cmp	r3, #5
   bb87c:	d801      	bhi.n	bb882 <__hexdig_fun+0x26>
   bb87e:	3827      	subs	r0, #39	; 0x27
   bb880:	e7f1      	b.n	bb866 <__hexdig_fun+0xa>
   bb882:	2000      	movs	r0, #0
   bb884:	4770      	bx	lr
	...

000bb888 <__gethex>:
   bb888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb88c:	ed2d 8b02 	vpush	{d8}
   bb890:	b089      	sub	sp, #36	; 0x24
   bb892:	ee08 0a10 	vmov	s16, r0
   bb896:	9304      	str	r3, [sp, #16]
   bb898:	4bb4      	ldr	r3, [pc, #720]	; (bbb6c <__gethex+0x2e4>)
   bb89a:	681b      	ldr	r3, [r3, #0]
   bb89c:	9301      	str	r3, [sp, #4]
   bb89e:	4618      	mov	r0, r3
   bb8a0:	468b      	mov	fp, r1
   bb8a2:	4690      	mov	r8, r2
   bb8a4:	f7f9 f8aa 	bl	b49fc <strlen>
   bb8a8:	9b01      	ldr	r3, [sp, #4]
   bb8aa:	f8db 2000 	ldr.w	r2, [fp]
   bb8ae:	4403      	add	r3, r0
   bb8b0:	4682      	mov	sl, r0
   bb8b2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bb8b6:	9305      	str	r3, [sp, #20]
   bb8b8:	1c93      	adds	r3, r2, #2
   bb8ba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bb8be:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bb8c2:	32fe      	adds	r2, #254	; 0xfe
   bb8c4:	18d1      	adds	r1, r2, r3
   bb8c6:	461f      	mov	r7, r3
   bb8c8:	f813 0b01 	ldrb.w	r0, [r3], #1
   bb8cc:	9100      	str	r1, [sp, #0]
   bb8ce:	2830      	cmp	r0, #48	; 0x30
   bb8d0:	d0f8      	beq.n	bb8c4 <__gethex+0x3c>
   bb8d2:	f7ff ffc3 	bl	bb85c <__hexdig_fun>
   bb8d6:	4604      	mov	r4, r0
   bb8d8:	2800      	cmp	r0, #0
   bb8da:	d13a      	bne.n	bb952 <__gethex+0xca>
   bb8dc:	9901      	ldr	r1, [sp, #4]
   bb8de:	4652      	mov	r2, sl
   bb8e0:	4638      	mov	r0, r7
   bb8e2:	f7ff f818 	bl	ba916 <strncmp>
   bb8e6:	4605      	mov	r5, r0
   bb8e8:	2800      	cmp	r0, #0
   bb8ea:	d168      	bne.n	bb9be <__gethex+0x136>
   bb8ec:	f817 000a 	ldrb.w	r0, [r7, sl]
   bb8f0:	eb07 060a 	add.w	r6, r7, sl
   bb8f4:	f7ff ffb2 	bl	bb85c <__hexdig_fun>
   bb8f8:	2800      	cmp	r0, #0
   bb8fa:	d062      	beq.n	bb9c2 <__gethex+0x13a>
   bb8fc:	4633      	mov	r3, r6
   bb8fe:	7818      	ldrb	r0, [r3, #0]
   bb900:	2830      	cmp	r0, #48	; 0x30
   bb902:	461f      	mov	r7, r3
   bb904:	f103 0301 	add.w	r3, r3, #1
   bb908:	d0f9      	beq.n	bb8fe <__gethex+0x76>
   bb90a:	f7ff ffa7 	bl	bb85c <__hexdig_fun>
   bb90e:	2301      	movs	r3, #1
   bb910:	fab0 f480 	clz	r4, r0
   bb914:	0964      	lsrs	r4, r4, #5
   bb916:	4635      	mov	r5, r6
   bb918:	9300      	str	r3, [sp, #0]
   bb91a:	463a      	mov	r2, r7
   bb91c:	4616      	mov	r6, r2
   bb91e:	3201      	adds	r2, #1
   bb920:	7830      	ldrb	r0, [r6, #0]
   bb922:	f7ff ff9b 	bl	bb85c <__hexdig_fun>
   bb926:	2800      	cmp	r0, #0
   bb928:	d1f8      	bne.n	bb91c <__gethex+0x94>
   bb92a:	9901      	ldr	r1, [sp, #4]
   bb92c:	4652      	mov	r2, sl
   bb92e:	4630      	mov	r0, r6
   bb930:	f7fe fff1 	bl	ba916 <strncmp>
   bb934:	b980      	cbnz	r0, bb958 <__gethex+0xd0>
   bb936:	b94d      	cbnz	r5, bb94c <__gethex+0xc4>
   bb938:	eb06 050a 	add.w	r5, r6, sl
   bb93c:	462a      	mov	r2, r5
   bb93e:	4616      	mov	r6, r2
   bb940:	3201      	adds	r2, #1
   bb942:	7830      	ldrb	r0, [r6, #0]
   bb944:	f7ff ff8a 	bl	bb85c <__hexdig_fun>
   bb948:	2800      	cmp	r0, #0
   bb94a:	d1f8      	bne.n	bb93e <__gethex+0xb6>
   bb94c:	1bad      	subs	r5, r5, r6
   bb94e:	00ad      	lsls	r5, r5, #2
   bb950:	e004      	b.n	bb95c <__gethex+0xd4>
   bb952:	2400      	movs	r4, #0
   bb954:	4625      	mov	r5, r4
   bb956:	e7e0      	b.n	bb91a <__gethex+0x92>
   bb958:	2d00      	cmp	r5, #0
   bb95a:	d1f7      	bne.n	bb94c <__gethex+0xc4>
   bb95c:	7833      	ldrb	r3, [r6, #0]
   bb95e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bb962:	2b50      	cmp	r3, #80	; 0x50
   bb964:	d13b      	bne.n	bb9de <__gethex+0x156>
   bb966:	7873      	ldrb	r3, [r6, #1]
   bb968:	2b2b      	cmp	r3, #43	; 0x2b
   bb96a:	d02c      	beq.n	bb9c6 <__gethex+0x13e>
   bb96c:	2b2d      	cmp	r3, #45	; 0x2d
   bb96e:	d02e      	beq.n	bb9ce <__gethex+0x146>
   bb970:	1c71      	adds	r1, r6, #1
   bb972:	f04f 0900 	mov.w	r9, #0
   bb976:	7808      	ldrb	r0, [r1, #0]
   bb978:	f7ff ff70 	bl	bb85c <__hexdig_fun>
   bb97c:	1e43      	subs	r3, r0, #1
   bb97e:	b2db      	uxtb	r3, r3
   bb980:	2b18      	cmp	r3, #24
   bb982:	d82c      	bhi.n	bb9de <__gethex+0x156>
   bb984:	f1a0 0210 	sub.w	r2, r0, #16
   bb988:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bb98c:	f7ff ff66 	bl	bb85c <__hexdig_fun>
   bb990:	1e43      	subs	r3, r0, #1
   bb992:	b2db      	uxtb	r3, r3
   bb994:	2b18      	cmp	r3, #24
   bb996:	d91d      	bls.n	bb9d4 <__gethex+0x14c>
   bb998:	f1b9 0f00 	cmp.w	r9, #0
   bb99c:	d000      	beq.n	bb9a0 <__gethex+0x118>
   bb99e:	4252      	negs	r2, r2
   bb9a0:	4415      	add	r5, r2
   bb9a2:	f8cb 1000 	str.w	r1, [fp]
   bb9a6:	b1e4      	cbz	r4, bb9e2 <__gethex+0x15a>
   bb9a8:	9b00      	ldr	r3, [sp, #0]
   bb9aa:	2b00      	cmp	r3, #0
   bb9ac:	bf14      	ite	ne
   bb9ae:	2700      	movne	r7, #0
   bb9b0:	2706      	moveq	r7, #6
   bb9b2:	4638      	mov	r0, r7
   bb9b4:	b009      	add	sp, #36	; 0x24
   bb9b6:	ecbd 8b02 	vpop	{d8}
   bb9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb9be:	463e      	mov	r6, r7
   bb9c0:	4625      	mov	r5, r4
   bb9c2:	2401      	movs	r4, #1
   bb9c4:	e7ca      	b.n	bb95c <__gethex+0xd4>
   bb9c6:	f04f 0900 	mov.w	r9, #0
   bb9ca:	1cb1      	adds	r1, r6, #2
   bb9cc:	e7d3      	b.n	bb976 <__gethex+0xee>
   bb9ce:	f04f 0901 	mov.w	r9, #1
   bb9d2:	e7fa      	b.n	bb9ca <__gethex+0x142>
   bb9d4:	230a      	movs	r3, #10
   bb9d6:	fb03 0202 	mla	r2, r3, r2, r0
   bb9da:	3a10      	subs	r2, #16
   bb9dc:	e7d4      	b.n	bb988 <__gethex+0x100>
   bb9de:	4631      	mov	r1, r6
   bb9e0:	e7df      	b.n	bb9a2 <__gethex+0x11a>
   bb9e2:	1bf3      	subs	r3, r6, r7
   bb9e4:	3b01      	subs	r3, #1
   bb9e6:	4621      	mov	r1, r4
   bb9e8:	2b07      	cmp	r3, #7
   bb9ea:	dc0b      	bgt.n	bba04 <__gethex+0x17c>
   bb9ec:	ee18 0a10 	vmov	r0, s16
   bb9f0:	f000 fa68 	bl	bbec4 <_Balloc>
   bb9f4:	4604      	mov	r4, r0
   bb9f6:	b940      	cbnz	r0, bba0a <__gethex+0x182>
   bb9f8:	4b5d      	ldr	r3, [pc, #372]	; (bbb70 <__gethex+0x2e8>)
   bb9fa:	4602      	mov	r2, r0
   bb9fc:	21de      	movs	r1, #222	; 0xde
   bb9fe:	485d      	ldr	r0, [pc, #372]	; (bbb74 <__gethex+0x2ec>)
   bba00:	f7fb fc76 	bl	b72f0 <__assert_func>
   bba04:	3101      	adds	r1, #1
   bba06:	105b      	asrs	r3, r3, #1
   bba08:	e7ee      	b.n	bb9e8 <__gethex+0x160>
   bba0a:	f100 0914 	add.w	r9, r0, #20
   bba0e:	f04f 0b00 	mov.w	fp, #0
   bba12:	f1ca 0301 	rsb	r3, sl, #1
   bba16:	f8cd 9008 	str.w	r9, [sp, #8]
   bba1a:	f8cd b000 	str.w	fp, [sp]
   bba1e:	9306      	str	r3, [sp, #24]
   bba20:	42b7      	cmp	r7, r6
   bba22:	d340      	bcc.n	bbaa6 <__gethex+0x21e>
   bba24:	9802      	ldr	r0, [sp, #8]
   bba26:	9b00      	ldr	r3, [sp, #0]
   bba28:	f840 3b04 	str.w	r3, [r0], #4
   bba2c:	eba0 0009 	sub.w	r0, r0, r9
   bba30:	1080      	asrs	r0, r0, #2
   bba32:	0146      	lsls	r6, r0, #5
   bba34:	6120      	str	r0, [r4, #16]
   bba36:	4618      	mov	r0, r3
   bba38:	f000 fb36 	bl	bc0a8 <__hi0bits>
   bba3c:	1a30      	subs	r0, r6, r0
   bba3e:	f8d8 6000 	ldr.w	r6, [r8]
   bba42:	42b0      	cmp	r0, r6
   bba44:	dd63      	ble.n	bbb0e <__gethex+0x286>
   bba46:	1b87      	subs	r7, r0, r6
   bba48:	4639      	mov	r1, r7
   bba4a:	4620      	mov	r0, r4
   bba4c:	f000 feda 	bl	bc804 <__any_on>
   bba50:	4682      	mov	sl, r0
   bba52:	b1a8      	cbz	r0, bba80 <__gethex+0x1f8>
   bba54:	1e7b      	subs	r3, r7, #1
   bba56:	1159      	asrs	r1, r3, #5
   bba58:	f003 021f 	and.w	r2, r3, #31
   bba5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bba60:	f04f 0a01 	mov.w	sl, #1
   bba64:	fa0a f202 	lsl.w	r2, sl, r2
   bba68:	420a      	tst	r2, r1
   bba6a:	d009      	beq.n	bba80 <__gethex+0x1f8>
   bba6c:	4553      	cmp	r3, sl
   bba6e:	dd05      	ble.n	bba7c <__gethex+0x1f4>
   bba70:	1eb9      	subs	r1, r7, #2
   bba72:	4620      	mov	r0, r4
   bba74:	f000 fec6 	bl	bc804 <__any_on>
   bba78:	2800      	cmp	r0, #0
   bba7a:	d145      	bne.n	bbb08 <__gethex+0x280>
   bba7c:	f04f 0a02 	mov.w	sl, #2
   bba80:	4639      	mov	r1, r7
   bba82:	4620      	mov	r0, r4
   bba84:	f7ff fe98 	bl	bb7b8 <rshift>
   bba88:	443d      	add	r5, r7
   bba8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bba8e:	42ab      	cmp	r3, r5
   bba90:	da4c      	bge.n	bbb2c <__gethex+0x2a4>
   bba92:	ee18 0a10 	vmov	r0, s16
   bba96:	4621      	mov	r1, r4
   bba98:	f000 fa54 	bl	bbf44 <_Bfree>
   bba9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bba9e:	2300      	movs	r3, #0
   bbaa0:	6013      	str	r3, [r2, #0]
   bbaa2:	27a3      	movs	r7, #163	; 0xa3
   bbaa4:	e785      	b.n	bb9b2 <__gethex+0x12a>
   bbaa6:	1e73      	subs	r3, r6, #1
   bbaa8:	9a05      	ldr	r2, [sp, #20]
   bbaaa:	9303      	str	r3, [sp, #12]
   bbaac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bbab0:	4293      	cmp	r3, r2
   bbab2:	d019      	beq.n	bbae8 <__gethex+0x260>
   bbab4:	f1bb 0f20 	cmp.w	fp, #32
   bbab8:	d107      	bne.n	bbaca <__gethex+0x242>
   bbaba:	9b02      	ldr	r3, [sp, #8]
   bbabc:	9a00      	ldr	r2, [sp, #0]
   bbabe:	f843 2b04 	str.w	r2, [r3], #4
   bbac2:	9302      	str	r3, [sp, #8]
   bbac4:	2300      	movs	r3, #0
   bbac6:	9300      	str	r3, [sp, #0]
   bbac8:	469b      	mov	fp, r3
   bbaca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bbace:	f7ff fec5 	bl	bb85c <__hexdig_fun>
   bbad2:	9b00      	ldr	r3, [sp, #0]
   bbad4:	f000 000f 	and.w	r0, r0, #15
   bbad8:	fa00 f00b 	lsl.w	r0, r0, fp
   bbadc:	4303      	orrs	r3, r0
   bbade:	9300      	str	r3, [sp, #0]
   bbae0:	f10b 0b04 	add.w	fp, fp, #4
   bbae4:	9b03      	ldr	r3, [sp, #12]
   bbae6:	e00d      	b.n	bbb04 <__gethex+0x27c>
   bbae8:	9b03      	ldr	r3, [sp, #12]
   bbaea:	9a06      	ldr	r2, [sp, #24]
   bbaec:	4413      	add	r3, r2
   bbaee:	42bb      	cmp	r3, r7
   bbaf0:	d3e0      	bcc.n	bbab4 <__gethex+0x22c>
   bbaf2:	4618      	mov	r0, r3
   bbaf4:	9901      	ldr	r1, [sp, #4]
   bbaf6:	9307      	str	r3, [sp, #28]
   bbaf8:	4652      	mov	r2, sl
   bbafa:	f7fe ff0c 	bl	ba916 <strncmp>
   bbafe:	9b07      	ldr	r3, [sp, #28]
   bbb00:	2800      	cmp	r0, #0
   bbb02:	d1d7      	bne.n	bbab4 <__gethex+0x22c>
   bbb04:	461e      	mov	r6, r3
   bbb06:	e78b      	b.n	bba20 <__gethex+0x198>
   bbb08:	f04f 0a03 	mov.w	sl, #3
   bbb0c:	e7b8      	b.n	bba80 <__gethex+0x1f8>
   bbb0e:	da0a      	bge.n	bbb26 <__gethex+0x29e>
   bbb10:	1a37      	subs	r7, r6, r0
   bbb12:	4621      	mov	r1, r4
   bbb14:	ee18 0a10 	vmov	r0, s16
   bbb18:	463a      	mov	r2, r7
   bbb1a:	f000 fc2f 	bl	bc37c <__lshift>
   bbb1e:	1bed      	subs	r5, r5, r7
   bbb20:	4604      	mov	r4, r0
   bbb22:	f100 0914 	add.w	r9, r0, #20
   bbb26:	f04f 0a00 	mov.w	sl, #0
   bbb2a:	e7ae      	b.n	bba8a <__gethex+0x202>
   bbb2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bbb30:	42a8      	cmp	r0, r5
   bbb32:	dd72      	ble.n	bbc1a <__gethex+0x392>
   bbb34:	1b45      	subs	r5, r0, r5
   bbb36:	42ae      	cmp	r6, r5
   bbb38:	dc36      	bgt.n	bbba8 <__gethex+0x320>
   bbb3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bbb3e:	2b02      	cmp	r3, #2
   bbb40:	d02a      	beq.n	bbb98 <__gethex+0x310>
   bbb42:	2b03      	cmp	r3, #3
   bbb44:	d02c      	beq.n	bbba0 <__gethex+0x318>
   bbb46:	2b01      	cmp	r3, #1
   bbb48:	d11c      	bne.n	bbb84 <__gethex+0x2fc>
   bbb4a:	42ae      	cmp	r6, r5
   bbb4c:	d11a      	bne.n	bbb84 <__gethex+0x2fc>
   bbb4e:	2e01      	cmp	r6, #1
   bbb50:	d112      	bne.n	bbb78 <__gethex+0x2f0>
   bbb52:	9a04      	ldr	r2, [sp, #16]
   bbb54:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bbb58:	6013      	str	r3, [r2, #0]
   bbb5a:	2301      	movs	r3, #1
   bbb5c:	6123      	str	r3, [r4, #16]
   bbb5e:	f8c9 3000 	str.w	r3, [r9]
   bbb62:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbb64:	2762      	movs	r7, #98	; 0x62
   bbb66:	601c      	str	r4, [r3, #0]
   bbb68:	e723      	b.n	bb9b2 <__gethex+0x12a>
   bbb6a:	bf00      	nop
   bbb6c:	000bdc14 	.word	0x000bdc14
   bbb70:	000bdba1 	.word	0x000bdba1
   bbb74:	000bdbb2 	.word	0x000bdbb2
   bbb78:	1e71      	subs	r1, r6, #1
   bbb7a:	4620      	mov	r0, r4
   bbb7c:	f000 fe42 	bl	bc804 <__any_on>
   bbb80:	2800      	cmp	r0, #0
   bbb82:	d1e6      	bne.n	bbb52 <__gethex+0x2ca>
   bbb84:	ee18 0a10 	vmov	r0, s16
   bbb88:	4621      	mov	r1, r4
   bbb8a:	f000 f9db 	bl	bbf44 <_Bfree>
   bbb8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bbb90:	2300      	movs	r3, #0
   bbb92:	6013      	str	r3, [r2, #0]
   bbb94:	2750      	movs	r7, #80	; 0x50
   bbb96:	e70c      	b.n	bb9b2 <__gethex+0x12a>
   bbb98:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbb9a:	2b00      	cmp	r3, #0
   bbb9c:	d1f2      	bne.n	bbb84 <__gethex+0x2fc>
   bbb9e:	e7d8      	b.n	bbb52 <__gethex+0x2ca>
   bbba0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbba2:	2b00      	cmp	r3, #0
   bbba4:	d1d5      	bne.n	bbb52 <__gethex+0x2ca>
   bbba6:	e7ed      	b.n	bbb84 <__gethex+0x2fc>
   bbba8:	1e6f      	subs	r7, r5, #1
   bbbaa:	f1ba 0f00 	cmp.w	sl, #0
   bbbae:	d131      	bne.n	bbc14 <__gethex+0x38c>
   bbbb0:	b127      	cbz	r7, bbbbc <__gethex+0x334>
   bbbb2:	4639      	mov	r1, r7
   bbbb4:	4620      	mov	r0, r4
   bbbb6:	f000 fe25 	bl	bc804 <__any_on>
   bbbba:	4682      	mov	sl, r0
   bbbbc:	117b      	asrs	r3, r7, #5
   bbbbe:	2101      	movs	r1, #1
   bbbc0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bbbc4:	f007 071f 	and.w	r7, r7, #31
   bbbc8:	fa01 f707 	lsl.w	r7, r1, r7
   bbbcc:	421f      	tst	r7, r3
   bbbce:	4629      	mov	r1, r5
   bbbd0:	4620      	mov	r0, r4
   bbbd2:	bf18      	it	ne
   bbbd4:	f04a 0a02 	orrne.w	sl, sl, #2
   bbbd8:	1b76      	subs	r6, r6, r5
   bbbda:	f7ff fded 	bl	bb7b8 <rshift>
   bbbde:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bbbe2:	2702      	movs	r7, #2
   bbbe4:	f1ba 0f00 	cmp.w	sl, #0
   bbbe8:	d048      	beq.n	bbc7c <__gethex+0x3f4>
   bbbea:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bbbee:	2b02      	cmp	r3, #2
   bbbf0:	d015      	beq.n	bbc1e <__gethex+0x396>
   bbbf2:	2b03      	cmp	r3, #3
   bbbf4:	d017      	beq.n	bbc26 <__gethex+0x39e>
   bbbf6:	2b01      	cmp	r3, #1
   bbbf8:	d109      	bne.n	bbc0e <__gethex+0x386>
   bbbfa:	f01a 0f02 	tst.w	sl, #2
   bbbfe:	d006      	beq.n	bbc0e <__gethex+0x386>
   bbc00:	f8d9 0000 	ldr.w	r0, [r9]
   bbc04:	ea4a 0a00 	orr.w	sl, sl, r0
   bbc08:	f01a 0f01 	tst.w	sl, #1
   bbc0c:	d10e      	bne.n	bbc2c <__gethex+0x3a4>
   bbc0e:	f047 0710 	orr.w	r7, r7, #16
   bbc12:	e033      	b.n	bbc7c <__gethex+0x3f4>
   bbc14:	f04f 0a01 	mov.w	sl, #1
   bbc18:	e7d0      	b.n	bbbbc <__gethex+0x334>
   bbc1a:	2701      	movs	r7, #1
   bbc1c:	e7e2      	b.n	bbbe4 <__gethex+0x35c>
   bbc1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbc20:	f1c3 0301 	rsb	r3, r3, #1
   bbc24:	9315      	str	r3, [sp, #84]	; 0x54
   bbc26:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bbc28:	2b00      	cmp	r3, #0
   bbc2a:	d0f0      	beq.n	bbc0e <__gethex+0x386>
   bbc2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bbc30:	f104 0314 	add.w	r3, r4, #20
   bbc34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bbc38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bbc3c:	f04f 0c00 	mov.w	ip, #0
   bbc40:	4618      	mov	r0, r3
   bbc42:	f853 2b04 	ldr.w	r2, [r3], #4
   bbc46:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bbc4a:	d01c      	beq.n	bbc86 <__gethex+0x3fe>
   bbc4c:	3201      	adds	r2, #1
   bbc4e:	6002      	str	r2, [r0, #0]
   bbc50:	2f02      	cmp	r7, #2
   bbc52:	f104 0314 	add.w	r3, r4, #20
   bbc56:	d13f      	bne.n	bbcd8 <__gethex+0x450>
   bbc58:	f8d8 2000 	ldr.w	r2, [r8]
   bbc5c:	3a01      	subs	r2, #1
   bbc5e:	42b2      	cmp	r2, r6
   bbc60:	d10a      	bne.n	bbc78 <__gethex+0x3f0>
   bbc62:	1171      	asrs	r1, r6, #5
   bbc64:	2201      	movs	r2, #1
   bbc66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bbc6a:	f006 061f 	and.w	r6, r6, #31
   bbc6e:	fa02 f606 	lsl.w	r6, r2, r6
   bbc72:	421e      	tst	r6, r3
   bbc74:	bf18      	it	ne
   bbc76:	4617      	movne	r7, r2
   bbc78:	f047 0720 	orr.w	r7, r7, #32
   bbc7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bbc7e:	601c      	str	r4, [r3, #0]
   bbc80:	9b04      	ldr	r3, [sp, #16]
   bbc82:	601d      	str	r5, [r3, #0]
   bbc84:	e695      	b.n	bb9b2 <__gethex+0x12a>
   bbc86:	4299      	cmp	r1, r3
   bbc88:	f843 cc04 	str.w	ip, [r3, #-4]
   bbc8c:	d8d8      	bhi.n	bbc40 <__gethex+0x3b8>
   bbc8e:	68a3      	ldr	r3, [r4, #8]
   bbc90:	459b      	cmp	fp, r3
   bbc92:	db19      	blt.n	bbcc8 <__gethex+0x440>
   bbc94:	6861      	ldr	r1, [r4, #4]
   bbc96:	ee18 0a10 	vmov	r0, s16
   bbc9a:	3101      	adds	r1, #1
   bbc9c:	f000 f912 	bl	bbec4 <_Balloc>
   bbca0:	4681      	mov	r9, r0
   bbca2:	b918      	cbnz	r0, bbcac <__gethex+0x424>
   bbca4:	4b1a      	ldr	r3, [pc, #104]	; (bbd10 <__gethex+0x488>)
   bbca6:	4602      	mov	r2, r0
   bbca8:	2184      	movs	r1, #132	; 0x84
   bbcaa:	e6a8      	b.n	bb9fe <__gethex+0x176>
   bbcac:	6922      	ldr	r2, [r4, #16]
   bbcae:	3202      	adds	r2, #2
   bbcb0:	f104 010c 	add.w	r1, r4, #12
   bbcb4:	0092      	lsls	r2, r2, #2
   bbcb6:	300c      	adds	r0, #12
   bbcb8:	f7fe fdb0 	bl	ba81c <memcpy>
   bbcbc:	4621      	mov	r1, r4
   bbcbe:	ee18 0a10 	vmov	r0, s16
   bbcc2:	f000 f93f 	bl	bbf44 <_Bfree>
   bbcc6:	464c      	mov	r4, r9
   bbcc8:	6923      	ldr	r3, [r4, #16]
   bbcca:	1c5a      	adds	r2, r3, #1
   bbccc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bbcd0:	6122      	str	r2, [r4, #16]
   bbcd2:	2201      	movs	r2, #1
   bbcd4:	615a      	str	r2, [r3, #20]
   bbcd6:	e7bb      	b.n	bbc50 <__gethex+0x3c8>
   bbcd8:	6922      	ldr	r2, [r4, #16]
   bbcda:	455a      	cmp	r2, fp
   bbcdc:	dd0b      	ble.n	bbcf6 <__gethex+0x46e>
   bbcde:	2101      	movs	r1, #1
   bbce0:	4620      	mov	r0, r4
   bbce2:	f7ff fd69 	bl	bb7b8 <rshift>
   bbce6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bbcea:	3501      	adds	r5, #1
   bbcec:	42ab      	cmp	r3, r5
   bbcee:	f6ff aed0 	blt.w	bba92 <__gethex+0x20a>
   bbcf2:	2701      	movs	r7, #1
   bbcf4:	e7c0      	b.n	bbc78 <__gethex+0x3f0>
   bbcf6:	f016 061f 	ands.w	r6, r6, #31
   bbcfa:	d0fa      	beq.n	bbcf2 <__gethex+0x46a>
   bbcfc:	4453      	add	r3, sl
   bbcfe:	f1c6 0620 	rsb	r6, r6, #32
   bbd02:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bbd06:	f000 f9cf 	bl	bc0a8 <__hi0bits>
   bbd0a:	42b0      	cmp	r0, r6
   bbd0c:	dbe7      	blt.n	bbcde <__gethex+0x456>
   bbd0e:	e7f0      	b.n	bbcf2 <__gethex+0x46a>
   bbd10:	000bdba1 	.word	0x000bdba1

000bbd14 <L_shift>:
   bbd14:	f1c2 0208 	rsb	r2, r2, #8
   bbd18:	0092      	lsls	r2, r2, #2
   bbd1a:	b570      	push	{r4, r5, r6, lr}
   bbd1c:	f1c2 0620 	rsb	r6, r2, #32
   bbd20:	6843      	ldr	r3, [r0, #4]
   bbd22:	6804      	ldr	r4, [r0, #0]
   bbd24:	fa03 f506 	lsl.w	r5, r3, r6
   bbd28:	432c      	orrs	r4, r5
   bbd2a:	40d3      	lsrs	r3, r2
   bbd2c:	6004      	str	r4, [r0, #0]
   bbd2e:	f840 3f04 	str.w	r3, [r0, #4]!
   bbd32:	4288      	cmp	r0, r1
   bbd34:	d3f4      	bcc.n	bbd20 <L_shift+0xc>
   bbd36:	bd70      	pop	{r4, r5, r6, pc}

000bbd38 <__match>:
   bbd38:	b530      	push	{r4, r5, lr}
   bbd3a:	6803      	ldr	r3, [r0, #0]
   bbd3c:	3301      	adds	r3, #1
   bbd3e:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbd42:	b914      	cbnz	r4, bbd4a <__match+0x12>
   bbd44:	6003      	str	r3, [r0, #0]
   bbd46:	2001      	movs	r0, #1
   bbd48:	bd30      	pop	{r4, r5, pc}
   bbd4a:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbd4e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bbd52:	2d19      	cmp	r5, #25
   bbd54:	bf98      	it	ls
   bbd56:	3220      	addls	r2, #32
   bbd58:	42a2      	cmp	r2, r4
   bbd5a:	d0f0      	beq.n	bbd3e <__match+0x6>
   bbd5c:	2000      	movs	r0, #0
   bbd5e:	e7f3      	b.n	bbd48 <__match+0x10>

000bbd60 <__hexnan>:
   bbd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbd64:	680b      	ldr	r3, [r1, #0]
   bbd66:	115e      	asrs	r6, r3, #5
   bbd68:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bbd6c:	f013 031f 	ands.w	r3, r3, #31
   bbd70:	b087      	sub	sp, #28
   bbd72:	bf18      	it	ne
   bbd74:	3604      	addne	r6, #4
   bbd76:	2500      	movs	r5, #0
   bbd78:	1f37      	subs	r7, r6, #4
   bbd7a:	4690      	mov	r8, r2
   bbd7c:	6802      	ldr	r2, [r0, #0]
   bbd7e:	9301      	str	r3, [sp, #4]
   bbd80:	4682      	mov	sl, r0
   bbd82:	f846 5c04 	str.w	r5, [r6, #-4]
   bbd86:	46b9      	mov	r9, r7
   bbd88:	463c      	mov	r4, r7
   bbd8a:	9502      	str	r5, [sp, #8]
   bbd8c:	46ab      	mov	fp, r5
   bbd8e:	7851      	ldrb	r1, [r2, #1]
   bbd90:	1c53      	adds	r3, r2, #1
   bbd92:	9303      	str	r3, [sp, #12]
   bbd94:	b341      	cbz	r1, bbde8 <__hexnan+0x88>
   bbd96:	4608      	mov	r0, r1
   bbd98:	9205      	str	r2, [sp, #20]
   bbd9a:	9104      	str	r1, [sp, #16]
   bbd9c:	f7ff fd5e 	bl	bb85c <__hexdig_fun>
   bbda0:	2800      	cmp	r0, #0
   bbda2:	d14f      	bne.n	bbe44 <__hexnan+0xe4>
   bbda4:	9904      	ldr	r1, [sp, #16]
   bbda6:	9a05      	ldr	r2, [sp, #20]
   bbda8:	2920      	cmp	r1, #32
   bbdaa:	d818      	bhi.n	bbdde <__hexnan+0x7e>
   bbdac:	9b02      	ldr	r3, [sp, #8]
   bbdae:	459b      	cmp	fp, r3
   bbdb0:	dd13      	ble.n	bbdda <__hexnan+0x7a>
   bbdb2:	454c      	cmp	r4, r9
   bbdb4:	d206      	bcs.n	bbdc4 <__hexnan+0x64>
   bbdb6:	2d07      	cmp	r5, #7
   bbdb8:	dc04      	bgt.n	bbdc4 <__hexnan+0x64>
   bbdba:	462a      	mov	r2, r5
   bbdbc:	4649      	mov	r1, r9
   bbdbe:	4620      	mov	r0, r4
   bbdc0:	f7ff ffa8 	bl	bbd14 <L_shift>
   bbdc4:	4544      	cmp	r4, r8
   bbdc6:	d950      	bls.n	bbe6a <__hexnan+0x10a>
   bbdc8:	2300      	movs	r3, #0
   bbdca:	f1a4 0904 	sub.w	r9, r4, #4
   bbdce:	f844 3c04 	str.w	r3, [r4, #-4]
   bbdd2:	f8cd b008 	str.w	fp, [sp, #8]
   bbdd6:	464c      	mov	r4, r9
   bbdd8:	461d      	mov	r5, r3
   bbdda:	9a03      	ldr	r2, [sp, #12]
   bbddc:	e7d7      	b.n	bbd8e <__hexnan+0x2e>
   bbdde:	2929      	cmp	r1, #41	; 0x29
   bbde0:	d156      	bne.n	bbe90 <__hexnan+0x130>
   bbde2:	3202      	adds	r2, #2
   bbde4:	f8ca 2000 	str.w	r2, [sl]
   bbde8:	f1bb 0f00 	cmp.w	fp, #0
   bbdec:	d050      	beq.n	bbe90 <__hexnan+0x130>
   bbdee:	454c      	cmp	r4, r9
   bbdf0:	d206      	bcs.n	bbe00 <__hexnan+0xa0>
   bbdf2:	2d07      	cmp	r5, #7
   bbdf4:	dc04      	bgt.n	bbe00 <__hexnan+0xa0>
   bbdf6:	462a      	mov	r2, r5
   bbdf8:	4649      	mov	r1, r9
   bbdfa:	4620      	mov	r0, r4
   bbdfc:	f7ff ff8a 	bl	bbd14 <L_shift>
   bbe00:	4544      	cmp	r4, r8
   bbe02:	d934      	bls.n	bbe6e <__hexnan+0x10e>
   bbe04:	f1a8 0204 	sub.w	r2, r8, #4
   bbe08:	4623      	mov	r3, r4
   bbe0a:	f853 1b04 	ldr.w	r1, [r3], #4
   bbe0e:	f842 1f04 	str.w	r1, [r2, #4]!
   bbe12:	429f      	cmp	r7, r3
   bbe14:	d2f9      	bcs.n	bbe0a <__hexnan+0xaa>
   bbe16:	1b3b      	subs	r3, r7, r4
   bbe18:	f023 0303 	bic.w	r3, r3, #3
   bbe1c:	3304      	adds	r3, #4
   bbe1e:	3401      	adds	r4, #1
   bbe20:	3e03      	subs	r6, #3
   bbe22:	42b4      	cmp	r4, r6
   bbe24:	bf88      	it	hi
   bbe26:	2304      	movhi	r3, #4
   bbe28:	4443      	add	r3, r8
   bbe2a:	2200      	movs	r2, #0
   bbe2c:	f843 2b04 	str.w	r2, [r3], #4
   bbe30:	429f      	cmp	r7, r3
   bbe32:	d2fb      	bcs.n	bbe2c <__hexnan+0xcc>
   bbe34:	683b      	ldr	r3, [r7, #0]
   bbe36:	b91b      	cbnz	r3, bbe40 <__hexnan+0xe0>
   bbe38:	4547      	cmp	r7, r8
   bbe3a:	d127      	bne.n	bbe8c <__hexnan+0x12c>
   bbe3c:	2301      	movs	r3, #1
   bbe3e:	603b      	str	r3, [r7, #0]
   bbe40:	2005      	movs	r0, #5
   bbe42:	e026      	b.n	bbe92 <__hexnan+0x132>
   bbe44:	3501      	adds	r5, #1
   bbe46:	2d08      	cmp	r5, #8
   bbe48:	f10b 0b01 	add.w	fp, fp, #1
   bbe4c:	dd06      	ble.n	bbe5c <__hexnan+0xfc>
   bbe4e:	4544      	cmp	r4, r8
   bbe50:	d9c3      	bls.n	bbdda <__hexnan+0x7a>
   bbe52:	2300      	movs	r3, #0
   bbe54:	f844 3c04 	str.w	r3, [r4, #-4]
   bbe58:	2501      	movs	r5, #1
   bbe5a:	3c04      	subs	r4, #4
   bbe5c:	6822      	ldr	r2, [r4, #0]
   bbe5e:	f000 000f 	and.w	r0, r0, #15
   bbe62:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bbe66:	6022      	str	r2, [r4, #0]
   bbe68:	e7b7      	b.n	bbdda <__hexnan+0x7a>
   bbe6a:	2508      	movs	r5, #8
   bbe6c:	e7b5      	b.n	bbdda <__hexnan+0x7a>
   bbe6e:	9b01      	ldr	r3, [sp, #4]
   bbe70:	2b00      	cmp	r3, #0
   bbe72:	d0df      	beq.n	bbe34 <__hexnan+0xd4>
   bbe74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bbe78:	f1c3 0320 	rsb	r3, r3, #32
   bbe7c:	fa22 f303 	lsr.w	r3, r2, r3
   bbe80:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bbe84:	401a      	ands	r2, r3
   bbe86:	f846 2c04 	str.w	r2, [r6, #-4]
   bbe8a:	e7d3      	b.n	bbe34 <__hexnan+0xd4>
   bbe8c:	3f04      	subs	r7, #4
   bbe8e:	e7d1      	b.n	bbe34 <__hexnan+0xd4>
   bbe90:	2004      	movs	r0, #4
   bbe92:	b007      	add	sp, #28
   bbe94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bbe98 <__retarget_lock_acquire_recursive>:
   bbe98:	4770      	bx	lr

000bbe9a <__retarget_lock_release>:
   bbe9a:	4770      	bx	lr

000bbe9c <__retarget_lock_release_recursive>:
   bbe9c:	4770      	bx	lr

000bbe9e <__ascii_mbtowc>:
   bbe9e:	b082      	sub	sp, #8
   bbea0:	b901      	cbnz	r1, bbea4 <__ascii_mbtowc+0x6>
   bbea2:	a901      	add	r1, sp, #4
   bbea4:	b142      	cbz	r2, bbeb8 <__ascii_mbtowc+0x1a>
   bbea6:	b14b      	cbz	r3, bbebc <__ascii_mbtowc+0x1e>
   bbea8:	7813      	ldrb	r3, [r2, #0]
   bbeaa:	600b      	str	r3, [r1, #0]
   bbeac:	7812      	ldrb	r2, [r2, #0]
   bbeae:	1e10      	subs	r0, r2, #0
   bbeb0:	bf18      	it	ne
   bbeb2:	2001      	movne	r0, #1
   bbeb4:	b002      	add	sp, #8
   bbeb6:	4770      	bx	lr
   bbeb8:	4610      	mov	r0, r2
   bbeba:	e7fb      	b.n	bbeb4 <__ascii_mbtowc+0x16>
   bbebc:	f06f 0001 	mvn.w	r0, #1
   bbec0:	e7f8      	b.n	bbeb4 <__ascii_mbtowc+0x16>
	...

000bbec4 <_Balloc>:
   bbec4:	b570      	push	{r4, r5, r6, lr}
   bbec6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbec8:	4604      	mov	r4, r0
   bbeca:	460d      	mov	r5, r1
   bbecc:	b976      	cbnz	r6, bbeec <_Balloc+0x28>
   bbece:	2010      	movs	r0, #16
   bbed0:	f7fb f9d6 	bl	b7280 <malloc>
   bbed4:	4602      	mov	r2, r0
   bbed6:	6260      	str	r0, [r4, #36]	; 0x24
   bbed8:	b920      	cbnz	r0, bbee4 <_Balloc+0x20>
   bbeda:	4b18      	ldr	r3, [pc, #96]	; (bbf3c <_Balloc+0x78>)
   bbedc:	4818      	ldr	r0, [pc, #96]	; (bbf40 <_Balloc+0x7c>)
   bbede:	2166      	movs	r1, #102	; 0x66
   bbee0:	f7fb fa06 	bl	b72f0 <__assert_func>
   bbee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbee8:	6006      	str	r6, [r0, #0]
   bbeea:	60c6      	str	r6, [r0, #12]
   bbeec:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bbeee:	68f3      	ldr	r3, [r6, #12]
   bbef0:	b183      	cbz	r3, bbf14 <_Balloc+0x50>
   bbef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbef4:	68db      	ldr	r3, [r3, #12]
   bbef6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bbefa:	b9b8      	cbnz	r0, bbf2c <_Balloc+0x68>
   bbefc:	2101      	movs	r1, #1
   bbefe:	fa01 f605 	lsl.w	r6, r1, r5
   bbf02:	1d72      	adds	r2, r6, #5
   bbf04:	0092      	lsls	r2, r2, #2
   bbf06:	4620      	mov	r0, r4
   bbf08:	f000 fc9d 	bl	bc846 <_calloc_r>
   bbf0c:	b160      	cbz	r0, bbf28 <_Balloc+0x64>
   bbf0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bbf12:	e00e      	b.n	bbf32 <_Balloc+0x6e>
   bbf14:	2221      	movs	r2, #33	; 0x21
   bbf16:	2104      	movs	r1, #4
   bbf18:	4620      	mov	r0, r4
   bbf1a:	f000 fc94 	bl	bc846 <_calloc_r>
   bbf1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bbf20:	60f0      	str	r0, [r6, #12]
   bbf22:	68db      	ldr	r3, [r3, #12]
   bbf24:	2b00      	cmp	r3, #0
   bbf26:	d1e4      	bne.n	bbef2 <_Balloc+0x2e>
   bbf28:	2000      	movs	r0, #0
   bbf2a:	bd70      	pop	{r4, r5, r6, pc}
   bbf2c:	6802      	ldr	r2, [r0, #0]
   bbf2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bbf32:	2300      	movs	r3, #0
   bbf34:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bbf38:	e7f7      	b.n	bbf2a <_Balloc+0x66>
   bbf3a:	bf00      	nop
   bbf3c:	000bd9d1 	.word	0x000bd9d1
   bbf40:	000bdc28 	.word	0x000bdc28

000bbf44 <_Bfree>:
   bbf44:	b570      	push	{r4, r5, r6, lr}
   bbf46:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bbf48:	4605      	mov	r5, r0
   bbf4a:	460c      	mov	r4, r1
   bbf4c:	b976      	cbnz	r6, bbf6c <_Bfree+0x28>
   bbf4e:	2010      	movs	r0, #16
   bbf50:	f7fb f996 	bl	b7280 <malloc>
   bbf54:	4602      	mov	r2, r0
   bbf56:	6268      	str	r0, [r5, #36]	; 0x24
   bbf58:	b920      	cbnz	r0, bbf64 <_Bfree+0x20>
   bbf5a:	4b09      	ldr	r3, [pc, #36]	; (bbf80 <_Bfree+0x3c>)
   bbf5c:	4809      	ldr	r0, [pc, #36]	; (bbf84 <_Bfree+0x40>)
   bbf5e:	218a      	movs	r1, #138	; 0x8a
   bbf60:	f7fb f9c6 	bl	b72f0 <__assert_func>
   bbf64:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bbf68:	6006      	str	r6, [r0, #0]
   bbf6a:	60c6      	str	r6, [r0, #12]
   bbf6c:	b13c      	cbz	r4, bbf7e <_Bfree+0x3a>
   bbf6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bbf70:	6862      	ldr	r2, [r4, #4]
   bbf72:	68db      	ldr	r3, [r3, #12]
   bbf74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bbf78:	6021      	str	r1, [r4, #0]
   bbf7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bbf7e:	bd70      	pop	{r4, r5, r6, pc}
   bbf80:	000bd9d1 	.word	0x000bd9d1
   bbf84:	000bdc28 	.word	0x000bdc28

000bbf88 <__multadd>:
   bbf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbf8c:	690d      	ldr	r5, [r1, #16]
   bbf8e:	4607      	mov	r7, r0
   bbf90:	460c      	mov	r4, r1
   bbf92:	461e      	mov	r6, r3
   bbf94:	f101 0c14 	add.w	ip, r1, #20
   bbf98:	2000      	movs	r0, #0
   bbf9a:	f8dc 3000 	ldr.w	r3, [ip]
   bbf9e:	b299      	uxth	r1, r3
   bbfa0:	fb02 6101 	mla	r1, r2, r1, r6
   bbfa4:	0c1e      	lsrs	r6, r3, #16
   bbfa6:	0c0b      	lsrs	r3, r1, #16
   bbfa8:	fb02 3306 	mla	r3, r2, r6, r3
   bbfac:	b289      	uxth	r1, r1
   bbfae:	3001      	adds	r0, #1
   bbfb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bbfb4:	4285      	cmp	r5, r0
   bbfb6:	f84c 1b04 	str.w	r1, [ip], #4
   bbfba:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bbfbe:	dcec      	bgt.n	bbf9a <__multadd+0x12>
   bbfc0:	b30e      	cbz	r6, bc006 <__multadd+0x7e>
   bbfc2:	68a3      	ldr	r3, [r4, #8]
   bbfc4:	42ab      	cmp	r3, r5
   bbfc6:	dc19      	bgt.n	bbffc <__multadd+0x74>
   bbfc8:	6861      	ldr	r1, [r4, #4]
   bbfca:	4638      	mov	r0, r7
   bbfcc:	3101      	adds	r1, #1
   bbfce:	f7ff ff79 	bl	bbec4 <_Balloc>
   bbfd2:	4680      	mov	r8, r0
   bbfd4:	b928      	cbnz	r0, bbfe2 <__multadd+0x5a>
   bbfd6:	4602      	mov	r2, r0
   bbfd8:	4b0c      	ldr	r3, [pc, #48]	; (bc00c <__multadd+0x84>)
   bbfda:	480d      	ldr	r0, [pc, #52]	; (bc010 <__multadd+0x88>)
   bbfdc:	21b5      	movs	r1, #181	; 0xb5
   bbfde:	f7fb f987 	bl	b72f0 <__assert_func>
   bbfe2:	6922      	ldr	r2, [r4, #16]
   bbfe4:	3202      	adds	r2, #2
   bbfe6:	f104 010c 	add.w	r1, r4, #12
   bbfea:	0092      	lsls	r2, r2, #2
   bbfec:	300c      	adds	r0, #12
   bbfee:	f7fe fc15 	bl	ba81c <memcpy>
   bbff2:	4621      	mov	r1, r4
   bbff4:	4638      	mov	r0, r7
   bbff6:	f7ff ffa5 	bl	bbf44 <_Bfree>
   bbffa:	4644      	mov	r4, r8
   bbffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bc000:	3501      	adds	r5, #1
   bc002:	615e      	str	r6, [r3, #20]
   bc004:	6125      	str	r5, [r4, #16]
   bc006:	4620      	mov	r0, r4
   bc008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc00c:	000bdba1 	.word	0x000bdba1
   bc010:	000bdc28 	.word	0x000bdc28

000bc014 <__s2b>:
   bc014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc018:	460c      	mov	r4, r1
   bc01a:	4615      	mov	r5, r2
   bc01c:	461f      	mov	r7, r3
   bc01e:	2209      	movs	r2, #9
   bc020:	3308      	adds	r3, #8
   bc022:	4606      	mov	r6, r0
   bc024:	fb93 f3f2 	sdiv	r3, r3, r2
   bc028:	2100      	movs	r1, #0
   bc02a:	2201      	movs	r2, #1
   bc02c:	429a      	cmp	r2, r3
   bc02e:	db09      	blt.n	bc044 <__s2b+0x30>
   bc030:	4630      	mov	r0, r6
   bc032:	f7ff ff47 	bl	bbec4 <_Balloc>
   bc036:	b940      	cbnz	r0, bc04a <__s2b+0x36>
   bc038:	4602      	mov	r2, r0
   bc03a:	4b19      	ldr	r3, [pc, #100]	; (bc0a0 <__s2b+0x8c>)
   bc03c:	4819      	ldr	r0, [pc, #100]	; (bc0a4 <__s2b+0x90>)
   bc03e:	21ce      	movs	r1, #206	; 0xce
   bc040:	f7fb f956 	bl	b72f0 <__assert_func>
   bc044:	0052      	lsls	r2, r2, #1
   bc046:	3101      	adds	r1, #1
   bc048:	e7f0      	b.n	bc02c <__s2b+0x18>
   bc04a:	9b08      	ldr	r3, [sp, #32]
   bc04c:	6143      	str	r3, [r0, #20]
   bc04e:	2d09      	cmp	r5, #9
   bc050:	f04f 0301 	mov.w	r3, #1
   bc054:	6103      	str	r3, [r0, #16]
   bc056:	dd16      	ble.n	bc086 <__s2b+0x72>
   bc058:	f104 0909 	add.w	r9, r4, #9
   bc05c:	46c8      	mov	r8, r9
   bc05e:	442c      	add	r4, r5
   bc060:	f818 3b01 	ldrb.w	r3, [r8], #1
   bc064:	4601      	mov	r1, r0
   bc066:	3b30      	subs	r3, #48	; 0x30
   bc068:	220a      	movs	r2, #10
   bc06a:	4630      	mov	r0, r6
   bc06c:	f7ff ff8c 	bl	bbf88 <__multadd>
   bc070:	45a0      	cmp	r8, r4
   bc072:	d1f5      	bne.n	bc060 <__s2b+0x4c>
   bc074:	f1a5 0408 	sub.w	r4, r5, #8
   bc078:	444c      	add	r4, r9
   bc07a:	1b2d      	subs	r5, r5, r4
   bc07c:	1963      	adds	r3, r4, r5
   bc07e:	42bb      	cmp	r3, r7
   bc080:	db04      	blt.n	bc08c <__s2b+0x78>
   bc082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc086:	340a      	adds	r4, #10
   bc088:	2509      	movs	r5, #9
   bc08a:	e7f6      	b.n	bc07a <__s2b+0x66>
   bc08c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bc090:	4601      	mov	r1, r0
   bc092:	3b30      	subs	r3, #48	; 0x30
   bc094:	220a      	movs	r2, #10
   bc096:	4630      	mov	r0, r6
   bc098:	f7ff ff76 	bl	bbf88 <__multadd>
   bc09c:	e7ee      	b.n	bc07c <__s2b+0x68>
   bc09e:	bf00      	nop
   bc0a0:	000bdba1 	.word	0x000bdba1
   bc0a4:	000bdc28 	.word	0x000bdc28

000bc0a8 <__hi0bits>:
   bc0a8:	0c03      	lsrs	r3, r0, #16
   bc0aa:	041b      	lsls	r3, r3, #16
   bc0ac:	b9d3      	cbnz	r3, bc0e4 <__hi0bits+0x3c>
   bc0ae:	0400      	lsls	r0, r0, #16
   bc0b0:	2310      	movs	r3, #16
   bc0b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bc0b6:	bf04      	itt	eq
   bc0b8:	0200      	lsleq	r0, r0, #8
   bc0ba:	3308      	addeq	r3, #8
   bc0bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bc0c0:	bf04      	itt	eq
   bc0c2:	0100      	lsleq	r0, r0, #4
   bc0c4:	3304      	addeq	r3, #4
   bc0c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bc0ca:	bf04      	itt	eq
   bc0cc:	0080      	lsleq	r0, r0, #2
   bc0ce:	3302      	addeq	r3, #2
   bc0d0:	2800      	cmp	r0, #0
   bc0d2:	db05      	blt.n	bc0e0 <__hi0bits+0x38>
   bc0d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bc0d8:	f103 0301 	add.w	r3, r3, #1
   bc0dc:	bf08      	it	eq
   bc0de:	2320      	moveq	r3, #32
   bc0e0:	4618      	mov	r0, r3
   bc0e2:	4770      	bx	lr
   bc0e4:	2300      	movs	r3, #0
   bc0e6:	e7e4      	b.n	bc0b2 <__hi0bits+0xa>

000bc0e8 <__lo0bits>:
   bc0e8:	6803      	ldr	r3, [r0, #0]
   bc0ea:	f013 0207 	ands.w	r2, r3, #7
   bc0ee:	4601      	mov	r1, r0
   bc0f0:	d00b      	beq.n	bc10a <__lo0bits+0x22>
   bc0f2:	07da      	lsls	r2, r3, #31
   bc0f4:	d423      	bmi.n	bc13e <__lo0bits+0x56>
   bc0f6:	0798      	lsls	r0, r3, #30
   bc0f8:	bf49      	itett	mi
   bc0fa:	085b      	lsrmi	r3, r3, #1
   bc0fc:	089b      	lsrpl	r3, r3, #2
   bc0fe:	2001      	movmi	r0, #1
   bc100:	600b      	strmi	r3, [r1, #0]
   bc102:	bf5c      	itt	pl
   bc104:	600b      	strpl	r3, [r1, #0]
   bc106:	2002      	movpl	r0, #2
   bc108:	4770      	bx	lr
   bc10a:	b298      	uxth	r0, r3
   bc10c:	b9a8      	cbnz	r0, bc13a <__lo0bits+0x52>
   bc10e:	0c1b      	lsrs	r3, r3, #16
   bc110:	2010      	movs	r0, #16
   bc112:	b2da      	uxtb	r2, r3
   bc114:	b90a      	cbnz	r2, bc11a <__lo0bits+0x32>
   bc116:	3008      	adds	r0, #8
   bc118:	0a1b      	lsrs	r3, r3, #8
   bc11a:	071a      	lsls	r2, r3, #28
   bc11c:	bf04      	itt	eq
   bc11e:	091b      	lsreq	r3, r3, #4
   bc120:	3004      	addeq	r0, #4
   bc122:	079a      	lsls	r2, r3, #30
   bc124:	bf04      	itt	eq
   bc126:	089b      	lsreq	r3, r3, #2
   bc128:	3002      	addeq	r0, #2
   bc12a:	07da      	lsls	r2, r3, #31
   bc12c:	d403      	bmi.n	bc136 <__lo0bits+0x4e>
   bc12e:	085b      	lsrs	r3, r3, #1
   bc130:	f100 0001 	add.w	r0, r0, #1
   bc134:	d005      	beq.n	bc142 <__lo0bits+0x5a>
   bc136:	600b      	str	r3, [r1, #0]
   bc138:	4770      	bx	lr
   bc13a:	4610      	mov	r0, r2
   bc13c:	e7e9      	b.n	bc112 <__lo0bits+0x2a>
   bc13e:	2000      	movs	r0, #0
   bc140:	4770      	bx	lr
   bc142:	2020      	movs	r0, #32
   bc144:	4770      	bx	lr
	...

000bc148 <__i2b>:
   bc148:	b510      	push	{r4, lr}
   bc14a:	460c      	mov	r4, r1
   bc14c:	2101      	movs	r1, #1
   bc14e:	f7ff feb9 	bl	bbec4 <_Balloc>
   bc152:	4602      	mov	r2, r0
   bc154:	b928      	cbnz	r0, bc162 <__i2b+0x1a>
   bc156:	4b05      	ldr	r3, [pc, #20]	; (bc16c <__i2b+0x24>)
   bc158:	4805      	ldr	r0, [pc, #20]	; (bc170 <__i2b+0x28>)
   bc15a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bc15e:	f7fb f8c7 	bl	b72f0 <__assert_func>
   bc162:	2301      	movs	r3, #1
   bc164:	6144      	str	r4, [r0, #20]
   bc166:	6103      	str	r3, [r0, #16]
   bc168:	bd10      	pop	{r4, pc}
   bc16a:	bf00      	nop
   bc16c:	000bdba1 	.word	0x000bdba1
   bc170:	000bdc28 	.word	0x000bdc28

000bc174 <__multiply>:
   bc174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc178:	4691      	mov	r9, r2
   bc17a:	690a      	ldr	r2, [r1, #16]
   bc17c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc180:	429a      	cmp	r2, r3
   bc182:	bfb8      	it	lt
   bc184:	460b      	movlt	r3, r1
   bc186:	460c      	mov	r4, r1
   bc188:	bfbc      	itt	lt
   bc18a:	464c      	movlt	r4, r9
   bc18c:	4699      	movlt	r9, r3
   bc18e:	6927      	ldr	r7, [r4, #16]
   bc190:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bc194:	68a3      	ldr	r3, [r4, #8]
   bc196:	6861      	ldr	r1, [r4, #4]
   bc198:	eb07 060a 	add.w	r6, r7, sl
   bc19c:	42b3      	cmp	r3, r6
   bc19e:	b085      	sub	sp, #20
   bc1a0:	bfb8      	it	lt
   bc1a2:	3101      	addlt	r1, #1
   bc1a4:	f7ff fe8e 	bl	bbec4 <_Balloc>
   bc1a8:	b930      	cbnz	r0, bc1b8 <__multiply+0x44>
   bc1aa:	4602      	mov	r2, r0
   bc1ac:	4b44      	ldr	r3, [pc, #272]	; (bc2c0 <__multiply+0x14c>)
   bc1ae:	4845      	ldr	r0, [pc, #276]	; (bc2c4 <__multiply+0x150>)
   bc1b0:	f240 115d 	movw	r1, #349	; 0x15d
   bc1b4:	f7fb f89c 	bl	b72f0 <__assert_func>
   bc1b8:	f100 0514 	add.w	r5, r0, #20
   bc1bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bc1c0:	462b      	mov	r3, r5
   bc1c2:	2200      	movs	r2, #0
   bc1c4:	4543      	cmp	r3, r8
   bc1c6:	d321      	bcc.n	bc20c <__multiply+0x98>
   bc1c8:	f104 0314 	add.w	r3, r4, #20
   bc1cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bc1d0:	f109 0314 	add.w	r3, r9, #20
   bc1d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bc1d8:	9202      	str	r2, [sp, #8]
   bc1da:	1b3a      	subs	r2, r7, r4
   bc1dc:	3a15      	subs	r2, #21
   bc1de:	f022 0203 	bic.w	r2, r2, #3
   bc1e2:	3204      	adds	r2, #4
   bc1e4:	f104 0115 	add.w	r1, r4, #21
   bc1e8:	428f      	cmp	r7, r1
   bc1ea:	bf38      	it	cc
   bc1ec:	2204      	movcc	r2, #4
   bc1ee:	9201      	str	r2, [sp, #4]
   bc1f0:	9a02      	ldr	r2, [sp, #8]
   bc1f2:	9303      	str	r3, [sp, #12]
   bc1f4:	429a      	cmp	r2, r3
   bc1f6:	d80c      	bhi.n	bc212 <__multiply+0x9e>
   bc1f8:	2e00      	cmp	r6, #0
   bc1fa:	dd03      	ble.n	bc204 <__multiply+0x90>
   bc1fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bc200:	2b00      	cmp	r3, #0
   bc202:	d05a      	beq.n	bc2ba <__multiply+0x146>
   bc204:	6106      	str	r6, [r0, #16]
   bc206:	b005      	add	sp, #20
   bc208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc20c:	f843 2b04 	str.w	r2, [r3], #4
   bc210:	e7d8      	b.n	bc1c4 <__multiply+0x50>
   bc212:	f8b3 a000 	ldrh.w	sl, [r3]
   bc216:	f1ba 0f00 	cmp.w	sl, #0
   bc21a:	d024      	beq.n	bc266 <__multiply+0xf2>
   bc21c:	f104 0e14 	add.w	lr, r4, #20
   bc220:	46a9      	mov	r9, r5
   bc222:	f04f 0c00 	mov.w	ip, #0
   bc226:	f85e 2b04 	ldr.w	r2, [lr], #4
   bc22a:	f8d9 1000 	ldr.w	r1, [r9]
   bc22e:	fa1f fb82 	uxth.w	fp, r2
   bc232:	b289      	uxth	r1, r1
   bc234:	fb0a 110b 	mla	r1, sl, fp, r1
   bc238:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bc23c:	f8d9 2000 	ldr.w	r2, [r9]
   bc240:	4461      	add	r1, ip
   bc242:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc246:	fb0a c20b 	mla	r2, sl, fp, ip
   bc24a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bc24e:	b289      	uxth	r1, r1
   bc250:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bc254:	4577      	cmp	r7, lr
   bc256:	f849 1b04 	str.w	r1, [r9], #4
   bc25a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bc25e:	d8e2      	bhi.n	bc226 <__multiply+0xb2>
   bc260:	9a01      	ldr	r2, [sp, #4]
   bc262:	f845 c002 	str.w	ip, [r5, r2]
   bc266:	9a03      	ldr	r2, [sp, #12]
   bc268:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bc26c:	3304      	adds	r3, #4
   bc26e:	f1b9 0f00 	cmp.w	r9, #0
   bc272:	d020      	beq.n	bc2b6 <__multiply+0x142>
   bc274:	6829      	ldr	r1, [r5, #0]
   bc276:	f104 0c14 	add.w	ip, r4, #20
   bc27a:	46ae      	mov	lr, r5
   bc27c:	f04f 0a00 	mov.w	sl, #0
   bc280:	f8bc b000 	ldrh.w	fp, [ip]
   bc284:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bc288:	fb09 220b 	mla	r2, r9, fp, r2
   bc28c:	4492      	add	sl, r2
   bc28e:	b289      	uxth	r1, r1
   bc290:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bc294:	f84e 1b04 	str.w	r1, [lr], #4
   bc298:	f85c 2b04 	ldr.w	r2, [ip], #4
   bc29c:	f8be 1000 	ldrh.w	r1, [lr]
   bc2a0:	0c12      	lsrs	r2, r2, #16
   bc2a2:	fb09 1102 	mla	r1, r9, r2, r1
   bc2a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bc2aa:	4567      	cmp	r7, ip
   bc2ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bc2b0:	d8e6      	bhi.n	bc280 <__multiply+0x10c>
   bc2b2:	9a01      	ldr	r2, [sp, #4]
   bc2b4:	50a9      	str	r1, [r5, r2]
   bc2b6:	3504      	adds	r5, #4
   bc2b8:	e79a      	b.n	bc1f0 <__multiply+0x7c>
   bc2ba:	3e01      	subs	r6, #1
   bc2bc:	e79c      	b.n	bc1f8 <__multiply+0x84>
   bc2be:	bf00      	nop
   bc2c0:	000bdba1 	.word	0x000bdba1
   bc2c4:	000bdc28 	.word	0x000bdc28

000bc2c8 <__pow5mult>:
   bc2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bc2cc:	4615      	mov	r5, r2
   bc2ce:	f012 0203 	ands.w	r2, r2, #3
   bc2d2:	4606      	mov	r6, r0
   bc2d4:	460f      	mov	r7, r1
   bc2d6:	d007      	beq.n	bc2e8 <__pow5mult+0x20>
   bc2d8:	4c25      	ldr	r4, [pc, #148]	; (bc370 <__pow5mult+0xa8>)
   bc2da:	3a01      	subs	r2, #1
   bc2dc:	2300      	movs	r3, #0
   bc2de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bc2e2:	f7ff fe51 	bl	bbf88 <__multadd>
   bc2e6:	4607      	mov	r7, r0
   bc2e8:	10ad      	asrs	r5, r5, #2
   bc2ea:	d03d      	beq.n	bc368 <__pow5mult+0xa0>
   bc2ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bc2ee:	b97c      	cbnz	r4, bc310 <__pow5mult+0x48>
   bc2f0:	2010      	movs	r0, #16
   bc2f2:	f7fa ffc5 	bl	b7280 <malloc>
   bc2f6:	4602      	mov	r2, r0
   bc2f8:	6270      	str	r0, [r6, #36]	; 0x24
   bc2fa:	b928      	cbnz	r0, bc308 <__pow5mult+0x40>
   bc2fc:	4b1d      	ldr	r3, [pc, #116]	; (bc374 <__pow5mult+0xac>)
   bc2fe:	481e      	ldr	r0, [pc, #120]	; (bc378 <__pow5mult+0xb0>)
   bc300:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bc304:	f7fa fff4 	bl	b72f0 <__assert_func>
   bc308:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc30c:	6004      	str	r4, [r0, #0]
   bc30e:	60c4      	str	r4, [r0, #12]
   bc310:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bc314:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bc318:	b94c      	cbnz	r4, bc32e <__pow5mult+0x66>
   bc31a:	f240 2171 	movw	r1, #625	; 0x271
   bc31e:	4630      	mov	r0, r6
   bc320:	f7ff ff12 	bl	bc148 <__i2b>
   bc324:	2300      	movs	r3, #0
   bc326:	f8c8 0008 	str.w	r0, [r8, #8]
   bc32a:	4604      	mov	r4, r0
   bc32c:	6003      	str	r3, [r0, #0]
   bc32e:	f04f 0900 	mov.w	r9, #0
   bc332:	07eb      	lsls	r3, r5, #31
   bc334:	d50a      	bpl.n	bc34c <__pow5mult+0x84>
   bc336:	4639      	mov	r1, r7
   bc338:	4622      	mov	r2, r4
   bc33a:	4630      	mov	r0, r6
   bc33c:	f7ff ff1a 	bl	bc174 <__multiply>
   bc340:	4639      	mov	r1, r7
   bc342:	4680      	mov	r8, r0
   bc344:	4630      	mov	r0, r6
   bc346:	f7ff fdfd 	bl	bbf44 <_Bfree>
   bc34a:	4647      	mov	r7, r8
   bc34c:	106d      	asrs	r5, r5, #1
   bc34e:	d00b      	beq.n	bc368 <__pow5mult+0xa0>
   bc350:	6820      	ldr	r0, [r4, #0]
   bc352:	b938      	cbnz	r0, bc364 <__pow5mult+0x9c>
   bc354:	4622      	mov	r2, r4
   bc356:	4621      	mov	r1, r4
   bc358:	4630      	mov	r0, r6
   bc35a:	f7ff ff0b 	bl	bc174 <__multiply>
   bc35e:	6020      	str	r0, [r4, #0]
   bc360:	f8c0 9000 	str.w	r9, [r0]
   bc364:	4604      	mov	r4, r0
   bc366:	e7e4      	b.n	bc332 <__pow5mult+0x6a>
   bc368:	4638      	mov	r0, r7
   bc36a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bc36e:	bf00      	nop
   bc370:	000bdd78 	.word	0x000bdd78
   bc374:	000bd9d1 	.word	0x000bd9d1
   bc378:	000bdc28 	.word	0x000bdc28

000bc37c <__lshift>:
   bc37c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bc380:	460c      	mov	r4, r1
   bc382:	6849      	ldr	r1, [r1, #4]
   bc384:	6923      	ldr	r3, [r4, #16]
   bc386:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bc38a:	68a3      	ldr	r3, [r4, #8]
   bc38c:	4607      	mov	r7, r0
   bc38e:	4691      	mov	r9, r2
   bc390:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bc394:	f108 0601 	add.w	r6, r8, #1
   bc398:	42b3      	cmp	r3, r6
   bc39a:	db0b      	blt.n	bc3b4 <__lshift+0x38>
   bc39c:	4638      	mov	r0, r7
   bc39e:	f7ff fd91 	bl	bbec4 <_Balloc>
   bc3a2:	4605      	mov	r5, r0
   bc3a4:	b948      	cbnz	r0, bc3ba <__lshift+0x3e>
   bc3a6:	4602      	mov	r2, r0
   bc3a8:	4b2a      	ldr	r3, [pc, #168]	; (bc454 <__lshift+0xd8>)
   bc3aa:	482b      	ldr	r0, [pc, #172]	; (bc458 <__lshift+0xdc>)
   bc3ac:	f240 11d9 	movw	r1, #473	; 0x1d9
   bc3b0:	f7fa ff9e 	bl	b72f0 <__assert_func>
   bc3b4:	3101      	adds	r1, #1
   bc3b6:	005b      	lsls	r3, r3, #1
   bc3b8:	e7ee      	b.n	bc398 <__lshift+0x1c>
   bc3ba:	2300      	movs	r3, #0
   bc3bc:	f100 0114 	add.w	r1, r0, #20
   bc3c0:	f100 0210 	add.w	r2, r0, #16
   bc3c4:	4618      	mov	r0, r3
   bc3c6:	4553      	cmp	r3, sl
   bc3c8:	db37      	blt.n	bc43a <__lshift+0xbe>
   bc3ca:	6920      	ldr	r0, [r4, #16]
   bc3cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bc3d0:	f104 0314 	add.w	r3, r4, #20
   bc3d4:	f019 091f 	ands.w	r9, r9, #31
   bc3d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bc3dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bc3e0:	d02f      	beq.n	bc442 <__lshift+0xc6>
   bc3e2:	f1c9 0e20 	rsb	lr, r9, #32
   bc3e6:	468a      	mov	sl, r1
   bc3e8:	f04f 0c00 	mov.w	ip, #0
   bc3ec:	681a      	ldr	r2, [r3, #0]
   bc3ee:	fa02 f209 	lsl.w	r2, r2, r9
   bc3f2:	ea42 020c 	orr.w	r2, r2, ip
   bc3f6:	f84a 2b04 	str.w	r2, [sl], #4
   bc3fa:	f853 2b04 	ldr.w	r2, [r3], #4
   bc3fe:	4298      	cmp	r0, r3
   bc400:	fa22 fc0e 	lsr.w	ip, r2, lr
   bc404:	d8f2      	bhi.n	bc3ec <__lshift+0x70>
   bc406:	1b03      	subs	r3, r0, r4
   bc408:	3b15      	subs	r3, #21
   bc40a:	f023 0303 	bic.w	r3, r3, #3
   bc40e:	3304      	adds	r3, #4
   bc410:	f104 0215 	add.w	r2, r4, #21
   bc414:	4290      	cmp	r0, r2
   bc416:	bf38      	it	cc
   bc418:	2304      	movcc	r3, #4
   bc41a:	f841 c003 	str.w	ip, [r1, r3]
   bc41e:	f1bc 0f00 	cmp.w	ip, #0
   bc422:	d001      	beq.n	bc428 <__lshift+0xac>
   bc424:	f108 0602 	add.w	r6, r8, #2
   bc428:	3e01      	subs	r6, #1
   bc42a:	4638      	mov	r0, r7
   bc42c:	612e      	str	r6, [r5, #16]
   bc42e:	4621      	mov	r1, r4
   bc430:	f7ff fd88 	bl	bbf44 <_Bfree>
   bc434:	4628      	mov	r0, r5
   bc436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bc43a:	f842 0f04 	str.w	r0, [r2, #4]!
   bc43e:	3301      	adds	r3, #1
   bc440:	e7c1      	b.n	bc3c6 <__lshift+0x4a>
   bc442:	3904      	subs	r1, #4
   bc444:	f853 2b04 	ldr.w	r2, [r3], #4
   bc448:	f841 2f04 	str.w	r2, [r1, #4]!
   bc44c:	4298      	cmp	r0, r3
   bc44e:	d8f9      	bhi.n	bc444 <__lshift+0xc8>
   bc450:	e7ea      	b.n	bc428 <__lshift+0xac>
   bc452:	bf00      	nop
   bc454:	000bdba1 	.word	0x000bdba1
   bc458:	000bdc28 	.word	0x000bdc28

000bc45c <__mcmp>:
   bc45c:	b530      	push	{r4, r5, lr}
   bc45e:	6902      	ldr	r2, [r0, #16]
   bc460:	690c      	ldr	r4, [r1, #16]
   bc462:	1b12      	subs	r2, r2, r4
   bc464:	d10e      	bne.n	bc484 <__mcmp+0x28>
   bc466:	f100 0314 	add.w	r3, r0, #20
   bc46a:	3114      	adds	r1, #20
   bc46c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bc470:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bc474:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bc478:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bc47c:	42a5      	cmp	r5, r4
   bc47e:	d003      	beq.n	bc488 <__mcmp+0x2c>
   bc480:	d305      	bcc.n	bc48e <__mcmp+0x32>
   bc482:	2201      	movs	r2, #1
   bc484:	4610      	mov	r0, r2
   bc486:	bd30      	pop	{r4, r5, pc}
   bc488:	4283      	cmp	r3, r0
   bc48a:	d3f3      	bcc.n	bc474 <__mcmp+0x18>
   bc48c:	e7fa      	b.n	bc484 <__mcmp+0x28>
   bc48e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc492:	e7f7      	b.n	bc484 <__mcmp+0x28>

000bc494 <__mdiff>:
   bc494:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc498:	460c      	mov	r4, r1
   bc49a:	4606      	mov	r6, r0
   bc49c:	4611      	mov	r1, r2
   bc49e:	4620      	mov	r0, r4
   bc4a0:	4690      	mov	r8, r2
   bc4a2:	f7ff ffdb 	bl	bc45c <__mcmp>
   bc4a6:	1e05      	subs	r5, r0, #0
   bc4a8:	d110      	bne.n	bc4cc <__mdiff+0x38>
   bc4aa:	4629      	mov	r1, r5
   bc4ac:	4630      	mov	r0, r6
   bc4ae:	f7ff fd09 	bl	bbec4 <_Balloc>
   bc4b2:	b930      	cbnz	r0, bc4c2 <__mdiff+0x2e>
   bc4b4:	4b3a      	ldr	r3, [pc, #232]	; (bc5a0 <__mdiff+0x10c>)
   bc4b6:	4602      	mov	r2, r0
   bc4b8:	f240 2132 	movw	r1, #562	; 0x232
   bc4bc:	4839      	ldr	r0, [pc, #228]	; (bc5a4 <__mdiff+0x110>)
   bc4be:	f7fa ff17 	bl	b72f0 <__assert_func>
   bc4c2:	2301      	movs	r3, #1
   bc4c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bc4c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bc4cc:	bfa4      	itt	ge
   bc4ce:	4643      	movge	r3, r8
   bc4d0:	46a0      	movge	r8, r4
   bc4d2:	4630      	mov	r0, r6
   bc4d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bc4d8:	bfa6      	itte	ge
   bc4da:	461c      	movge	r4, r3
   bc4dc:	2500      	movge	r5, #0
   bc4de:	2501      	movlt	r5, #1
   bc4e0:	f7ff fcf0 	bl	bbec4 <_Balloc>
   bc4e4:	b920      	cbnz	r0, bc4f0 <__mdiff+0x5c>
   bc4e6:	4b2e      	ldr	r3, [pc, #184]	; (bc5a0 <__mdiff+0x10c>)
   bc4e8:	4602      	mov	r2, r0
   bc4ea:	f44f 7110 	mov.w	r1, #576	; 0x240
   bc4ee:	e7e5      	b.n	bc4bc <__mdiff+0x28>
   bc4f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bc4f4:	6926      	ldr	r6, [r4, #16]
   bc4f6:	60c5      	str	r5, [r0, #12]
   bc4f8:	f104 0914 	add.w	r9, r4, #20
   bc4fc:	f108 0514 	add.w	r5, r8, #20
   bc500:	f100 0e14 	add.w	lr, r0, #20
   bc504:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bc508:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bc50c:	f108 0210 	add.w	r2, r8, #16
   bc510:	46f2      	mov	sl, lr
   bc512:	2100      	movs	r1, #0
   bc514:	f859 3b04 	ldr.w	r3, [r9], #4
   bc518:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bc51c:	fa1f f883 	uxth.w	r8, r3
   bc520:	fa11 f18b 	uxtah	r1, r1, fp
   bc524:	0c1b      	lsrs	r3, r3, #16
   bc526:	eba1 0808 	sub.w	r8, r1, r8
   bc52a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bc52e:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bc532:	fa1f f888 	uxth.w	r8, r8
   bc536:	1419      	asrs	r1, r3, #16
   bc538:	454e      	cmp	r6, r9
   bc53a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bc53e:	f84a 3b04 	str.w	r3, [sl], #4
   bc542:	d8e7      	bhi.n	bc514 <__mdiff+0x80>
   bc544:	1b33      	subs	r3, r6, r4
   bc546:	3b15      	subs	r3, #21
   bc548:	f023 0303 	bic.w	r3, r3, #3
   bc54c:	3304      	adds	r3, #4
   bc54e:	3415      	adds	r4, #21
   bc550:	42a6      	cmp	r6, r4
   bc552:	bf38      	it	cc
   bc554:	2304      	movcc	r3, #4
   bc556:	441d      	add	r5, r3
   bc558:	4473      	add	r3, lr
   bc55a:	469e      	mov	lr, r3
   bc55c:	462e      	mov	r6, r5
   bc55e:	4566      	cmp	r6, ip
   bc560:	d30e      	bcc.n	bc580 <__mdiff+0xec>
   bc562:	f10c 0203 	add.w	r2, ip, #3
   bc566:	1b52      	subs	r2, r2, r5
   bc568:	f022 0203 	bic.w	r2, r2, #3
   bc56c:	3d03      	subs	r5, #3
   bc56e:	45ac      	cmp	ip, r5
   bc570:	bf38      	it	cc
   bc572:	2200      	movcc	r2, #0
   bc574:	441a      	add	r2, r3
   bc576:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bc57a:	b17b      	cbz	r3, bc59c <__mdiff+0x108>
   bc57c:	6107      	str	r7, [r0, #16]
   bc57e:	e7a3      	b.n	bc4c8 <__mdiff+0x34>
   bc580:	f856 8b04 	ldr.w	r8, [r6], #4
   bc584:	fa11 f288 	uxtah	r2, r1, r8
   bc588:	1414      	asrs	r4, r2, #16
   bc58a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bc58e:	b292      	uxth	r2, r2
   bc590:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bc594:	f84e 2b04 	str.w	r2, [lr], #4
   bc598:	1421      	asrs	r1, r4, #16
   bc59a:	e7e0      	b.n	bc55e <__mdiff+0xca>
   bc59c:	3f01      	subs	r7, #1
   bc59e:	e7ea      	b.n	bc576 <__mdiff+0xe2>
   bc5a0:	000bdba1 	.word	0x000bdba1
   bc5a4:	000bdc28 	.word	0x000bdc28

000bc5a8 <__ulp>:
   bc5a8:	b082      	sub	sp, #8
   bc5aa:	ed8d 0b00 	vstr	d0, [sp]
   bc5ae:	9b01      	ldr	r3, [sp, #4]
   bc5b0:	4912      	ldr	r1, [pc, #72]	; (bc5fc <__ulp+0x54>)
   bc5b2:	4019      	ands	r1, r3
   bc5b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bc5b8:	2900      	cmp	r1, #0
   bc5ba:	dd05      	ble.n	bc5c8 <__ulp+0x20>
   bc5bc:	2200      	movs	r2, #0
   bc5be:	460b      	mov	r3, r1
   bc5c0:	ec43 2b10 	vmov	d0, r2, r3
   bc5c4:	b002      	add	sp, #8
   bc5c6:	4770      	bx	lr
   bc5c8:	4249      	negs	r1, r1
   bc5ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bc5ce:	ea4f 5021 	mov.w	r0, r1, asr #20
   bc5d2:	f04f 0200 	mov.w	r2, #0
   bc5d6:	f04f 0300 	mov.w	r3, #0
   bc5da:	da04      	bge.n	bc5e6 <__ulp+0x3e>
   bc5dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bc5e0:	fa41 f300 	asr.w	r3, r1, r0
   bc5e4:	e7ec      	b.n	bc5c0 <__ulp+0x18>
   bc5e6:	f1a0 0114 	sub.w	r1, r0, #20
   bc5ea:	291e      	cmp	r1, #30
   bc5ec:	bfda      	itte	le
   bc5ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bc5f2:	fa20 f101 	lsrle.w	r1, r0, r1
   bc5f6:	2101      	movgt	r1, #1
   bc5f8:	460a      	mov	r2, r1
   bc5fa:	e7e1      	b.n	bc5c0 <__ulp+0x18>
   bc5fc:	7ff00000 	.word	0x7ff00000

000bc600 <__b2d>:
   bc600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc602:	6905      	ldr	r5, [r0, #16]
   bc604:	f100 0714 	add.w	r7, r0, #20
   bc608:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bc60c:	1f2e      	subs	r6, r5, #4
   bc60e:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bc612:	4620      	mov	r0, r4
   bc614:	f7ff fd48 	bl	bc0a8 <__hi0bits>
   bc618:	f1c0 0320 	rsb	r3, r0, #32
   bc61c:	280a      	cmp	r0, #10
   bc61e:	f8df c07c 	ldr.w	ip, [pc, #124]	; bc69c <__b2d+0x9c>
   bc622:	600b      	str	r3, [r1, #0]
   bc624:	dc14      	bgt.n	bc650 <__b2d+0x50>
   bc626:	f1c0 0e0b 	rsb	lr, r0, #11
   bc62a:	fa24 f10e 	lsr.w	r1, r4, lr
   bc62e:	42b7      	cmp	r7, r6
   bc630:	ea41 030c 	orr.w	r3, r1, ip
   bc634:	bf34      	ite	cc
   bc636:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc63a:	2100      	movcs	r1, #0
   bc63c:	3015      	adds	r0, #21
   bc63e:	fa04 f000 	lsl.w	r0, r4, r0
   bc642:	fa21 f10e 	lsr.w	r1, r1, lr
   bc646:	ea40 0201 	orr.w	r2, r0, r1
   bc64a:	ec43 2b10 	vmov	d0, r2, r3
   bc64e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bc650:	42b7      	cmp	r7, r6
   bc652:	bf3a      	itte	cc
   bc654:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bc658:	f1a5 0608 	subcc.w	r6, r5, #8
   bc65c:	2100      	movcs	r1, #0
   bc65e:	380b      	subs	r0, #11
   bc660:	d017      	beq.n	bc692 <__b2d+0x92>
   bc662:	f1c0 0c20 	rsb	ip, r0, #32
   bc666:	fa04 f500 	lsl.w	r5, r4, r0
   bc66a:	42be      	cmp	r6, r7
   bc66c:	fa21 f40c 	lsr.w	r4, r1, ip
   bc670:	ea45 0504 	orr.w	r5, r5, r4
   bc674:	bf8c      	ite	hi
   bc676:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bc67a:	2400      	movls	r4, #0
   bc67c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bc680:	fa01 f000 	lsl.w	r0, r1, r0
   bc684:	fa24 f40c 	lsr.w	r4, r4, ip
   bc688:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bc68c:	ea40 0204 	orr.w	r2, r0, r4
   bc690:	e7db      	b.n	bc64a <__b2d+0x4a>
   bc692:	ea44 030c 	orr.w	r3, r4, ip
   bc696:	460a      	mov	r2, r1
   bc698:	e7d7      	b.n	bc64a <__b2d+0x4a>
   bc69a:	bf00      	nop
   bc69c:	3ff00000 	.word	0x3ff00000

000bc6a0 <__d2b>:
   bc6a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bc6a4:	4689      	mov	r9, r1
   bc6a6:	2101      	movs	r1, #1
   bc6a8:	ec57 6b10 	vmov	r6, r7, d0
   bc6ac:	4690      	mov	r8, r2
   bc6ae:	f7ff fc09 	bl	bbec4 <_Balloc>
   bc6b2:	4604      	mov	r4, r0
   bc6b4:	b930      	cbnz	r0, bc6c4 <__d2b+0x24>
   bc6b6:	4602      	mov	r2, r0
   bc6b8:	4b25      	ldr	r3, [pc, #148]	; (bc750 <__d2b+0xb0>)
   bc6ba:	4826      	ldr	r0, [pc, #152]	; (bc754 <__d2b+0xb4>)
   bc6bc:	f240 310a 	movw	r1, #778	; 0x30a
   bc6c0:	f7fa fe16 	bl	b72f0 <__assert_func>
   bc6c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bc6c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bc6cc:	bb35      	cbnz	r5, bc71c <__d2b+0x7c>
   bc6ce:	2e00      	cmp	r6, #0
   bc6d0:	9301      	str	r3, [sp, #4]
   bc6d2:	d028      	beq.n	bc726 <__d2b+0x86>
   bc6d4:	4668      	mov	r0, sp
   bc6d6:	9600      	str	r6, [sp, #0]
   bc6d8:	f7ff fd06 	bl	bc0e8 <__lo0bits>
   bc6dc:	9900      	ldr	r1, [sp, #0]
   bc6de:	b300      	cbz	r0, bc722 <__d2b+0x82>
   bc6e0:	9a01      	ldr	r2, [sp, #4]
   bc6e2:	f1c0 0320 	rsb	r3, r0, #32
   bc6e6:	fa02 f303 	lsl.w	r3, r2, r3
   bc6ea:	430b      	orrs	r3, r1
   bc6ec:	40c2      	lsrs	r2, r0
   bc6ee:	6163      	str	r3, [r4, #20]
   bc6f0:	9201      	str	r2, [sp, #4]
   bc6f2:	9b01      	ldr	r3, [sp, #4]
   bc6f4:	61a3      	str	r3, [r4, #24]
   bc6f6:	2b00      	cmp	r3, #0
   bc6f8:	bf14      	ite	ne
   bc6fa:	2202      	movne	r2, #2
   bc6fc:	2201      	moveq	r2, #1
   bc6fe:	6122      	str	r2, [r4, #16]
   bc700:	b1d5      	cbz	r5, bc738 <__d2b+0x98>
   bc702:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bc706:	4405      	add	r5, r0
   bc708:	f8c9 5000 	str.w	r5, [r9]
   bc70c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bc710:	f8c8 0000 	str.w	r0, [r8]
   bc714:	4620      	mov	r0, r4
   bc716:	b003      	add	sp, #12
   bc718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bc71c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bc720:	e7d5      	b.n	bc6ce <__d2b+0x2e>
   bc722:	6161      	str	r1, [r4, #20]
   bc724:	e7e5      	b.n	bc6f2 <__d2b+0x52>
   bc726:	a801      	add	r0, sp, #4
   bc728:	f7ff fcde 	bl	bc0e8 <__lo0bits>
   bc72c:	9b01      	ldr	r3, [sp, #4]
   bc72e:	6163      	str	r3, [r4, #20]
   bc730:	2201      	movs	r2, #1
   bc732:	6122      	str	r2, [r4, #16]
   bc734:	3020      	adds	r0, #32
   bc736:	e7e3      	b.n	bc700 <__d2b+0x60>
   bc738:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bc73c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bc740:	f8c9 0000 	str.w	r0, [r9]
   bc744:	6918      	ldr	r0, [r3, #16]
   bc746:	f7ff fcaf 	bl	bc0a8 <__hi0bits>
   bc74a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bc74e:	e7df      	b.n	bc710 <__d2b+0x70>
   bc750:	000bdba1 	.word	0x000bdba1
   bc754:	000bdc28 	.word	0x000bdc28

000bc758 <__ratio>:
   bc758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc75c:	4688      	mov	r8, r1
   bc75e:	4669      	mov	r1, sp
   bc760:	4681      	mov	r9, r0
   bc762:	f7ff ff4d 	bl	bc600 <__b2d>
   bc766:	a901      	add	r1, sp, #4
   bc768:	4640      	mov	r0, r8
   bc76a:	ec55 4b10 	vmov	r4, r5, d0
   bc76e:	f7ff ff47 	bl	bc600 <__b2d>
   bc772:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bc776:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bc77a:	eba3 0c02 	sub.w	ip, r3, r2
   bc77e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bc782:	1a9b      	subs	r3, r3, r2
   bc784:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bc788:	ec51 0b10 	vmov	r0, r1, d0
   bc78c:	2b00      	cmp	r3, #0
   bc78e:	bfd6      	itet	le
   bc790:	460a      	movle	r2, r1
   bc792:	462a      	movgt	r2, r5
   bc794:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bc798:	468b      	mov	fp, r1
   bc79a:	462f      	mov	r7, r5
   bc79c:	bfd4      	ite	le
   bc79e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bc7a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bc7a6:	4620      	mov	r0, r4
   bc7a8:	ee10 2a10 	vmov	r2, s0
   bc7ac:	465b      	mov	r3, fp
   bc7ae:	4639      	mov	r1, r7
   bc7b0:	f7f7 ff1c 	bl	b45ec <__aeabi_ddiv>
   bc7b4:	ec41 0b10 	vmov	d0, r0, r1
   bc7b8:	b003      	add	sp, #12
   bc7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bc7be <__copybits>:
   bc7be:	3901      	subs	r1, #1
   bc7c0:	b570      	push	{r4, r5, r6, lr}
   bc7c2:	1149      	asrs	r1, r1, #5
   bc7c4:	6914      	ldr	r4, [r2, #16]
   bc7c6:	3101      	adds	r1, #1
   bc7c8:	f102 0314 	add.w	r3, r2, #20
   bc7cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bc7d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bc7d4:	1f05      	subs	r5, r0, #4
   bc7d6:	42a3      	cmp	r3, r4
   bc7d8:	d30c      	bcc.n	bc7f4 <__copybits+0x36>
   bc7da:	1aa3      	subs	r3, r4, r2
   bc7dc:	3b11      	subs	r3, #17
   bc7de:	f023 0303 	bic.w	r3, r3, #3
   bc7e2:	3211      	adds	r2, #17
   bc7e4:	42a2      	cmp	r2, r4
   bc7e6:	bf88      	it	hi
   bc7e8:	2300      	movhi	r3, #0
   bc7ea:	4418      	add	r0, r3
   bc7ec:	2300      	movs	r3, #0
   bc7ee:	4288      	cmp	r0, r1
   bc7f0:	d305      	bcc.n	bc7fe <__copybits+0x40>
   bc7f2:	bd70      	pop	{r4, r5, r6, pc}
   bc7f4:	f853 6b04 	ldr.w	r6, [r3], #4
   bc7f8:	f845 6f04 	str.w	r6, [r5, #4]!
   bc7fc:	e7eb      	b.n	bc7d6 <__copybits+0x18>
   bc7fe:	f840 3b04 	str.w	r3, [r0], #4
   bc802:	e7f4      	b.n	bc7ee <__copybits+0x30>

000bc804 <__any_on>:
   bc804:	f100 0214 	add.w	r2, r0, #20
   bc808:	6900      	ldr	r0, [r0, #16]
   bc80a:	114b      	asrs	r3, r1, #5
   bc80c:	4298      	cmp	r0, r3
   bc80e:	b510      	push	{r4, lr}
   bc810:	db11      	blt.n	bc836 <__any_on+0x32>
   bc812:	dd0a      	ble.n	bc82a <__any_on+0x26>
   bc814:	f011 011f 	ands.w	r1, r1, #31
   bc818:	d007      	beq.n	bc82a <__any_on+0x26>
   bc81a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bc81e:	fa24 f001 	lsr.w	r0, r4, r1
   bc822:	fa00 f101 	lsl.w	r1, r0, r1
   bc826:	428c      	cmp	r4, r1
   bc828:	d10b      	bne.n	bc842 <__any_on+0x3e>
   bc82a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bc82e:	4293      	cmp	r3, r2
   bc830:	d803      	bhi.n	bc83a <__any_on+0x36>
   bc832:	2000      	movs	r0, #0
   bc834:	bd10      	pop	{r4, pc}
   bc836:	4603      	mov	r3, r0
   bc838:	e7f7      	b.n	bc82a <__any_on+0x26>
   bc83a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bc83e:	2900      	cmp	r1, #0
   bc840:	d0f5      	beq.n	bc82e <__any_on+0x2a>
   bc842:	2001      	movs	r0, #1
   bc844:	e7f6      	b.n	bc834 <__any_on+0x30>

000bc846 <_calloc_r>:
   bc846:	b513      	push	{r0, r1, r4, lr}
   bc848:	434a      	muls	r2, r1
   bc84a:	4611      	mov	r1, r2
   bc84c:	9201      	str	r2, [sp, #4]
   bc84e:	f7fa fd3f 	bl	b72d0 <_malloc_r>
   bc852:	4604      	mov	r4, r0
   bc854:	b118      	cbz	r0, bc85e <_calloc_r+0x18>
   bc856:	9a01      	ldr	r2, [sp, #4]
   bc858:	2100      	movs	r1, #0
   bc85a:	f7fe f807 	bl	ba86c <memset>
   bc85e:	4620      	mov	r0, r4
   bc860:	b002      	add	sp, #8
   bc862:	bd10      	pop	{r4, pc}
   bc864:	0000      	movs	r0, r0
	...

000bc868 <nan>:
   bc868:	ed9f 0b01 	vldr	d0, [pc, #4]	; bc870 <nan+0x8>
   bc86c:	4770      	bx	lr
   bc86e:	bf00      	nop
   bc870:	00000000 	.word	0x00000000
   bc874:	7ff80000 	.word	0x7ff80000

000bc878 <__ascii_wctomb>:
   bc878:	b149      	cbz	r1, bc88e <__ascii_wctomb+0x16>
   bc87a:	2aff      	cmp	r2, #255	; 0xff
   bc87c:	bf85      	ittet	hi
   bc87e:	238a      	movhi	r3, #138	; 0x8a
   bc880:	6003      	strhi	r3, [r0, #0]
   bc882:	700a      	strbls	r2, [r1, #0]
   bc884:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bc888:	bf98      	it	ls
   bc88a:	2001      	movls	r0, #1
   bc88c:	4770      	bx	lr
   bc88e:	4608      	mov	r0, r1
   bc890:	4770      	bx	lr

000bc892 <link_code_end>:
	...

000bc894 <link_const_data_start>:
   bc894:	514d0400 	.word	0x514d0400
   bc898:	00045454 	.word	0x00045454
   bc89c:	49514d06 	.word	0x49514d06
   bc8a0:	03706473 	.word	0x03706473
   bc8a4:	00000000 	.word	0x00000000
   bc8a8:	34fb0000 	.word	0x34fb0000
   bc8ac:	00805f9b 	.word	0x00805f9b
   bc8b0:	10008000 	.word	0x10008000
	...

000bc8bc <dynalib_user>:
   bc8bc:	000b4a3d 000b4a79 000b4aa1 000b4aa5     =J..yJ...J...J..
   bc8cc:	00000000 6c6c6143 206e6f20 65727570     ....Call on pure
   bc8dc:	72697620 6c617574 66656400 746c7561      virtual.default
   bc8ec:	534d0020 534c0042 533c0042 65534950      .MSB.LSB.<SPISe
   bc8fc:	6e697474 64207367 75616665 003e746c     ttings default>.
   bc90c:	4950533c 74746553 73676e69 25732520     <SPISettings %s%
   bc91c:	73252075 444f4d20 3e752545 73696400     u %s MODE%u>.dis
   bc92c:	6e6e6f63 65746365 32410064 73696420     connected.A2 dis
   bc93c:	203a2074 64203341 00747369 252c6425     t : A3 dist.%d,%
   bc94c:	616c0064 68742e62 6c637765 6d6f632e     d.lab.thewcl.com
   bc95c:	52414200 6772612f 2f326e6f 49535352     .BAR/argon2/RSSI
   bc96c:	52414200 6772612f 2f336e6f 49535352     .BAR/argon3/RSSI
   bc97c:	65666100 63636137 33332d35 342d3961     .afe7acc5-33a9-4
   bc98c:	2d663837 31656262 3439382d 30616134     78f-bbe1-8944aa0
   bc99c:	38386538 00000034                       8e884...

000bc9a4 <_ZTVN8particle11SPISettingsE>:
	...
   bc9ac:	000b4be9 000b4aed 000b4b75              .K...J..uK..

000bc9b8 <_ZTVN5spark10LogHandlerE>:
	...
   bc9c8:	000b4ac5 000b4aef                       .J...J..

000bc9d0 <_ZTVN5spark16SerialLogHandlerE>:
	...
   bc9d8:	000b4b85 000b4bb9 000b90f5 000b9299     .K...K..........

000bc9e8 <_ZL4font>:
   bc9e8:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   bc9f8:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   bca08:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   bca18:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   bca28:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   bca38:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   bca48:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   bca58:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   bca68:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   bca78:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   bca88:	00000000 5f000000 07000000 14000700     ......._........
   bca98:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   bcaa8:	00502056 00030708 41221c00 22410000     V P......."A..A"
   bcab8:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   bcac8:	08080800 00000808 20006060 02040810     ........``. ....
   bcad8:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   bcae8:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   bcaf8:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   bcb08:	00001e29 00000014 00003440 22140800     ).......@4....."
   bcb18:	14141441 41001414 02081422 06095901     A......A"....Y..
   bcb28:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   bcb38:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   bcb48:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   bcb58:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   bcb68:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   bcb78:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   bcb88:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   bcb98:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   bcba8:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   bcbb8:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   bcbc8:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   bcbd8:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   bcbe8:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   bcbf8:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   bcc08:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   bcc18:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   bcc28:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   bcc38:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   bcc48:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   bcc58:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   bcc68:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   bcc78:	41795555 78545422 54552142 54204078     UUyA"TTxB!UTx@ T
   bcc88:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   bcc98:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   bcca8:	45010042 127d407c f07d1211 f0282528     B..E|@}...}.(%(.
   bccb8:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   bccc8:	32494949 4444443a 484a323a 413a3048     III2:DDD:2JHH0:A
   bccd8:	3a7a2141 78204042 a0a09d00 42423d7d     A!z:B@ x....}=BB
   bcce8:	403d3d42 3c3d4040 2424ff24 43497e48     B==@@@=<$.$$H~IC
   bccf8:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   bcd08:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   bcd18:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   bcd28:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   bcd38:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   bcd48:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   bcd58:	00550055 aa55aa55 55ffaa55 00ff55ff     U.U.U.U.U..U.U..
   bcd68:	00ff0000 ff101010 14141400 101000ff     ................
   bcd78:	10ff00ff f010f010 fc141414 f7141400     ................
   bcd88:	0000ff00 14ff00ff fc04f414 10171414     ................
   bcd98:	1f10101f 14141f10 10001f14 00f01010     ................
   bcda8:	1f000000 10101010 1010101f 0010f010     ................
   bcdb8:	10ff0000 10101010 10101010 000010ff     ................
   bcdc8:	0014ff00 ff00ff00 101f0000 fc000017     ................
   bcdd8:	1414f404 14171017 f404f414 00ff0000     ................
   bcde8:	141414f7 14141414 14f700f7 14171414     ................
   bcdf8:	101f1010 1414141f 101014f4 00f010f0     ................
   bce08:	1f101f00 1f000000 00000014 000014fc     ................
   bce18:	10f010f0 ff10ff10 ff141414 10101014     ................
   bce28:	0000001f ff10f000 ffffffff f0f0f0f0     ................
   bce38:	fffffff0 00000000 0fffff00 0f0f0f0f     ................
   bce48:	38444438 4a4afc44 027e344a 02060602     8DD8D.JJJ4~.....
   bce58:	027e027e 41495563 44443863 7e40043c     ~.~.cUIAc8DD<.@~
   bce68:	06201e20 02027e02 a5e7a599 492a1c99      . ..~........*I
   bce78:	724c1c2a 304c7201 304d4d4a 48784830     *.Lr.rL0JMM00HxH
   bce88:	5a62bc30 493e3d46 7e004949 7e010101     0.bZF=>III.~...~
   bce98:	2a2a2a2a 5f44442a 51404444 4040444a     *****DD_DD@QJD@@
   bcea8:	40514a44 01ff0000 ff80e003 08080000     DJQ@............
   bceb8:	36086b6b 36243612 0f090f06 18000006     kk.6.6$6........
   bcec8:	00000018 30001010 0101ff40 01011f00     .......0@.......
   bced8:	1d19001e 3c001217 003c3c3c 00000000     .......<<<<.....

000bcee8 <_ZTV12Adafruit_GFX>:
	...
   bcef8:	000b5719 000b95a9 000b4ac5 000b511f     .W.......J...Q..
   bcf08:	000b5121 000b5153 000b512f 000b5141     !Q..SQ../Q..AQ..
   bcf18:	000b5061 000b511f 000b534b 000b5349     aP...Q..KS..IS..
   bcf28:	000b516b 000b51a9 000b51e3 000b5229     kQ...Q...Q..)R..
   bcf38:	000b5245 000b52c9                       ER...R..

000bcf40 <_ZL12splash1_data>:
   bcf40:	00000000 00800100 00000000 00000000     ................
   bcf50:	00008003 00000000 07000000 000000c0     ................
   bcf60:	00000000 c0070000 00000000 00000000     ................
   bcf70:	00c00f00 00000000 00000000 0000e01f     ................
   bcf80:	00000000 1f000000 000000e0 00000000     ................
   bcf90:	e03f0000 00000000 00000000 00f03f00     ..?..........?..
	...
   bcfa8:	0000f07f 00000000 7ff81f00 000000f0     ................
   bcfb8:	00000000 f07ffe3f 00000000 3f000000     ....?..........?
   bcfc8:	00f07fff 00000000 ff1f0000 0000e0fb     ................
   bcfd8:	00000000 f9ff0f00 0000c0ff 00000000     ................
   bcfe8:	fff9ff0f 000000f8 07000000 fffff1ff     ................
   bcff8:	00000000 fc030000 80ffff73 00000000     ........s.......
   bd008:	3ffe0100 0080ffff 00000000 0f1eff00     ...?............
   bd018:	000000ff 00000000 fc1ffe7f 00000000     ................
   bd028:	3f000000 00f8ffff 00000000 df0f0000     ...?............
   bd038:	0000e0ff 00000000 ff191f00 000000c0     ................
   bd048:	00000000 00ff3c3f 00000000 7e000000     ....?<.........~
   bd058:	0000f87c 00000000 fe7f0000 0000007c     |...........|...
   bd068:	00000000 fcffff00 00000000 00000000     ................
   bd078:	00feffff 00000000 ff000000 0000feff     ................
   bd088:	00000000 efff0100 000000fe 00000000     ................
   bd098:	fecfff01 00000000 03000000 00fe07ff     ................
   bd0a8:	00000000 fc030000 0000fe07 00000000     ................
   bd0b8:	03f00300 000000fe 00000000 fe008001     ................
	...
   bd0d0:	007e0000 00000000 00000000 00003e00     ..~..........>..
	...
   bd0e8:	0000000c 07000000 00fc0080 00c00300     ................
   bd0f8:	80070000 0000fc01 0000c003 01800700     ................
   bd108:	030000fc 000000c0 e0018007 1e000000     ................
   bd118:	07000000 00e00180 001e0000 9ff7e37f     ................
   bd128:	78e7fdf9 ffc0df7b fdbffff7 7b78fffd     ...x{.........x{
   bd138:	f7ffc0df fdfdbfff df7b78ff 87f7f0c0     .........x{.....
   bd148:	ffe13dbc 00de7b78 bc87f7f0 78f0e13d     .=..x{......=..x
   bd158:	0000de7b 3d8087f7 7b78e0e1 f77f00de     {......=..x{....
   bd168:	e1fd9f87 de7b78e0 87f7ff00 e0e1fdbf     .....x{.........
   bd178:	00de7b78 bc87f7f0 78e0e13d f000de7b     x{......=..x{...
   bd188:	3dbc87f7 7b78e0e1 f7f000de e13dbc87     ...=..x{......=.
   bd198:	de7b78e0 fff7ff00 e0e1fdbf c0dffb7f     .x{.............
   bd1a8:	bffff7ff 7fe0e1fd 7cc0dffb 3d9ff3f3     ...........|...=
   bd1b8:	7b3ee0e1 0000c0cf 00000000 00000000     ..>{............
   bd1c8:	ffffff00 ffffffff c0ffffff ffffffff     ................
   bd1d8:	11db68fd ffc0311a fdffffff 6afb5a2b     .h...1......+Z.j
   bd1e8:	ffffc0ef 4bfdffff 331a3b5b ffffffc0     .......K[;.3....
   bd1f8:	5b6bfdff c0fd6adb                       ..k[.j..

000bd200 <_ZL12splash2_data>:
   bd200:	00600000 00000000 00000000 00000000     ..`.............
   bd210:	0000e000 00000000 00000000 01000000     ................
   bd220:	000000e0 00000000 00000000 f0010000     ................
	...
   bd23c:	00f00300 00000000 00000000 00000000     ................
   bd24c:	0000f007 00000000 00000000 07000000     ................
   bd25c:	000000f8 00000000 00000000 f80f0000     ................
   bd26c:	03000000 007e00c0 00e00100 00f80f7f     ......~.........
   bd27c:	c0030000 0000fe00 ff00e001 0000f8ef     ................
   bd28c:	00c00300 010000fe ffff00e0 000000f8     ................
   bd29c:	f000c003 0f000000 7ffe7f00 030000c0     ................
   bd2ac:	00f000c0 000f0000 f87ffe3f cffbf13f     ........?...?...
   bd2bc:	bcf3fefc 1fe0ef3d 7fff7ffe fedffffb     ....=...........
   bd2cc:	3dbcfffe c61fe0ef fb7fffff fefedfff     ...=............
   bd2dc:	ef3dbcff c7e30fe0 c37b78fe fff01ede     ..=......x{.....
   bd2ec:	00ef3dbc fc87ff07 dec37b78 3cf8f01e     .=......x{.....<
   bd2fc:	0100ef3d 00f0ffff 1ec0c37b 3d3cf0f0     =.......{.....<=
   bd30c:	f30100ef fb3fe07f f0fecfc3 ef3d3cf0     ......?......<=.
   bd31c:	3fe30300 c3fb7f80 f0f0fedf 00ef3d3c     ...?........<=..
   bd32c:	003ce707 dec37b78 3cf0f01e 0700ef3d     ..<.x{.....<=...
   bd33c:	7800beff 1edec37b 3d3cf0f0 ff0700ef     ...x{.....<=....
   bd34c:	7b7800fe f01edec3 ef3d3cf0 feff0f00     ..x{.....<=.....
   bd35c:	fffb7f00 f0f0fedf e0effd3f 00ffff0f     ........?.......
   bd36c:	dffffb7f 3ff0f0fe 0fe0effd 3e00fff9     .......?.......>
   bd37c:	9ecff979 3d1ff0f0 f11fe0e7 000000ff     y......=........
	...
   bd394:	ff801f00 ffff7f00 ffffffff e0ffffff     ................
   bd3a4:	007f001c ffffff7f 886db4fe 00e0188d     ..........m.....
   bd3b4:	7f001f00 feffffff b57dad95 0000e077     ..........}.w...
   bd3c4:	ff7f000f a5feffff 198d9dad 060000e0     ................
   bd3d4:	ffff7f00 adb5feff e07eb5ed              ..........~.

000bd3e0 <_ZTV16Adafruit_SSD1306>:
	...
   bd3e8:	000b5829 000b5841 000b5719 000b95a9     )X..AX...W......
   bd3f8:	000b5855 000b511f 000b5121 000b5153     UX...Q..!Q..SQ..
   bd408:	000b512f 000b5141 000b5061 000b511f     /Q..AQ..aP...Q..
   bd418:	000b534b 000b59f3 000b5f9b 000b5f4d     KS...Y..._..M_..
   bd428:	000b51e3 000b5229 000b5245 000b52c9     .Q..)R..ER...R..

000bd438 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   bd438:	e0c08000 fefcf8f0                       ........

000bd440 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   bd440:	07030100 7f3f1f0f                       ......?.

000bd448 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   bd448:	a880d5ae                                ....

000bd44c <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   bd44c:	8d4000d3                                ..@.

000bd450 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   bd450:	c8a10020                                 ...

000bd454 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   bd454:	a6a440db                                 .@....

000bd45a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   bd45a:	8f8102da                                ....

000bd45e <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   bd45e:	                                         ...

000bd461 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   bd461:	                                         ...

000bd464 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   bd464:	21ff0022 76656400 20656369 20746f6e     "..!.device not 
   bd474:	6e756f66 00000064                       found...

000bd47c <_ZTV6LIS3DH>:
	...
   bd48c:	000b62d1 000b4ac5 000b4ac5              .b...J...J..

000bd498 <_ZTV9LIS3DHSPI>:
	...
   bd4a0:	000b61bf 000b61c1 000b62f3 000b61ff     .a...a...b...a..
   bd4b0:	000b6241 000b61cf 000b61e9              Ab...a...a..

000bd4bc <_ZTV16OledWingAdafruit>:
	...
   bd4c4:	000b6b7d 000b6b9d 000b5719 000b95a9     }k...k...W......
   bd4d4:	000b5855 000b511f 000b5121 000b5153     UX...Q..!Q..SQ..
   bd4e4:	000b512f 000b5141 000b5061 000b511f     /Q..AQ..aP...Q..
   bd4f4:	000b534b 000b59f3 000b5f9b 000b5f4d     KS...Y..._..M_..
   bd504:	000b51e3 000b5229 000b5245 000b52c9     .Q..)R..ER...R..
   bd514:	65737341 6f697472 6961466e 6572756c     AssertionFailure
   bd524:	6c616620 77006573 6e697269 6c622e67      false.wiring.bl
   bd534:	74530065 20747261 63736964 7265766f     e.Start discover
   bd544:	20676e69 76726573 73656369 7341002e     ing services..As
   bd554:	74726573 466e6f69 756c6961 68206572     sertionFailure h
   bd564:	625f6c61 735f656c 6b636174 696e695f     al_ble_stack_ini
   bd574:	756e2874 74706c6c 3d202972 5953203d     t(nullptr) == SY
   bd584:	4d455453 5252455f 4e5f524f 00454e4f     STEM_ERROR_NONE.
   bd594:	6c696146 74206465 7061206f 646e6570     Failed to append
   bd5a4:	65657020 65432072 6172746e 6564206c      peer Central de
   bd5b4:	65636976 6f43002e 63656e6e 00646574     vice..Connected.
   bd5c4:	63736944 656e6e6f 64657463 00000000     Disconnected....

000bd5d4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd5dc:	000b7317 000b7339 000b78d7 000b7347     .s..9s...x..Gs..
   bd5ec:	000b7319                                .s..

000bd5f0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000bd5f8 <_ZTVN5spark13EthernetClassE>:
	...
   bd600:	000b7f23 000b7f19 000b7f0f 000b7f05     #...............
   bd610:	000b7ef9 000b7eed 000b9485 000b948d     .~...~..........
   bd620:	000b7ee1 000b7ed9 000b7ecf 000b7ec5     .~...~...~...~..
   bd630:	000b94bd                                ....

000bd634 <_ZTV7TwoWire>:
	...
   bd63c:	000b7f41 000b7f8b 000b7f63 000b7f43     A.......c...C...
   bd64c:	000b7f6b 000b7f73 000b7f7b 000b7f83     k...s...{.......

000bd65c <_ZTV9IPAddress>:
	...
   bd664:	000b8015 000b8005 000b8007 75007525     ............%u.u
   bd674:	78343025 75616200 65530064 6c616972     %04x.baud.Serial
   bd684:	72655300 316c6169 4f534a00 7274534e     .Serial1.JSONStr
   bd694:	4c6d6165 6148676f 656c646e 70610072     eamLogHandler.ap
   bd6a4:	30250070 20753031 00205d00 2800202c     p.%010u .] ., .(
   bd6b4:	00203a29 63005b20 2065646f 2500203d     ): . [.code = .%
   bd6c4:	65640069 6c696174 203d2073 000a0d00     i.details = ....
   bd6d4:	66006e6c 6f63006e 64006564 69617465     ln.fn.code.detai
   bd6e4:	0000006c                                l...

000bd6e8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   bd6f0:	000b84ed 000b8513 000b84d1 000b814f     ............O...

000bd700 <_ZTVN5spark16StreamLogHandlerE>:
	...
   bd708:	000b899d 000b89b5 000b90f5 000b9299     ................

000bd718 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   bd720:	000b89c9 000b89dd 000b92d1 000b84d9     ................

000bd730 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   bd738:	000b84eb 000b8521 000b9059 000b84db     ....!...Y.......

000bd748 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   bd750:	000b84e9 000b852f 000b8905 000b8551     ..../.......Q...

000bd760 <_ZTVN5spark12NetworkClassE>:
	...
   bd768:	000b9445 000b944f 000b9459 000b9463     E...O...Y...c...
   bd778:	000b946d 000b9479 000b9485 000b948d     m...y...........
   bd788:	000b9495 000b94a1 000b94a9 000b94b3     ................
   bd798:	000b94bd                                ....

000bd79c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   bd79c:	18100800 38302820 69726977 7200676e     .... (08wiring.r
   bd7ac:	20766365 6f727265 203d2072 00006425     ecv error = %d..

000bd7bc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   bd7c4:	000b9ac5 000b9ae9 000ba01b 000b9af7     ................
   bd7d4:	000b9ac9                                ....

000bd7d8 <_ZTV9TCPClient>:
	...
   bd7e0:	000b9b75 000b9ba9 000b9a41 000b9a5b     u.......A...[...
   bd7f0:	000b9eb1 000b9a85 000b9d27 000b9ab9     ........'.......
   bd800:	000b9db9 000b9bf9 000b9d55 000b9f65     ........U...e...
   bd810:	000b9cf5 000b9abb 000b9a6d 000b9afd     ........m.......
   bd820:	000b9bd9 252d5925 64252d6d 3a482554     ....%Y-%m-%dT%H:
   bd830:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000bd840 <_ZTV11USARTSerial>:
	...
   bd848:	000ba035 000ba0a1 000ba079 000b95a9     5.......y.......
   bd858:	000ba049 000ba065 000ba057 000ba073     I...e...W...s...
   bd868:	000ba037 000ba03b                       7...;...

000bd870 <_ZTV9USBSerial>:
	...
   bd878:	000ba0f3 000ba15b 000ba131 000b95a9     ....[...1.......
   bd888:	000ba123 000ba0f5 000ba105 000ba155     #...........U...
   bd898:	000ba115 000ba0ed                       ........

000bd8a0 <_ZTVN5spark9WiFiClassE>:
	...
   bd8a8:	000ba25b 000ba251 000ba247 000ba1fd     [...Q...G.......
   bd8b8:	000ba23b 000ba22f 000b9485 000b948d     ;.../...........
   bd8c8:	000ba223 000ba21b 000ba211 000ba207     #...............
   bd8d8:	000b94bd                                ....

000bd8dc <_ZSt7nothrow>:
	...

000bd8dd <_ZTSSt19_Sp_make_shared_tag>:
   bd8dd:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   bd8ed:	5f646572 00676174                        red_tag....

000bd8f8 <_ZTISt19_Sp_make_shared_tag>:
   bd8f8:	000bd938 000bd8dd                       8.......

000bd900 <_ZTIN10__cxxabiv117__class_type_infoE>:
   bd900:	000bd998 000bd90c 000bd9bc              ............

000bd90c <_ZTSN10__cxxabiv117__class_type_infoE>:
   bd90c:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   bd91c:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   bd92c:	00000045                                E...

000bd930 <_ZTVN10__cxxabiv117__class_type_infoE>:
   bd930:	00000000 000bd900 000ba601 000ba615     ................
   bd940:	000ba7a9 000ba7a9 000ba67f 000ba5c1     ................
   bd950:	000ba667 000ba629 000ba5f3              g...).......

000bd95c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   bd95c:	000bd998 000bd968 000bd900              ....h.......

000bd968 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   bd968:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   bd978:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   bd988:	456f666e 00000000                       nfoE....

000bd990 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   bd990:	00000000 000bd95c 000ba6a9 000ba6bd     ....\...........
   bd9a0:	000ba7a9 000ba7a9 000ba67f 000ba5c1     ................
   bd9b0:	000ba77d 000ba709 000ba6d1              }...........

000bd9bc <_ZTISt9type_info>:
   bd9bc:	000bd938 000bd9c4                       8.......

000bd9c4 <_ZTSSt9type_info>:
   bd9c4:	74397453 5f657079 6f666e69 45455200     St9type_info.REE
   bd9d4:	6d20544e 6f6c6c61 75732063 65656363     NT malloc succee
   bd9e4:	00646564 706d742f 6e656a2f 736e696b     ded./tmp/jenkins
   bd9f4:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bda04:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bda14:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bda24:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bda34:	696c6474 61722f62 632e646e 00666e00     tdlib/rand.c.nf.
   bda44:	74696e69 6e610079 00000000              inity.an....

000bda50 <fpi.1>:
   bda50:	00000035 fffffbce 000003cb 00000001     5...............
   bda60:	00000000                                ....

000bda64 <fpinan.0>:
   bda64:	00000034 fffffbce 000003cb 00000001     4...............
   bda74:	00000000                                ....

000bda78 <tinytens>:
   bda78:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
   bda88:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
   bda98:	64ac6f43 11680628                       Co.d(.h.

000bdaa0 <_ctype_>:
   bdaa0:	20202000 20202020 28282020 20282828     .         ((((( 
   bdab0:	20202020 20202020 20202020 20202020                     
   bdac0:	10108820 10101010 10101010 10101010      ...............
   bdad0:	04040410 04040404 10040404 10101010     ................
   bdae0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   bdaf0:	01010101 01010101 01010101 10101010     ................
   bdb00:	42421010 42424242 02020202 02020202     ..BBBBBB........
   bdb10:	02020202 02020202 02020202 10101010     ................
   bdb20:	00000020 00000000 00000000 00000000      ...............
	...
   bdba0:	6c614200 20636f6c 63637573 65646565     .Balloc succeede
   bdbb0:	742f0064 6a2f706d 696b6e65 472d736e     d./tmp/jenkins-G
   bdbc0:	312d4343 69702d30 696c6570 342d656e     CC-10-pipeline-4
   bdbd0:	30325f38 31313032 315f3432 31363036     8_20201124_16061
   bdbe0:	33363038 72732f39 656e2f63 62696c77     80639/src/newlib
   bdbf0:	77656e2f 2f62696c 6362696c 6474732f     /newlib/libc/std
   bdc00:	2f62696c 6f746467 65672d61 78656874     lib/gdtoa-gethex
   bdc10:	0000632e                                .c..

000bdc14 <_C_numeric_locale>:
   bdc14:	000bd5b8 000bd6d3 2003e3bc 4f500043     ........... C.PO
   bdc24:	00584953 706d742f 6e656a2f 736e696b     SIX./tmp/jenkins
   bdc34:	4343472d 2d30312d 65706970 656e696c     -GCC-10-pipeline
   bdc44:	5f38342d 30323032 34323131 3036315f     -48_20201124_160
   bdc54:	30383136 2f393336 2f637273 6c77656e     6180639/src/newl
   bdc64:	6e2f6269 696c7765 696c2f62 732f6362     ib/newlib/libc/s
   bdc74:	696c6474 706d2f62 2e636572 00000063     tdlib/mprec.c...
   bdc84:	00000000                                ....

000bdc88 <__mprec_bigtens>:
   bdc88:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   bdc98:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   bdca8:	7f73bf3c 75154fdd                       <.s..O.u

000bdcb0 <__mprec_tens>:
   bdcb0:	00000000 3ff00000 00000000 40240000     .......?......$@
   bdcc0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   bdcd0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   bdce0:	00000000 412e8480 00000000 416312d0     .......A......cA
   bdcf0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   bdd00:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   bdd10:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   bdd20:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   bdd30:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   bdd40:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   bdd50:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   bdd60:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   bdd70:	79d99db4 44ea7843                       ...yCx.D

000bdd78 <p05.0>:
   bdd78:	00000005 00000019 0000007d              ........}...

000bdd84 <link_const_data_end>:
   bdd84:	000b4f11 	.word	0x000b4f11
   bdd88:	000b7eb5 	.word	0x000b7eb5
   bdd8c:	000b7f2d 	.word	0x000b7f2d
   bdd90:	000b90e5 	.word	0x000b90e5
   bdd94:	000b9595 	.word	0x000b9595
   bdd98:	000b96d1 	.word	0x000b96d1
   bdd9c:	000b9a1d 	.word	0x000b9a1d
   bdda0:	000ba021 	.word	0x000ba021
   bdda4:	000ba265 	.word	0x000ba265
